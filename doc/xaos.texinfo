\input texinfo   @c -*-texinfo-*-

@c The original files are xaos.geninfo and xaos.hlp. Xaos.texinfo is
@c automatically generates. So make all changes into orignal files please.

@c Use A4 paper - If you don't like that, remove the following 3 lines.
@iftex
@afourpaper
@end iftex

@setfilename xaos.info
@settitle An fast realtime interactive fractal zoomer---user's manual
@dircategory Graphics
@direntry 
 * XaoS: (xaos).               The fast realtime interactive fractal zoomer
@end direntry


@ifinfo
@copyright{} 1997 Jan Hubicka

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@end ifinfo

@c %**end of header

@set VERSION    3.1
@set DATE       May 14, 1998

@titlepage

@title{XaoS @value{VERSION}}
@subtitle{An fast realtime fractal zoomer---User's manual}

@author{Jan Hubi@v cka}
@tex
Dukelsk\'ych bojovn\'\i ku 1944 
@end tex
@*
390 03 T@'abor @*
Czech Republic

Email: @code{hubicka@@paru.cas.cz}

@value{DATE}

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll

@copyright{} 1997 @tex Jan Hubi\v cka 
@end tex

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@end titlepage

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@node   Top,    Overview,       (dir),  (dir)

@ifinfo
@top XaoS @value{VERSION}
@flushright 1.0
An realtime interactive fractal zoomer
User's manual
@value{DATE}
@end flushright

This manual contains user documentation about XaoS---an fast realtime zoomer.
XaoS uses open development model, so sources are freely available. File
@code{xaosdev.texinfo} in the source documentation contains hacker's manual.
(design overview, algorithm description etc.)
@end ifinfo


@menu
* Overview::		What does this software do then ?
* tutorial::		XaoS tutorial
* controls::		Basic controls
* mpeg::		How to encode MPEG files
* format::		XaoS's file format description
* writehelp::		How to write XaoS help files
* xshl::		XaoS simaple hypertext language
* drivers::		Driver specific documentation
* menus::		Functions, menu items and command line parameters
* authors::		Credits
* lists::		Mailing lists
* index::		Function index
@end menu


@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@node Overview, tutorial, Top, Top

@chapter Overview
@menu
* Why?::		Why yet another fractal generator?
* What?::		What does this software do then?
@end menu

@node Why?, What?, Overview, Overview
@section Why yet another fractal generator?


We decided to make XaoS, because all fractal browsers we know needs
long time to calculate every image. You may browse nice images
generated by them but real impression from fractal---they self
similarity and possible infinite zooming into nice part of fractals
can be seen only in animation. There are many programs available that
makes nice animations but they takes long time to calculate and lots
of space on disc. Most of animations are quite ugly because their
authors can't see it without many hours of calculations.

Natural question is: it is possible to generate such animation in
realtime? Ansver was negative for many years, since Mandelbrot set is
very computational expensive. Thinks are changing. Today's computer
are fast enought to calculate aprox. 1000 pixels per frame. It is enought
for very low resolution animation (30x30). Several programs doing that
are available. But 30x30 animation still looks quite ugly. To make
animation nice you need at least 320x200 pixels. And thats 65 times more!
One possibility is wait until computers will be fast enought, but
it should take many years and then 320x200 animations will be obsolette
and everyone will want 1024x768 resolution instead.

We found special algorithm that saves up to 99.98% of calculations during
zooming by reusing pixels already caluclated in previous frames. There were
some programs doing similiar trick before but we don't know about any able
to do zooming interactivly in same or higher speed than XaoS does. Many
other tricks was later implemented into XaoS to archieve higher framerate.
Now XaoS does up to 120 frames per second at 120Mhz pentium in fullscreen 320x200
animation and calculates at the avearge 160 (0.24%) pixels per frame.
This makes XaoS fast enought to archeieve primary goal---realtime animation,
but there is still many places for improvement, since more complex fractals,
higher resolutions, or slower computers still brings many problems.

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@node What?, , Why?, Overview
@comment  node-name,  next,      previous,  up
@section What does this software do then ?

XaoS is an realtime interactive fractal zoomer. This means that it lets you
zoom smoothly into place you choose without many hours of calculation required
by most of other fractal generators. It now has also many other features,
like 9 different fractal types, autopilot, special coloring modes, support
for various bit depths (8bpp, truecolor, hicolor and realcolor), random
palette generation, color cycling etc...

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@node tutorial, controls, Overview, Top

@chapter XaoS tutorial

This is brief introduction to the basic XaoS features.

@section How to zoom
Main advantage of XaoS is that after few seconds needed to calculate
first image you may choose some point by mouse and press @emph{left} button.
Image will start to zoom smoothly into point you choose. You may move
mouse and zoom smoothly into interesting areas. By pressing @emph{middle
button} (or @emph{left+right}) you may also @emph{move image} using ``drag & drop'' in
case you missed some interesting place. @emph{UN-zooming} is also possible by
@emph{right button}, but it is much slower because optimizations are not so
effective as for zooming.

In case you think that default @emph{speed} is boring (it is quite slow to
make XaoS smooth on slow computer) you may change it by pressing @emph{arrow
up/down}. But understand that faster zooming is more expensive so if
speed is too high you should see just funny colorful blinking
rectangles.

@section Autopilot

To make XaoS yet more impressive we did special autopilot that
automatically drives into interesting boundaries of set. So you should
press @code{A}, play your favorite music, drink coffee and relax. I never
tried this but it should be really relaxing! Many pictures in XaoS
gallery are discovered using autopilot.

Autopilot has also some additional features. It return back in case
zoomed picture is not interesting anymore. Also is able to detect,
when zoomed into really boring part or reached limit of floating point
numbers and restart zooming.

@section Various fractal formulas

XaoS also supports other formulas than Mandelbrot set. You may change
@emph{formula} using @emph{number keys}.



On keys @code{1} to @code{5} are @emph{Mandelbrot sets with various power}. The ``normal''
Mandelbrot set is on key @code{1}.

On key @code{6} is fractal called @emph{octo}. It is some fractal that Thomas
discovered in fractint.

On key @code{7} is fractal called @emph{Newton}. It is famous Newton's formula for finding roots.

On key @code{8} is fractal called @emph{Barnsley}.

On key @code{9} is fractal called @emph{Phoenix}. It is very nice and quite famous fractal.

On key @code{0} is fractal called @emph{Magnet}. This fractal has quite complex formula so it is
bit slow.

@section Out-coloring modes

To make fractal yet more interesting more coloring modes for points
outside set are provided. ``Classical coloring mode'' uses number of
iterations that orbit required to escape boundaries. You might change this
mode from the @emph{Fractal menu} or by pressing key @code{C}
Too see more about coloring modes try tutorial Incoloring modes from XaoS features overview.

Those cryptic names for coloring modes are mathematical formulas where @emph{iter} means number
of iterations, @emph{real} real coordinate of last orbit, @emph{imag} imaginary
coordinate of last orbit.

@section In-coloring mode

Similar to out coloring mode is in coloring. It is only way how to
display thinks inside set. They also can be changed from @emph{fractal
menu} or by pressing @code{F}.

You might also want to see tutorial
Out-coloring modes from XaoS features overview.

@section Planes

All fractals displayed by XaoS are function with complex parameter. It
can be displayed in normal complex plane where x is real part of
number and y is imaginary. But may be also displayed in some other
planes. You might select plane from the @emph{Fractal menu} or by
pressing @code{I}.

planes another cryptic names. And, you guessed, another mathematical
formulas. Here mu means coordinates in normal complex plane. In case
you have coordinates in @code{1/mu} plane and you need complex plane (to
calculate Mandelbrot) you simply use coordinates as variable mu.
Lambda is another plane that can be converted to mu using similar
formula.

@table @strong
@item mu
normal mode..

@item 1/mu
Inversion-infinity is in 0 and 0 is in infinity.

@item 1/(mu+0.25)
Similar to inversion but moves center outside of Mandelbrot so
it looks parabolic

@item lambda
lambda plane

@item 1/lambda
Inversion of lambda plane

@item 1/lambda-1
Inversion with moved center

@item 1/(mu-1.40115)
Very interesting mode for Mandelbrot set. Makes small thinks
big. So you can browse its details.
@end table


@section Mandelbrot/Julia switching

Most of fractals displayed by XaoS (currently all of them) have two
forms: Mandelbrot and Julia. Every point in Mandelbrot form has its
own Julia set. To see more about this correspondence, try tutorial
Julia set from the Introduction to fractals.

In the Mandelbrot mode, you might get corresponding Julia by moving mouse to point you selected
and pressing @code{M}. To return back press @code{M} again. Some fractals
(Barnsley and phoenix) are already in their Julia versions, because
Mandelbrot ones are boring. But by pressing @code{M} in such fractal you
should get to Mandelbrot version and by choosing another point as base
and pressing @code{M} again you should get completely different fractal.
The most interesting points for Julia sets are at boundaries of
Mandelbrot set. Most of Julia inside or outside set are boring.


@section Fast Julia preview mode

Fast Julia mode is solution for
question: What point use as base for Julia set. Just press @code{J} and
small Julia set will be displayed at top left corner. Then move mouse
around with pressed button 1 and Julia to corresponding point will be
automatically generated.

@section Palette

In case you think that default XaoS colors are ugly or you are just
bored by them you may try to change it by pressing @code{P}. XaoS will
generate automatically random palette. Many of them looks ugly so
press @code{P} again to get different one.

@section Filters

Many interesting effect should be done by post calculation filters.
XaoS has filters as emboss, motion-blur etc. To enable them use @code{filter menu}
or press @code{E}.

@section Palette cycling

This is very old trick that makes Mandelbrot set more interesting. You
may enable/disable it using @code{Y}. In the truecolor modes you need
to enable palette emulator filter first. This is done via @code{E} key.
Or from filter menu.

@section Changing number of iterations

To calculate fractals perfectly you need infinite number of
iterations. XaoS does just first few of them so after longer zooming
you may get into place that looks quite boring and boundaries of set
are rounded w/o any interesting details. This should be changed by
changing number of iterations:

Press and hold @code{arrow left} and wait until iterations are high enough.
This may slow down calculation much. To reduce number of iterations
press @code{arrow right}.

@section Changing resolution

XaoS usually starts in low resolution (320x200 or so) to make
calculations faster. In case you have fast computer or you need to
save bigger @code{.gif} images you may change resolution. This should be done
by pressing @code{=} in full screen drivers or simply by resizing XaoS
window.

@section Changing driver

XaoS usually have more than one driver available. You may change it on
the fly in case you want different one. For example XaoS started in X
windows and you want to use AA driver. This can be done from the UI menu.

This action is bit dangerous, because XaoS can crash
during initialization in case of some problem with initialization---XaoS
tries to initialize an new driver, if it fails it attempts to return back
to the original. Sometimes this in impossible.

@section Other features
XaoS has many other features, but they don't fit into this tutorial. Most of
them are available from the menu, so you might experiment with them. You might
also want to see the @emph{animated tutorials} from the @emph{help menu},
to have an idea what XaoS can do.


@c ## chapter tutorial ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node controls, mpeg, tutorial ,Top

@chapter Basic controls
By default mouse buttons works in following way:

@table @strong
@item left
zoom in
@item right
zoom out
@item middle
move fractal using drag&drop style way
@end table

This behavior should change. If you enable rotation, first button is used for rotating
fractals. Also in fast Julia mode first button is used to change seed.

If you don't have middle button, press both buttons to enable
emulation.

After few minutes of zooming you will probably reach end of precisity and
fractals will get boring. If you are getting strange big rectangles at screen,
you probably reached limit of numbers and there is no way to avoid this except
UN-zoom back and choose different area. It don't hurt so much, since you have
zoomed approximately.. 64 051 194 700 380 384, so there is quite a lot of areas to
explore. Algorithms with unlimited precisity exists, but they are still too
slow for real-time zooming.

In the other case you have reached an limit of iterations. The fractal is
calculated just approximately and in this case you need to increase number of
iterations (and decrease speed). This is done from menu or using arrow keys
@emph{Left} and @emph{Right}.

An @emph{Up} and @emph{Down} keys should be used to change zooming
speed. Note that higher speed costs more and image will be blocky.

Also this behavior changes. With palette cycling enabled, @emph{Left}
and @emph{Right} keys changes cycling speed, in continuous
rotation they changes speed of rotation.

All other functions are available from the menus, which (in the default
configuration) are displayed when you move mouse to the top of screen/window.
It is useful to learn an keys, which are displayed in gray color.


@c ## chapter controls ##


@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node mpeg, format, controls ,Top


@chapter How to encode MPEG files from XaoS

To save sequence, make @code{xaf} file first. (the easiest way to do this is
to use @emph{record} function in file menu) Then you need to render sequence.
XaoS can output sequences of ordinary @code{PNG} images, that should be later
used by MPEG encoder.

@section Generating sequence for MPEG

To encode sequence use command as follows:


@example
xaos -render [filename] -size 352x240 -antialiasing
-renderframerate 24 -basename [basename]
@end example


@code{[filename]} is name of @code{xaf} file, @code{[basename]} is name used as base for images.
XaoS add four digit number and extension automatically.

You might also want to change the resolution. 352x240 is the default size
for MPEG files, but other sizes works as well. Each dimension must be multiple
of 16.

Framerate should be also altered. MPEG supports just few selected framerates
(namely 23.976, 24, 25, 29.97, 30) so you might pick any of them.

@code{-antialiasing} is used to produce anti-aliased images. It takes much longer
time and much more memory to calculate them, but resulting images are better
for MPEG DCT compression and they are @emph{compressed about 3 times more}.
(same is true about @emph{JPEG images})

At the other hand, the other XaoS rendering option @code{-alwaysrecalc} (which disables
XaoS's zooming optimizations) is @emph{not recommended}. Sequence of animation contains
then quite a lot of extra information, which increases size of MPEG file, but because
of MPEG's lossy compression it is hard to see difference. So it don't worth
it.
@section Rendered files
Once you start it, XaoS will generate thousands of frames. They takes quite
long time to calculate and save, and consumes plenty of disc space.
(to render part 1 of tutorial you need about 60MB and half a hour of time).

All images are named @code{[basename]framenum.png}. For example @code{intro0001.png} is
first frame of animation intro. In case consetuctive frames are same, XaoS
don't save them. So some frames are missing. If your encoder can't handle
this, you will need to write simple script, which will do symbolic links.

List of all filenames is saved into file @code{[basename].par}, where each line is
name for the frame. The names repeats here if necessary, so you should use this
file to supply filenames to the encoder.

@section Pattern file

Some other files are generated as well. There is generated an @emph{pattern file},
which contains @emph{recommended order of P, B and I frames}.

MPEG sequence consist of this three frames. The @emph{I frames} are just images
saved in format similar to JPEG files.

The @emph{P frames} are images, which are
constructed from previous one (latest I or P frame). In case consetuctive
frames are similar (and in the animation they often are), the P frame takes
much less disc space than I frame.

The @emph{B frames} are constructed from nearest previous P or I frame and next P or
I frame. They takes even less disc space, but they are quite hard to encode.
Also they are @emph{not used as previous frames}, so their information is lost
once they are displayed. So they are usually rendered at lower quality then
P or I frame and used just to interpolate nearest frame and make animation
smoother. It is generally not good idea to make whole sequence just form B
frames.

Also using just P frames is generally not good idea. It makes file shorter,
but to jump into Nth frame of animation you need to @emph{recalculate all P and B frames
since latest I frame}. Decoders often wants to jump into some frame (when
user wants, or in case they can't decode sequence in time), so you need
to have some I frames in the animation to make this possible. Mainly
because of the second purpose you need to place them quite often. Usually
they are used for every 15th frame or so. Because they costs quite a lot,
in my animations I usually use every 27th frame. To set this distance
use @code{-iframedist} option. It should be multiple of 3

XaoS generates recommended order of this frame based on the knowledge of
fractal motion. Situations where screen don't move at all are rendered
just from P frames (since jumping is usually not required here), situations
where screen changes completely (at least in XaoS's opinion) I frames are used
and in other standard sequence @code{IBBPBBPBBPBBP...} is used.

If your encoder supports this, you should supply this pattern for encoding to
squeeze out some bytes..

@section Motion vector files

XaoS also generates motion vector recommendation for the encoder. They are
useful for encoding of B and P frames.

In case some objects just moves at screen, motion vectors shows at their old
position, so no image needs to be saved.

Calculating of this motion vector is very significant task. In case you guess
them well, you increase quality and reduce file size, which is always great.
Calculation also takes lots of CPU and it is hard to get optimal vectors (it
just takes too long time).

XaoS know how does the fractals move, so he can calculate this vectors quite
easily. XaoS saves this information into @code{*.p} and @code{*.b} files. (@code{*.p} are for P
frames, @code{*.b} are for B frames). If your encoder supports this, you should
supply this vectors to increase quality. They are @code{not exact} (XaoS can do many
mistakes), but encoder should try to find his own vectors, try XaoS's ones and
pick the better one.

This technique saves quite a lot of bytes in fast zooming/UN-zooming
animations.. (where images moves more than 3 or 5 pixels per frame---since
most programs looks 10-20 pixels around for motion vectors)

To enable saving of motion vector files, add option
@code{-rendervectors}.

@section Berkeley parallel MPEG encoder

This is the encoder I use. It seems to be the best freely available software
encoder I've tested. It can generate quite small files, but it is rather slow.
It is available at Berkeley's FTP site @code{mm-ftp.CS.Berkeley.EDU} and called
@code{mpeg_encode1.5b}

It has lots of options to tune, so you should spend quite a lot of time with
playing with this. The configuration I use is in file @code{doc/mpeg.param}.

I've also done some patches that makes possible to use the pattern and motion
files generated from XaoS. The patch is in @code{doc/mpeg_encode.patch}. So if
you want to use this features (they are @emph{EXPERIMENTAL}) you might apply this
patch and recompile encoder.

Once you filled the @code{mpeg.param} file (see comments inside), you should render
sequence using @code{mpeg_encode [filename]} and with luck you are done.





@c ## chapter mpeg ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node format, writehelp,mpeg ,Top
@chapter XaoS' file format
This section describes format used by XaoS for animations, configuration
files and saved positions. All these files have common format, designed
to be easily readable, to allow manual editing of files and converting them
into another program.

I also taken a care to make it easily extensible for future versions of XaoS
so I hope there will not be many incompatibilities between various XaoS's
versions.

File is simple set of commands executed sequentially. XaoS does not provide
any variables/cycles as usual scripting languages but possible future
extension to scheme should be easy since format uses scheme-like syntax.
Syntax of every command is:

@code{(command_name }@emph{[param1] [param2]}@code{)}

Where parameters are optional and separated by whitespace (arbitrary number
of spaces, tabs and enters). Parameters should have following types:

@table @strong
@item integer
number w/o decimal point (@code{123})
@item float
floating point number in decimal notation with optional exponent (@code{1.23E2})
@item keyword
text started by apostroph @code{'}. It is used to pass various string constants
like formula name (@code{'mandel}) Apostrophe is required for scheme compatibility
@item string
Text inside double quotes. The only parameter that should contain whitespace
@item boolean
@code{#t} for true or @code{#f} for false
@end table

Complete description of all XaoS functions (with some examples) contains index of functions in the XaoS registry. @xref{menus}.
You might take special care to animation functions. @xref{animf}. Also the following functions are significant:

@table @strong
@item load

This function loads and interprets file. It works in similiar way as include
in C.
@item initstate

This function reset XaoS state to default values from version 3.0. This
command should be at the beginning of each animation file, since otherwise
some stuff previously enabled by user should make unexpected effects.
State is not reseted by default before playing animation since it should
make impossible to write macros. Current version IMO don't need them, but
in future versions, where scheme programming language will be available this
should be much more interesting subject.
@item usleep

This function waits selected amount of time(in usec) until next commands
are processed. Screen is recalculated and displayed at the beginning of
usleep when necessary. Remaining
time is spent by waiting or performing animation you entered by animation
commands.
@item wait

Waits until screen is animated (fractal is in calculation or some filters---like motion-blur does some animation. Do not call this function when zoom,
or continuous rotation is active otherwise deadlock happens. It is
recommended to call it, before text subtitles are displayed, since it looks
ugly when they are displayed over blocky unfinished fractal. It may look
well for you but ugly for others. Also you should call it after animation is
performed and before switch to another fractal happens, since switch to
fractal involves calculation, screen is stopped for a while and unfinished
fractal there looks ugly. You should also call it, when you want to do
something as soon as possible.
@end table

Example:


@example
;configure everything for the first frame
(inistate)
(palette 1 1163254293 0) ;custom palette
(cycling #t) ;enable cycling
(cyclingspeed 7)
(maxiter 276) ;higher number o fiterations
(range 3) ;default range for solid guessing
(usleep 1000000) ;second frame start here
(moveview -1.8101154154614007889 -8.2687205907162041209E-05)
;just move the image
(usleep 1000000) ;thirt frame
(morphview -1.8101154154614007889 -8.2687205907162041209E-05
6.277210971069452361E-10 6.2772109785334669875E-10)
;10 seconds of zooming into selected
rectangle
(usleep 100000000)
@end example


Best way to learn XaoS command language is probably to read position files
and modify them. For example to create zooming animation from the original
file:


@example
(initstate)
(defaultpalette 0)
(formula 'mandel)
(view -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
@end example


Just change @code{view} command to @code{morphview} command and add @code{usleep}:



@example
(initstate)
(defaultpalette 0)
(formula 'mandel)
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
(usleep 10000000)
@end example


Following code produces Julia morphing in the real axis:


@example
(initstate)
(fastjulia #t)
(juliaseed -2 0)
(morphjulia 2 0)
(usleep 2000000)
@end example



And following is the ``rotozooming'' animation:



@example
(initstate)
(fastrotate #t)
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
(morphangle 300)
(usleep 10000000)
(wait)
(fastrotate #f)
@end example



@chapter XaoS gallery

I plan to make XaoS gallery of animations and position files at XaoS home-page
so please send me all your nice animations and images you created using XaoS
to @code{hubicka@@paru.cas.cz}
@c ## chapter format ##
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node writehelp, xshl,format ,Top
@chapter How to write XaoS help files
XaoS help lies in the file @code{help/xaos.hlp}. It is divided into parts,
where each is started by the @emph{keyword} - word using it you activate
it. In the help file keywords are wrote using @code{%keyword}

If you are writing documentation about some command in XaoS function registry,
use same keyword, as the name of function in order to get context sensitive
help work.






@c ## chapter writehelp ##
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node xshl, drivers,writehelp ,Top
@section xshl
@emph{Xshl} stands for @emph{XaoS simple hypertext language}. It
uses similar tags to HTML. It is simpler and more restrictive in order to
make it easy to parse using various scripts. In C code you might use quite
universal library present in @code{src/util/xshl.c} to parse it.

Following tags are supported:

@table @strong
@item head
make headings (should be at least at the begging of the page)
@item emph
emphatize
@item tt
Use non proportional font
@item br
Break line
@item p
Next paragraph
@item dl
Definition list
@item dt
Definition tag (should be used only inside definition list)
@item dd
Definition description (should be used only inside definition list)
@item center
align to center
@item right
align to right
@item red
change color to red (should not be used in help files)
@item black
change color to black (should not be used in help files)
@item white
change color to white (should not be used in help files)
@item a name
link to other help page
@item tutor name
activate tutorial
@item notex
Ignore this in texinfo manuals
@end table

@c ## section xshl ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node drivers, menus,xshl ,Top

@chapter driver specific documentation
XaoS is portable and works at different platforms. Since not all platforms are
exactly the same, there is some differences. Here is documentation about each
this specific port.



@c ## chapter drivers ##

@menu
* aa::			AA-lib---high quality ascii art driver
* dos::			DOS driver
* dX-fullscreen::	directX fullscreen driver
* dX-window::		directX windowed driver
* ggi::			GGI driver
* plan9::		plan9 driver
* SVGAlib::		SVGAlib driver
* win32::		Win32 driver
* X11:: 		X11 driver
@end menu

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node aa, dos , ,drivers

@section AA-lib driver

AA driver is currently the most advanced and portable driver for XaoS.
It is based at AAlib---an high quality ASCII-art library developed by AA-project.
(see @code{http://www.ta.jcu.cz/aa})

It is fully featured XaoS driver for text mode displays. It supports 256 colors
and mouse where possible.

It also has some extended features available from the UI menu:

@table @strong
@item Attributes
AA-lib may use character attributes to reach fine qualitty of image.
By default it uses normal, dim and bold characters where possible.
But you should also enable different ones like reversed or bold font
characters. You may also enable usage of non ansii/reversed characters if
your device supports it.
@item Font
AA-lib uses bitmap image of font to prepare approximation table used for ASCII art rendering.
This bitmap is expected to be same as one used by your device. AAlib performs
detection where possible however some devices (like UNIX text terminals or
MDA) does not support this. AAlib has few font images compiled in, so in
this cases you should try to use one of them to achieve best results.
@item Inversion
Some devices uses inversed video use this to get correct results at such devices.
@item Dithering mode
Dithering is an way to get more exact color in approximation by combining
more characters. But this method should bring ugly looking noise at certain images.
Use this menu to disable or tune it.
@item Palette options
By default AA driver uses XaoS palette to render images, but it quite often looks ugly
at text displays. Here you can choose special text palette instead. Note that with
filters enabled results should be rather ugly. This function is available from
the @emph{palette menu}.
@item Save text screen
Normal save function will generate normal PNG image instead of nice
ASCII-art. To save ASCII art use this function instead. It supports many
text file formats like HTML, ANSI, more, etc... It will also ask you for
font and attributes(see above). It is available from the @emph{file
menu}
@end table

AA-lib driver also provides the full set of standard AA-lib's command line options. You may use them to tune parameters like gamma correction etc. See @code{xaos -help} or AA-lib documentation for
details.

An AA driver was done by Jan Hubicka, 1997.

@c ## section aa ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node dos, dX-fullscreen , aa ,drivers

@section DOS driver
This is fully featured driver for DJGPP and allegro.
It supports many VGA modes, VESA 1.0---3.0, VBE/AF, S3 and some other cards.

Following problems may occour:

@table @strong
@item Some DPMI servers may cause problems
Some DPMI servers like one from Novell/Dr/Open DOS are buggy. Use clean DOS
instead and XaoS will automatically start @code{cwsdpmi}.
Under Open Dr DOS use @code{dpmi off} at command line to disable it.
@item Higher resolutions don't work
If your videocard has enough memory for selected resolution,
you most probably have an unsupported videocard.
Please use some VESA BIOS extension on this videocards. Please see note
about VESA at the end of this section.
@item XaoS needs coprocessor
I don't distribute coprocessor library linked into XaoS because it is too slow for
real-time zoomer. Coprocessor emulation will not help, because xaos works in protected mode.
@item XaoS needs mouse driver to be usable
@item XaoS works slowly in higher resolution
This should be also caused by slow Allegro's driver or VESA BIOS of your
videocard. You might try some other VESA BIOS extension.
Look for at the @code{http://www.talula.demon.co.uk} for FreeBE
project or Scitech Display Doctor package.
Please see note about VESA at the end of this section.
@end table
@subsection VESA
VESA is an standard for using higher resolutions in DOS. Many videocards has VESA in
the BIOS so you don't need any additional software, while other needs special
program providing this. Also some VESA BIOS implementations are buggy or
suboptimal, there is 3 different versions, while the version 1.0 is many times
slower than 2.0, which has support for protected mode and linear framebuffer.
So if you have problems with higher resolutions, or some graphics modes are
not available (like 320x200 truecolor), you might try some software package
emulating VESA.

Most famous VESA emulating program is Scitech display doctor. It has support
for many videocards and is quite reliable. It's disadvantage is, that it is
shareware and works just 30 days. You might also try an
@code{ftp.simtel.net} that contains many VESA emulation packages such as
@code{s3vbe} or the new FreeBe project at
@code{http://www.talula.demon.co.uk}

DOS driver was done by Jan Hubicka, 1997.

@c ## section dos ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node dX-fullscreen, dX-window , dos ,drivers

@section directX fullscreen driver
This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API and kludges in DirectX
it should be rather unstable. Please report all bugs and in case
of problems you might use DOS version of XaoS instead.

This driver allows the Windows port of XaoS run in the full screen mode.
Driver support 256, 65536 and 16777216 color modes (24bpp and 32bpp)
in all resolutions supported by directX.
You might change graphics mode by pressing @code{=} key
(or using UI/Resize menu). In case selected mode is not supported,
driver will restore previous settings.

Use @code{-mode WIDTHxHEIGHTxDEPTH} (like @code{-mode 640x480x16})
command line option to change graphics mode.

If you want to start XaoS in directX, use @code{-driver dX-fullscreen} option.

See Win32 driver documentation for some more Windows
releated information.

DirectX driver was done by Jan Hubicka, Jan Olderdissen
and Pavel Tzekov, 1999.

@c ## section dX-fullscreen ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node dX-window, ggi , dX-fullscreen ,drivers
@c ## section DX-window ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node ggi, plan9, dX-window ,drivers

@section GGI driver

GGI stands for General Graphics Interface. Part of this project is to develop
libggi---an portable graphics library and XaoS's GGI driver use it.
It is experimental, since API of libggi is not stabilized yet.
There are some problems with keyboard handling---shift key don't work
yet.

All other stuff might work well, but no guarantees. It is alpha quality
software.

GGI driver was done by Jan Hubicka, 1998.
@c ## section ggi ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node plan9, SVGAlib, ggi ,drivers

@section Plan9 driver

Plan9 is very nice small operating system by Bell labs (authors of UNIX). It
is very incompatible with other operating systems. Even the C compiler and
header files are different, but XaoS should work there well (even at the
limited free demo installation without any POSIX compatibility stuff)

There is few limitations: File selector and image saving don't work. You might
save an position files and then later render them at the other OS, or save
screenshots.

Plan9 terminals also don't provide any way to catch an arrow keys, so you
can't use them. Use mouse to navigate in the menus. Also getting of screen
resolution is impossible, so use @code{-pixelwidth} and @code{-pixelheight}
instead of @code{-screenwidth} and @code{-screenheight}.

By default XaoS changes colormap. This will collide with other colorful
programs like Mortha. You might disable this behavior using
@code{-nopalette} switch. Disadvantage of this solution is, that it is
slower.

Plan9 driver was done by Jan Hubicka, 1997.
@c ## section plan9 ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node SVGAlib, win32, plan9 ,drivers

@section SVGAlib driver

This is driver for Linux SVGAlib. I really like this driver, because
I much prefer full screen zooming instead of small 320x320 window in X11.
It was one of first drivers for XaoS and is fully featured.
The following problems can occur:

@table @strong
@item XaoS don't initialize graphics mode
when started under other user than root SVGAlib requires root privileges
to directly access hardware. When you really want to start XaoS as
normal user enable sticky bit (@code{chmod +s}) at XaoS executable
note that I take care to disable all security holes caused by this
bit so I believe it is safe.
@item Mouse doesn't work
@item Screen is blank in higher resolution
Both this problems are probably caused by wrong configuration of
SVGAlib. Please configure it in @code{etc/vga/libvga.cong} or
@code{/usr/local/lib/libvga.conf}
Also GPM can cause problems. Try to kill it before starting XaoS
@item When I switch console I can't switch back
This is another typical SVGAlib bug Try to hold @code{F} key longer than @code{alt}.
It helps on my computer. On older SVGAlib there was famous ``enter bug'' that caused
crash after pressing enter. Try to update to newer release.
@end table

SVGAlib driver was done by Jan Hubicka, 1997.

@c ## section SVGAlib ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node win32, X11, SVGAlib ,drivers

@section Win32 driver

This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API it should be rather unstable.
Please report all bugs. In case of problems you might use DOS version
of XaoS instead.

Driver should work in all bit depths, but 16 color mode is not natively
supported by XaoS engine. XaoS internally works in 32k colors and
result is converted to 16 colors by Windows. Because Windows
conversion routines are slow and ugly, result is slow and ugly.
Please configure your display to another bit depth to ``solve''
this problem.

Use @code{-size WIDTHxHEIGHT} command line option to change default
window size.

This driver also have maps to native Windows look and fell. There is small
problem with combo boxes in dialogs. They are expected to give you choice
between few strings. The keyboard controls (changing choice by arrow keys)
works, but mouse selection is broken. If you know how to solve this bug,
please let me know.

XaoS is UNIX application and have many command line options.
Some features are not available from the GUI.
Because Windows applications can't have normal output,
most of critical messages are displayed in message boxes, but
some longer messages are ommited. Most significant is help about command
line options that you can find in the @code{doc/cmdopts.txt}.
Quite confusing should be fact, that animation rendering mode don't
display anything, only renders the images. Just start the rendering
and message box will inform you that XaoS is entering calculation
loop. Relax and wait for message box signaling end of the loop.

Note that XaoS also supports directX API.

Win32 driver was done by Jan Hubicka, Jan Olderdissen and Pavel Tzekov, 1999.
@c ## section win32 ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node X11, , win32 ,drivers

@section X11 driver
This was the first driver done for XaoS. It supports many visuals, shared
colormaps and MitSHM extension.

Bugs/limitations:

@table @strong
@item XaoS makes some X servers too busy
Sometimes XaoS generates images faster, than X can display them.
In this case XaoS badly respond to mouse and other applications stops
This happens especially at old R4 servers. Use @code{-sync} to avoid this
problem. Note that @code{-sync} do @code{not} enable an synchronous mode in communication
just makes one additional XSync call. So slowdown is not so high as you might expect.
@item Does not work at all visuals
This driver supports only 8bpp pseudocolor/grayscales, 15,16,24 and 32bpp truecolor, 1bpp and 8bpp staticolor visuals.
@item Palette rotating does not work for 8bpp pseudocolor w/o private palette
@end table

X11 driver was done by Jan Hubicka and Thomas Marsh, 1997.

@c ## section X11 ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node menus, authors,  drivers,Top

@appendix Menus, functions and command line parameters
All XaoS functions are in central function registry. The scripting language,
menus, dialogs and command line options are built from this database. This
section contains information about all functions available in this registry.
@menu 
* root::	Root menu
* animroot::	Animation root menu
* plc::	Replay only commands

* linemenu::	Line drawing functions
* animf::	Animation functions
* time::	Timing functions
* file::	File
* fractal::	Fractal
* calc::	Calculation
* mfilter::	Filters
* ui::	UI
* misc::	Misc
* helpmenu::	Help
* file::	File
* helpmenu::	Help
* xtextpos::	Horizontal text position
* ytextpos::	Vertical text position
* mformula::	formulae
* palettemenu::	Palette
@end menu 
@node root,  animroot,  ,  menus



@node animroot,  plc,  root,  menus



@appendixsec Animation root menu
This menu is displayed at the top of screen when animation replay is active.
@menu 
* file::	File
* stopreplay::	Stop replay
* helpmenu::	Help
* ui::	UI
@end menu 
@node stopreplay,  ,  ,  animroot


@appendixsubsec Stop replay
Terminate animation replay.

@emph{Available as}: menu item



@node plc,  linemenu,  animroot,  menus


@appendixsec Replay only commands
Some commands, such as timing primitives or animation functions are available
just in animation files.
@menu 
* linemenu::	Line drawing functions
* animf::	Animation functions
* time::	Timing functions
* load::	Include file
@end menu 
@node load,  ,  ,  plc




@appendixsubsec Include file
@defun load file 
@end defun

This function lets you include another file into your script. It works in
similar way as @code{#include} in C source or @code{load} in scheme.
File is searched in the same directory as current source is.

@emph{Available as}: command

@node linemenu,  animf,  plc,  menus



@appendixsec Line drawing functions
XaoS has support for drawing lines. This functions are available only in
animations and should be used to show some parts of fractals or draw simple
diagrams. See tutorial ``Introduction to fractals'' for
example of this feature.

Lines should be drawn in @emph{screen} coordinates, where 0,0
is top left corner and 1,1 is bottom right, @emph{scaled} coordinates,
which are similar just scaled to keep 0,0---1,1 rectangular or
@emph{Fractal} coordinates should be used to draw line at exact
position of screen.

Color of line should be specified by command @code{color}. @xref{color}.
You might draw arbitrary number of lines and later morph them. Each line has
its own key, which is number used to identify it. You might set key using
command @code{linekey}.
Next lines have consetuctive numbers. Commands for changing line then operates
at line with current key.

For example:


@example
(color 'red)
(line 'scaled 0.3 0.5 0.7 0.5)
(line 'scaled 0.3 0.5 0.7 0.5)
(line 'scaled 0.3 0.5 0.3 0.5)
(line 'scaled 0.7 0.5 0.7 0.5)
(linekey 0)
(morphline 'scaled 0.3 0.3 0.7 0.3)
(morphline 'scaled 0.3 0.7 0.7 0.7)
(morphline 'scaled 0.3 0.3 0.3 0.7)
(morphline 'scaled 0.7 0.3 0.7 0.7)
(usleep 1000000)
@end example


Creates line morphing to rectangle




@defun line keyword complex complex 
@end defun

Draw line between two points.
@code{keyword} specifies type of coordinates and should be one of the
following: @code{`fractal}, @code{`screen} or @code{`scaled}.
Function also increase the line key.

@emph{Available as}: command





@defun morphline keyword complex complex 
@end defun

Morph current line to given coordinates.
@code{keyword} specifies type of coordinates and should be one of the
following: @code{`fractal}, @code{`screen} or @code{`scaled}.
Line will start moving at the next timing command. @xref{time}. and reach the
final position before end of it.
Function also increase the line key.

@emph{Available as}: command





@defun morphlastline keyword complex complex 
@end defun

This function has same functionality as morphline, but it don't
increase the line key and touches line with previous key. This is useful when
you want to move just drawn line---you don't need to set linekey back.

@emph{Available as}: command



@defun linekey integer 
@end defun

Set current line key.

@emph{Available as}: command



@defun clearline 
@end defun

Clear current line. This function also increase the line key.

@emph{Available as}: command

@defun clearlines 
@end defun

Clear all displayed line. Lines should be also cleared using
@code{clearscreen} or @code{display} commands available from Misc menu. @xref{misc}.

@emph{Available as}: command

@node animf,  time,  linemenu,  menus



@appendixsec Animation functions
This functions are used to animate fractal state---zoom, UN-zoom and morph
various parameters. They should be used only in the animation files.
Animations are usually performed for whole time selected by the next timing function. @xref{time}.
For example:


@example
(view 0 0 1 1)
(morphview 0 0 2 2)
(usleep 5000000)
@end example


Will do 5 seconds long UN-zooming animation.
@menu 
* animateview::	Animate view
* morphview::	Morph view
* morphjulia::	Morph julia
* moveview::	Move view
* morphangle::	Morph angle
* zoom::	Zooming functions
@end menu 
@node animateview,  morphview,  ,  animf


@appendixsubsec Animate view
@defun animateview float float float float 
@end defun

This function is almost equivalent to function @code{view}. @xref{uiview}.
It expect that view will be changed just slightly so recalculation is done with
@code{ANIMATE} priority. This means that dynamic resolution is used by
default.

View-port is selected by the center and two radiuses (real and imaginary). See
@code{view} for more information.

@emph{Available as}: command

@node morphview,  morphjulia,  animateview,  animf


@appendixsubsec Morph view
@defun morphview float float float float 
@end defun
For whole time selected by next @code{usleep} or other timing function viewpoint is smoothly morphed from
current one to one selected by @code{morphview}.

View-port is selected by the center and two radiuses (real and imaginary). See
for more information

This function should be easily used for creating the zooming/UN-zooming animations using position files.
This is example position file generated by XaoS:


@example
(initstate)
(defaultpalette 0)
(formula 'mandel)
(view -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
@end example


Just by exchanging @code{view} command by @code{morphview} command and
adding @code{usleep} you might create zooming animation:


@example
(initstate)
(defaultpalette 0)
(formula 'mandel)
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
(usleep 10000000)
@end example




@emph{Available as}: command

@node morphjulia,  moveview,  morphview,  animf


@appendixsubsec Morph julia
@defun morphjulia complex 
@end defun
For whole time selected by next @code{usleep} or other timing function julia seed
is smoothly interpolated between current one to one selected by @code{morphjulia}. By default this will
cause recalculation of the whole screen.
To avoid this use fast julia mode. @xref{fastjulia}.

Simple animation morphing julia seed in the X axis:


@example
(initstate)
(fastjulia #t)
(juliaseed -2 0)
(morphjulia 2 0)
(usleep 2000000)
@end example



@emph{Available as}: command

@node moveview,  morphangle,  morphjulia,  animf


@appendixsubsec Move view
@defun moveview complex 
@end defun
Smoothly move center to image to another position.

@emph{Available as}: command

@node morphangle,  zoom,  moveview,  animf


@appendixsubsec Morph angle
@defun morphangle float 
@end defun
Smoothly rotate to image to another angle. By default rotation causes
recalculation of the whole screen. To avoid this you need to enable
fast rotate mode. @xref{rotate}. Don't forget to disable it later, since
it slow down other animations.


Simple ``rotozooming'' animation:


@example
(initstate)
(fastrotate #t)
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
9.69332308834E-08)
(morphangle 300)
(usleep 10000000)
(wait)
(fastrotate #f)
@end example


@emph{Available as}: command

@node zoom,  ,  morphangle,  animf


@appendixsubsec Zooming functions

Functions for zooming/UN-zooming was created mainly for recording the
animation. In manually created animation files it is easier to use
@code{morphview}. @xref{morphview}.

@defun zoomcenter complex 
@end defun
This function set center to zoom in. Center is given as position in fractal
coordinates.

@emph{Available as}: command
@defun zoom 
@end defun
Start zooming to area specified by @code{zoomcenter}. Work is the
same way as first button.

Speed of zooming should be controlled by function @code{speed} or in more
exact way by @code{maxstep} and @code{speedup}.

@defun unzoom 
@end defun

Start un-zooming from area specified by @code{zoomcenter}. Work is the
same way as third button.

@emph{Available as}: command
@defun stop 
@end defun
Stop zooming or UN-zooming.

@emph{Available as}: command

@node time,  file,  animf,  menus



@appendixsec Timing functions
Timing functions are used to control animation replay daemon. It might wait
for given time or wait until calculation is complete. The animation functions
are controlled by this. Animations are performed for whole selected time.
@menu 
* usleep::	Usleep
* textsleep::	Wait for text
* wait::	Wait for complete image
@end menu 
@node usleep,  textsleep,  ,  time


@appendixsubsec Usleep
@defun usleep integer 
@end defun

This function waits selected amount of time(in usec) until next commands
are processed. Screen is recalculated and displayed at the beginning of
usleep when necessary. Remaining
time is spent by waiting or performing animation.

@emph{Available as}: command

@node textsleep,  wait,  usleep,  time


@appendixsubsec Wait for text
@defun textsleep 
@end defun


Behavior is very similar to @code{usleep}, but the time is
calculated from number of letters currently displayed at screen. So if you
want wait just for time user needs to read subtitle, use this function. User
can then alter replay speed for its own needs using
@code{letterspersec}. @xref{letterspersec}. This value should be changed during
replay by arrow keys.

@emph{Available as}: command

@node wait,  ,  textsleep,  time


@appendixsubsec Wait for complete image
@defun wait 
@end defun

Wait until image is complete. You might use this function always after
zooming or UN-zooming when dynamic resolution should be used. This ensures that
image calculation will be complete and user will see the result before
animation continues. Also should be useful in combination with filters like
motion blur, since it will wait while animation is
performed.

This function can not be used with animation functions,
otherwise deadlock will happened.

@emph{Available as}: command

@node file,  fractal,  time,  menus



@appendixsec File
@menu 
* loadpos::	Load
* savepos::	Save
* record::	Record
* play::	Replay
* saveimg::	Save image
* loadexample::	Load random example
* savecfg::	Save configuration
* quit::	Quit
@end menu 
@node loadpos,  savepos,  ,  file


@appendixsubsec Load XaoS position file

Load XaoS position file (@code{*.xpf}).
See format description for more information.

@emph{Available as}: menu item, command line option

@node savepos,  record,  loadpos,  file


@appendixsubsec Save XaoS position file
@defun savepos file 
@end defun

Save current state to XaoS position file (@code{*.xpf}). This file is in
human readable format and should be later easily improved by hand or used as
base for animation.
See format description for more information.

@emph{Available as}: menu item, command line option, command

@node record,  play,  savepos,  file


@appendixsubsec Record animation
@defun record bool [ file ] 
@end defun

Start recording to XaoS animation file (@code{*.xaf}). This file is in
human readable format and should be later easily edited.
See format description for more information.
To stop animation recording select this function in the menu again, or use
command @code{(record #f)}

@emph{Available as}: menu item, command line option, command

@node play,  saveimg,  record,  file


@appendixsubsec Replay animation

Replay XaoS animation file (@code{.xaf}).

@emph{Available as}: menu item, command line option

@node saveimg,  loadexample,  play,  file


@appendixsubsec Save image
@defun saveimg file 
@end defun

Save current state to image file. This file is in @code{.png} (portable
network graphics) format, which should be later read by many applications
like graphics editors, internet browsers etc.

For this function an external library called @code{pnglib} is required. In
cases where this library wasn't available during compilation, this function
don't work. Please see @code{INSTALL} for more information about obtaining
png library and recompiling XaoS.

@emph{Available as}: menu item, command line option, command

@node loadexample,  savecfg,  saveimg,  file


@appendixsubsec Load random example
@defun loadexample 
@end defun

Choose random @code{.xpf} file from the @code{examples} directory and
load it.
You might use it as the starting point for next exploration.

@emph{Available as}: menu item, command line option, command

@node savecfg,  quit,  loadexample,  file


@appendixsubsec Save configuration
@defun savecfg 
@end defun

Save current configuration. Configuration is saved into special file (at UNIX
@code{~/.xaosrc}, @code{xaos.cfg} under DOS), which is automatically loaded
at startup. So next time you run XaoS you will get the same configuration.

@emph{Available as}: menu item, command line option, command

@node quit,  ,  savecfg, file


@appendixsubsec Quit
@defun quit 
@end defun

Quit XaoS.

@emph{Available as}: menu item, command line option, command

@node fractal,  calc,  file,  menus


@appendixsec Fractal
This menu contains all function, which lets you specify fractal parameters like
formulas, coloring modes, seeds and much more.

@menu 
* formula::	Formula
* mformula::	formulae
* incoloring::	Incoloring mode
* outcoloring::	Outcoloring mode
* plane::	Plane
* palettemenu::	Palette
* uimandelbrot::	Mandelbrot mode
* uiperturbation::	Perturbation
* uiview::	View
* initstate::	Reset to defaults
* tcolor::	True-color coloring modes
@end menu 
@node formula,  uimandelbrot,  ,  fractal


@appendixsubsec Formula
@defun formula keyword 
@end defun

Set the current fractal formula. Keyword should be one of the following
formulas:
@table @strong
@item 'mandel
Standard Mandelbrot set. @xref{mandel}.
@item 'mandel3
Mandelbrot set power 3. @xref{mandel3}.
@item 'mandel4
Mandelbrot set power 4.
@item 'mandel5
Mandelbrot set power 5.
@item 'mandel6
Mandelbrot set power 6.
@item 'newton
Newton approximation method. @xref{newton}.
@item 'barnsley
First barnsley's formula. @xref{barnsley}.
@item 'octo
Fractint's octo. @xref{octal}.
@item 'phoenix
Phoenix. @xref{phoenix}.
@item 'magnet
Magnet. @xref{magnet}.
@end table

@emph{Available as}: command

@node uimandelbrot,  uiperturbation,  formula,  fractal


@appendixsubsec Mandelbrot/Julia mode

Fractal should be in Mandelbrot or Julia mode. Each point in the
Mandelbrot set has it's own Julia set. To learn more about this correspondence
see tutorial ``Julia set''.

This function should be used to switch between this modes. In case
you are enabling Julia mode, you need to set seed---point selected from the
Mandelbrot set.

In case you are enabling function from menu, you are prompted for this number.
Often it is useful to use some point at screen. You might do that by pressing
@code{M} key. Then you are not asked for seed and current position of mouse
is used instead.

Good seedpoints lies at the boundaries of the set. Other seeds generates
usually quite boring fractal. You might also explore various seeds using
Fast julia mode. @xref{fastjulia}.

Note that not all fractals has Julias. But XaoS can generate an fake Julia
sets, which uses some modification of the formula in the other cases, so this
function is currently usable for all fractal types.

@emph{Available as}: menu item
@defun julia bool 
@end defun

This function is used to enable/disable julia mode in the animation files.

@emph{Available as}: command line option, command
@defun juliaseed complex 
@end defun

Select current julia seed.

@emph{Available as}: command line option, command

@node uiperturbation,  uiview,  uimandelbrot,  fractal


@appendixsubsec Perturbation

Perturbation is simple trick, where some other starting point of orbit is
used. Traditionally zero is used, but other values should generate interesting
results too.

When enabling this function from the menu, you will be asked for complex
number specifying the perturbation. When you select it again, perturbation will
be disabled and you will not be prompted.

It is often useful to specify complex
number representing some point at the screen. This should be achieved by
placing mouse cursor there and pressing @code{B}. Another pressing
@code{B} will disable perturbation (set perturbation value to zero).

Function has effect just for some formulas (like the Mandelbrot set) in
the Mandelbrot mode. @xref{uimandelbrot}.

@emph{Available as}: menu item
@defun perturbation complex 
@end defun

This is an perturbation function with better
interface to scripting language. It don't have the enable/disable feature, but
lets you always specify the numbers. Use 0 0 to disable perturbation.

@emph{Available as}: command line option, command

@node uiview,  initstate,  uiperturbation,  fractal


@appendixsubsec View

Set current viewpoint in the fractal. This function is useful when you have
found some interesting coordinates somewhere (at the WWW page or so) and you
want to see it in XaoS.

In the dialog you will be asked for @emph{center}, @emph{radius}
and @emph{angle} of image.

Center specifies point, which will be displayed in the center of screen. Radius
is radius of circle around this center. XaoS will choose smallest possible
area, which fits to screen and contains whole this circle. Angle is rotation of
the image in degrees.

Many different formats for specifying area are used. Some people use
coordinates of left top and bottom down visible point instead. Then they
specify coordinates as four numbers @math{x1}, @math{y1}, @math{x2}, @math{y2}. To set same
viewpoint in XaoS, calculate @math{(x1+x2)/2} and set it as real part of
center. Imaginary part of center is @math{(y1+y2)/2}. Radius is larger of
@math{x2-x1} and @math{y2-y1}.

Other programs uses zoom factor instead of radius. Then you might set radius to @math{2/zoom}.

@emph{Available as}: menu item
@defun view float float float float 
@end defun

This function is used to set visible area of fractal from the animation
files. It don't let you specify the angle, which can be controlled by separate function
@code{angle}, but lets you specify ellipse instead of circle. You might
specify both real and imaginary radius, so you have better control of area
that will be visible. XaoS will choose smallest possible area containing this
ellipse, which is not shrinked.

@emph{Available as}: command line option, command
@defun angle float 
@end defun

Set rotation angle in degrees. By default this causes recalculation of screen.
You might enable fast rotation mode. @xref{rotate}. This will let you
rotate screen without recalculation, but will slow down other thinks, so don't
forget to disable it later.

@emph{Available as}: command line option, command


@node initstate,  plane,  uiview,  fractal


@appendixsubsec Reset to defaults
@defun initstate 
@end defun

This function resets most of XaoS values to the defaults. It is useful in
cases you are lost and you want to start from the beginning. Also it should be
used as the first command of every animation file to ensure that it will be
played always in the same environment.

@emph{Available as}: menu item, command line option, command


@node plane,  incoloring,  initstate,  fractal


@appendixsubsec Plane
@defun plane integer 
@end defun

All fractals displayed by XaoS are
function with complex parameter.
It can be displayed in normal complex
plane where x is real part of number
and y is imaginary. But may be also
displayed in some more funny modes:
@table @strong
@item @math{mu}
normal complex plane
@item @math{1/mu}
Inversion-infinity is in 0 and
0 is in infinity.
@item @math{1/(mu+0.25)}
Similar to inversion but moves
center outside of Mandelbrot
so it looks parabolic
@item @math{lambda plane}, @math{1/lambda}, @math{1/lambda-1}
Lambda planes and its inversions with different center.
@item @math{1/(mu-1.40115)}
Very interesting mode for
Mandelbrot set. Makes small
thinks big. So you can
browse its details.
@end table
You might also try tutorial about planes to see some examples.



In the scripting language, planes are numbered as follows:

@table @strong
@item 0
@math{mu}
@item 1
@math{1/mu}
@item 2
@math{1/(mu+0.25)}
@item 3
@math{lambda}
@item 4
@math{1/lambda}
@item 5
@math{1/(lambda-1)}
@item 6
@math{1/(mu-1.40115)}
@end table

@emph{Available as}: command line option, command

@node incoloring,  outcoloring,  plane,  fractal


@appendixsubsec Inside coloring mode
@defun incoloring integer 
@end defun

Areas inside the set are usually filled by the black color. Alternatively you
might use different ways in order to make fractal more interesting. Value of
the latest orbit should be used to specify color. It is the only method to
make visible areas inside the set. You might also try tutorial

XaoS has many different
modes for doing this. The cryptic names of modes are mathematical formulas,
where @emph{real} means real part of the latest orbit, @emph{imag}
imaginary part. @emph{zmag} takes magnitude of the latest value. The
@emph{Decomposition-like} method uses angle of the orbit. Also truecolor
incoloring modes are available.

In the scripting language, incoloring mode is specified by the integer value with
following meaning:

@table @strong
@item 0
@math{0}
@item 1
@math{zmag}
@item 2
Decomposition-like
@item 3
@math{real/imag}
@item 4
@math{abs(abs(c)-abs(r))}
@item 5
@math{cos(mag)}
@item 6
@math{mag*cos(real^2)}
@item 7
@math{sin(real^2-imag^2)}
@item 8
@math{atan(real*imag*creal*cimag)}
@item 9
squares
@item 10
Truecolor. To set exact parameters for truecolor coloring use @code{tcolor}. @xref{tcolor}.
@end table

@emph{Available as}: command line option, command

@node outcoloring,  tcolor,  incoloring,  fractal


@appendixsubsec Outside coloring mode
@defun outcoloring integer 
@end defun

Concept of outcoloring modes is similar to inside coloring mode but for areas outside set. The value of latest orbit is used to calculate color of pixel. This should make image
more interesting. You might try tutorial ``Outcoloring modes''
to see some examples.

The cryptic names of modes are mathematical formulas,
where @emph{real} means real part of the latest orbit, @emph{imag}
imaginary part. @emph{binary decomposition} uses different color in
case imaginary part of orbit is lower than zero, @emph{smooth} attempts
to remove the stripes. Also truecolor coloring modes are available.

In the scripting language, incoloring mode is specified by the integer value with following meaning:

@table @strong
@item 0
@math{iter}
@item 1
@math{iter+real}
@item 2
@math{iter+imag}
@item 3
@math{iter+real/imag}
@item 4
@math{iter+real+imag+real/imag}
@item 5
binary decomposition
@item 6
biomorphs
@item 7
potential
@item 8
color decomposition
@item 9
smooth
@item 10
True-color outcoloring mode. To set exact parameters for truecolor coloring use @code{outtcoloring}. @xref{tcolor}.
@end table

@emph{Available as}: command line option, command

@node tcolor,  ,  outcoloring,  fractal


@appendixsubsec Truecolor coloring mode
@defun intcoloring integer 
@end defun
@defun outtcoloring integer 
@end defun

Truecolor coloring modes are similar to incolor and <a
outcoloring>outcolor</a> coloring modes. The difference is, that they don't
use palette, but calculates directly three components---red, green and blue.
This lets you to display more information about fractal and produces quite
interesting results. At 8bpp displays you need to enable <a palettef>palette
emulator filter</a> first to see anything. You might try tutorial
``Truecolor coloring modes'' to see some examples.

The cryptic names of formulas are always three mathematical formulas (each for
every color component),
where @emph{real} means real part of the latest orbit, @emph{imag}
imaginary part.

To enable inside/outside truecolor coloring mode in scripting language, set
@code{incoloring}/@code{outcoloring} value to 10 (truecolor coloring
mode).

Number select formula as follows:

@table @strong
@item 0
black
@item 1
@math{re*im} @math{sin(re^2)} angle
@item 2
@math{sin(re)} @math{sin(im)} @math{sin(square)}
@item 3
hsv
@item 4
hsv2
@item 5
@math{cos(re^c)} @math{cos(im^2)} @math{cos(square)}
@item 6
@math{abs(re^2)} @math{abs(im^2)} @math{abs(square)}
@item 7
@math{re*im} @math{re*re} @math{im*im}
@item 8
@math{abs(im*cim)} @math{abs(re*cre)} @math{abs(re*cim)}
@item 9
@math{abs(re*im-csqr)} @math{abs(re^2-csqr)} @math{abs(im^2-csqr)}
@end table

@emph{Available as}: command line option, command



@node calc,  mfilter,  fractal,  menus



@appendixsec Calculation
This menus contains functions to control calculation parameters such as
maximal number of iteration or periodicity checking.
@menu 
* range::	Solid guessing
* dynamic::	Dynamic resolution
* periodicity::	Periodicity checking
* maxiter::	Iterations
* fastjulia::	Fast julia mode
* dynamic::	Dynamic resolution
* rotate::	Rotation
@end menu 
@node range,  periodicity,  ,  calc


@appendixsubsec Solid guessing range
@defun range integer 
@end defun

XaoS performs an solid guessing optimization: in case that all corners of
rectangle has same color it expect that whole rectangle is solid and don't
calculate points inside set. This optimization saves lots of calculation, but
sometimes introduces errors. This value alters size of maximal rectangle,
which can be guessed. Default value is 4, use 0 to disable this feature.

@emph{Available as}: command line option, command

@node periodicity,  maxiter,  range,  calc


@appendixsubsec Periodicity checking
@defun periodicity bool 
@end defun

Periodicity checking is one of way to speed up calculation. Areas inside set
needs @code{maxiter} iterations to calculate, that point is
most probably inside set. One of tricks to avoid this calculation is
periodicity checking. Often the trajectory of orbit gets into cycle, which you
might detect and stop calculation, since it is sure, that orbit will never
leave it.

Implementation of this method is quite problematic. It slows down in cases,
where cycles are not found and also checking of cycle is quite hard work.
Because of inexact calculations, cycle is never exact, so you need to use some
error value. Higher error value means, that cycle will be detected sooner,
whole lower error value means more exact calculation. Higher values introduces
serious mistakes especially at the front of the Mandelbrot set. XaoS detects
this value automatically and it is correct for the most cases, but sometimes
it might be wrong. Also other optimizations in XaoS (such as boundary trace)
don't give much chance to this method, since areas inside set are usually not
calculated.

Thats why advantages of this method are disputable. You might experiment with
enabling/disabling it. Sometimes it is faster when enabled, sometimes when
disabled. Also this method works only in the case incoloring methods are
disabled and just at certain fractal types.

You might try tutorial ``Escape time fractals'' for
more information about calculation of fractal.

@emph{Available as}: menu item, command line option, command

@node maxiter,  fastjulia,  periodicity,  calc


@appendixsubsec Iterations
@defun maxiter integer 
@end defun

When fractal set is calculated, an trajectory of orbit is examined for each
point. In case orbit leaves to infinity, point is outside set. Otherwise orbit
is inside set. For exact calculation you need to know whole trajectory of
orbit, which has infinite number of positions for areas inside set. So fractal
can not be calculated exactly. By default XaoS calculates maximally 170
positions (iterations) and then gives up and in case, point is still inside
the bail-out, it guesses, that point is inside set.

When zoomed into detail area, this value should become low and fractal will
be boring. You might try to increase this value (and decrease speed of
calculation) if you want to get image interesting again.

You might try tutorial ``Escape time fractals'' for
more information about calculation of fractal.

@emph{Available as}: menu item, command line option, command

@node fastjulia,  dynamic,  maxiter,  calc


@appendixsubsec Fast julia mode
@defun fastjulia bool 
@end defun

By default, changing of seed for the julia set requires recalculation of the
image (which is quite slow). It is nice effect to change seed smoothly and make
morphing animations. XaoS has special algorithm, which can calculate such
morphings at real-time. It is very inexact, but it is good for first preview.

If you want to select good seedpoint, enable fast julia mode and find some
nice place by dragging first mouse button.
Then change to the julia mode to get exact image.

@emph{Available as}: menu item, command line option, command

@node dynamic,  rotate,  fastjulia,  calc



@appendixsec Dynamic resolution
@defun fastmode keyword 
@end defun

XaoS performs many optimizations, but quite often it is not enough. In order
to keep high framerate, XaoS automatically lowers the resolution and increases
it back in case he has some free time. This feature is by default enabled in
animation, but you might also enable it for the new images (then it creates
nice effects when image is recalculated) or disable is completely if you
don't like it.

Keyword should be one of the following:
@table @strong
@item @code{'never}
Disable dynamic resolution
@item @code{'animate}
Use only for animations (default)
@item @code{'new}
Use also for new images
@end table
@node rotate,  ,  dynamic,  calc



@appendixsec Image rotation

XaoS has also support for image rotation. The image should be rotated to
arbitrary angle. By default changing of angle requires recalculation of the
whole screen, but when @emph{fast rotation mode} is enabled, angle
should be changed smoothly. In this mode XaoS calculates larger non-rotated
image and rotates it later, so it increases memory requirements and slows
down, so it should be disabled, when rotation is not used.

User interface should be set to two rotation modes---@emph{rotate by
mouse} when you should by dragging first mouse button change angle,
or @emph{continuous rotation mode}, where image is rotated continuously.
You might use arrow keys to change speed.
@defun fastrotate bool 
@end defun

This function should be used to enable and disable fast rotation mode
@emph{Available as}: command line option, command
@appendixsubsec Automatic rotation
@defun autorotate bool 
@end defun

Use this function to enable continuous rotation. In the scripting language you
might use also function @code{morphangle} to get similar
effect.
@defun rotationspeed float 
@end defun

Specify continuous rotation speed. Speed is set in the angle per seconds value.
Negative values are allowed and means opposite direction

@emph{Available as}: menu item, command line option, command



@node mfilter,  ui,  calc,  menus



@appendixsec Filters
Filters are post-calculation effect applied to the resulting image. They
should perform effects like motion-blur, emulation of different videomode and
such. You might try also an tutorial about filters.

@menu 
* filter::	Filter command
* edge::	Edge detection
* edge2::	Edge detection2
* starfield::	Starfield
* stereogram::	Random dot stereogram
* interlace::	Interlace filter
* blur::	Motionblur
* emboss::	Emboss
* palettef::	Palette emulator
* anti::	Antialiasing
* truecolor::	Truecolor emulator
@end menu 
@node filter,  edge,  ,  mfilter


@appendixsubsec Filter command
@defun filter keyword bool 
@end defun

This command should be used to enable/disable various filters. @xref{mfilter}.
@emph{Keyword} specifies filter and should be one of the following:

@table @strong
@item @code{'edge}
Edge detection
@item @code{'edge2}
Edge detection2
@item @code{'starfield}
Starfield
@item @code{'stereogram}
Random dot stereogram
@item @code{'interlace}
Interlace filter
@item @code{'blur}
Motionblur
@item @code{'emboss}
Emboss
@item @code{'palette}
Palette emulator
@item @code{'anti}
Antialiasing
@item @code{'truecolor}
Truecolor
@end table

@emph{Available as}: command
@node edge,  edge2,  filter,  mfilter


@appendixsubsec Edge detection

This filter performs standard edge detection algorithm. Solid areas are
filed in black color. This produces very interesting results at some fractals.
This version of filter produces relatively wide lines, so it is useful
especially in the higher resolution. The filter edge detection2
makes lines better for the low resolution modes.

@emph{Available as}: menu item, command line option

@node edge2,  starfield,  edge,  mfilter


@appendixsubsec Edge detection2

This filter performs standard edge detection algorithm. Solid areas are
filed in black color. This produces very interesting results at some fractals.
This version of filter produces relatively tight lines, so it is useful
especially in the lower resolution. The filter edge detection2
makes lines better for the high resolution modes.

@emph{Available as}: menu item, command line option

@node starfield,  stereogram,  edge2,  mfilter


@appendixsubsec Starfield

Starfields filter generates random stars depends at the number of iterations
required to calculate of points. Choose your favorite spiral fractal and
enable this filter to get galaxy.

@emph{Available as}: menu item, command line option

@node stereogram,  interlace,  starfield,  mfilter


@appendixsubsec Random dot stereogram

Fractal images are also good as base for random dot stereogram. In
case you don't know what this mean, please point your browser to
altavista or other searching engine and find some article about this
images, because browsing such images is not easy. They makes possible
to generate three dimensional images at normal monitor without any
additional hardware.

XaoS is also able to generate this images in animation so you may use
all normal XaoS functions except palette changing/rotation, because this
is unnecessary. To make animation yet more exciting XaoS emulates
``falling'' into the set. So during zooming distance from set is getting
lower and lower. But never lets you fall down so when set reaches level
of your monitor distance is changed again and you are far away.

To make this in real sizes xaos needs to know @emph{exact sizes of your
monitor}. Because most platforms does not know this values you need to
use @emph{command line options} to tune this. Otherwise you should have
problems with seeing anything in images generated by XaoS (in case
your monitor is too big or resolution low). Or images are not as deep
as normaly (in case your monitor small or resolution high).

By default xaos expect my 15" monitor (29.0cm x 21.5 cm). Another
problem is virtual screen supported by some windowed environments(like
X11) that makes program think that resolution is higher and you see
just part of this screen. This cause problem with recalculation screen
size to pixel size.

The worst think you should do at all is to run full-screen XaoS in some
graphical window(windows 95 or OS/2 ?) where XaoS don't know that real
size of his window is different.

Following command line options are provided for this.

@table @strong
@item @code{-screenwidth}, @code{-screenheight}
lets you specify size of your screen in centimeters. Note that
you need to specify size of image at you monitor. Not size with
some borders or such.

@item @code{-pixelwidth}, @code{-pixelheight}
lets you specify exact size of one pixel in cases I described
bellow.
@end table

This options are used by some other parts of XaoS too. So you should
use them even you don't want to see stereograms. You should write
small starting script that passes correct parameters.

Another problem should happen when @emph{window is smaller than 8cm}. In
this case you will be unable to see anything.

So correct way to see XaoS stereogram is:
@table @strong
@item 1
start XaoS with options specifying correct size of screen or pixel
@item 2
Sit 60cm away from monitor
@item 3
In case you use windowed environment resize XaoS window to make it wider than, say, 15 cm.
@item 4
Enable filter (by pressing @code{E})
@item 5
concentrate far away from monitor (you should try to use your
reflection) until random points will get into different
distances and you will see Mandelbrot
@item 6
Carefully use you mouse to zoom into interesting areas
(it is easy to lose concentration when you are not trained. Or use autopilot.
@item 7
Enjoy animation :)
@end table

Last problem should be that fractal is deformed. This can be caused by
wrong geometry of your monitor. Eye is extremely sensible for distances
so should see very small changes in geometry that are normally
invisible.


@emph{Available as}: menu item, command line option

@node interlace,  blur,  stereogram,  mfilter


@appendixsubsec Interlace filter

Interlace filter reduces horizontal resolution and in each frame draws just
even or odd lines. This speeds up calculation and in higher resolutions
produces motion-blur like effect.

@emph{Available as}: menu item, command line option

@node blur,  emboss,  interlace,  mfilter


@appendixsubsec Motionblur

Motion blur mixes current frame with previous ones in order to produce
motion-blur effect. It might be quite slow in 16bpp truecolor modes. Best
results produces probably in 8bpp modes, so you might try to enable palette filter first

@emph{Available as}: menu item, command line option

@node emboss,  palettef,  blur,  mfilter


@appendixsubsec Emboss

This is an standard emboss filter well known from programs such as GIMP or
Photoshop. It produces nice results especially with smooth incoloring mode. @xref{incoloring}.

@emph{Available as}: menu item, command line option

@node palettef,  anti,  emboss,  mfilter


@appendixsubsec Palette emulator

XaoS should work in palette or truecolor mode. Both modes have its advantages
and disadvantages. Palette mode allows effect such as palette rotation and
truecolor mode allows smoother incoloring
and outcoloring modes and
truecolor coloring mode. @xref{tcolor}. If your display is truecolor, you
might enable this filter to get palette emulation.

@emph{Available as}: menu item, command line option

@node anti,  truecolor,  palettef,  mfilter


@appendixsubsec Antialiasing

Antialiasing is one of techniques how to increase image quality. XaoS then
calculates four values for each pixel and uses average of them. This makes
boundaries look better.

This filter slows down a much and highly increases memory requirements. But it
is useful, when you want to save better images. Antialiasing helps a much
when you want to encode JPEG or MPEG files. They are much shorter then.

@emph{Available as}: menu item, command line option

@node truecolor,  ,  anti,  mfilter


@appendixsubsec Truecolor emulator

XaoS should work in palette or truecolor mode. Both modes have its advantages
and disadvantages. Palette mode allows effect such as palette rotation and
truecolor mode allows smoother incoloring
and outcoloring modes and
truecolor coloring mode. @xref{tcolor}. If your display is 8bpp, you
might enable this filter to get truecolor emulation.

More information about filters

@emph{Available as}: menu item, command line option

@node ui,  misc,  mfilter,  menus



@appendixsec UI

This menus contains functions to control user interface layer of XaoS such as
zooming speed and such.

@menu 
* speed::	Zooming speed
* letterspersec::	Letters per second
* autopilot::	Autopilot
* recalculate::	Recalculate
* interrupt::	Interrupt
* nogui::	Disable XaoS's builtin GUI
* status::	Status
* ministatus::	Ministatus
@end menu 
@node speed,  letterspersec,  ,  ui


@appendixsubsec Zooming speed
@defun speed float 
@end defun

Change zooming speed. 1 means default speed, 2 means twice as fast.

@emph{Available as}: menu item, command line option, command

In the scripting language you might use following functions for better control
of speed.
@defun maxstep float 
@end defun

Selects speed of zooming/UN-zooming. Step specifies how large
amount of range will be taken away each 1/20 of second.
(0 means nothing, 1 means everything---this value is incorrect)
Higher values means faster zooming.

@emph{Available as}: command
@defun speedup float 
@end defun
When zooming/UN-zooming every 1/20 of second the @code{speedup} value is added
to current step until @code{maxstep} is reached. So this value selects
speedup/slowdown of animation. Both this functions are more for internal
use of XaoS then for manually wrote scripts.

@emph{Available as}: command

@node letterspersec,  autopilot,  speed,  ui


@appendixsubsec Letters per second
@defun letterspersec integer 
@end defun

Speed of subtitles for function @code{textsleep}. @xref{textsleep}. User can
set this value to fit his own needs. It should be changed also by arrow keys
during animation replay.

@emph{Available as}: command line option, command

@node autopilot,  recalculate,  letterspersec,  ui


@appendixsubsec Autopilot
@defun autopilot bool 
@end defun

To make XaoS yet more impressive we did special autopilot that
automatically drives into interesting boundaries of set. So you should
press @code{A}, play your favorite music, drink coffee and relax. I never
tried this but it should be really relaxing! Many pictures in XaoS
gallery are discovered using autopilot.

Autopilot has also some additional features. It return back in case
zoomed picture is not interesting anymore. Also is able to detect,
when zoomed into really boring part or reached limit of floating point
numbers and restart zooming.

@emph{Available as}: menu item, command line option, command

@node recalculate,  interrupt,  autopilot,  ui


@appendixsubsec Recalculate
@defun recalculate 
@end defun

Recalculate current fractal. This should be used when fractal at screen is
strange because of error propagation caused by solid guessing. @xref{range}.

@emph{Available as}: menu item, command line option, command

@node interrupt,  nogui,  recalculate,  ui


@appendixsubsec Interrupt
@defun interrupt 
@end defun

Interrupt current calculation.

@emph{Available as}: menu item, command line option, command


@node nogui,  status,  interrupt,  ui


@appendixsubsec Disable XaoS's builtin GUI
@defun nogui bool 
@end defun

Disable XaoS menus and dialogs. This function should be used by external GUI
programs, that changes parameters from pipe. See hacker's manual
(@code{xaosdev.texinfo}) for more details.

@emph{Available as}: menu item, command line option, command

@node status,  ministatus,  nogui,  ui


@appendixsubsec Status
@defun status bool 
@end defun

Enable/disable status information. Status displays some useful information
about current fractal, such as viewpoint etc.

@emph{Available as}: menu item, command line option, command

@node ministatus,  ,  status,  ui


@appendixsubsec Ministatus
@defun ministatus bool 
@end defun

Enable/disable status line. This status contains basic information such as how
much you are zoomed or framerate.

@emph{Available as}: menu item, command line option, command

@node misc,  helpmenu,  ui,  menus



@appendixsec Misc
Miscelanely functions.
@menu 
* command::	Command
* renderanim::	Render animation
* clearscreen::	Clear screen
* display::	Display fractal
* text::	Display text
* color::	Color
* xtextpos::	Horizontal text position
* ytextpos::	Vertical text position
* textposition::	Text position
* message::	Message
@end menu 
@node command,  renderanim,  ,  misc


@appendixsubsec Command

You might invoke all XaoS functions also using command. This
command has same syntax as in XaoS animation files

@emph{Available as}: menu item

@node renderanim,  clearscreen,  command,  misc


@appendixsubsec Render animation

Render animation to image files. See How to encode MPEG file for
description of the options.

@emph{Available as}: menu item,
@node clearscreen,  display,  renderanim,  misc


@appendixsubsec Clear screen
@defun clearscreen 
@end defun

Clear screen. To display fractal again, use @code{display}. @xref{display}.
This function is useful mainly for tutorials and similar animations.

@emph{Available as}: menu item, command

@node display,  text,  clearscreen,  misc


@appendixsubsec Display fractal
@defun display 
@end defun

Display fractal. This functions disables effect of @code{clearscreen}, line
drawing and text output functions.

@emph{Available as}: menu item, command

@node text,  color,  display,  misc


@appendixsubsec Display text
@defun text string 
@end defun

Display given text at screen. This function is useful mainly for tutorials.
Text should be cleared by printing space,
@code{clearscreen}, or
@code{display}
function. You might also use @code{textposition} command
to select text position.

To wait time user needs to read text, you might use function
@code{textsleep}. @xref{textsleep}.

Example:


@example
(clearscreen)
(textposition 'center 'middle)
(text "Welcome into my animation")
(textsleep)
(display)
@end example


@emph{Available as}: menu item, command line option, command

@node color,  textposition,  text,  misc


@appendixsubsec Color
@defun color keyword 
@end defun

Change color of texts and lines. @emph{Keyword} should be one of the
following: @code{'white}, @code{'black} and @code{'red}.

@emph{Available as}: menu item, command line option, command

@node textposition,  message,  color,  misc


@appendixsubsec Text position
@defun textposition keyword keyword 
@end defun

Select position for text. @xref{text}. First keyword specifies horizontal
position and second vertical. Horizontal position should be one of the
following: @code{'left}, @code{'center}, @code{'right}. Vertical one
of following: @code{'top}, @code{'middle}, @code{'bottom}.

@emph{Available as}: command line option, command

@node message,  ,  textposition,  misc


@appendixsubsec Message
@defun message string 
@end defun

This function is almost identical to function @code{text}. @xref{text}. It
uses message catalogs in the @code{catalog} directory to translate message.
It should be used only in the multi-lingual XaoS tutorials.

@emph{Available as}: command line option, command

@node helpmenu,  xtextpos,  misc,  menus



@appendixsec Help
This menu contains help and tutorials.

@node xtextpos,  ytextpos,  helpmenu,  menus



@appendixsec Horizontal text position
Select horizontal position for text. @xref{text}. It should be drawn at the
left, in center or at right.

@node ytextpos,  mformula,  xtextpos,  menus



@appendixsec Vertical text position
Select vertical position for text. @xref{text}. It should be drawn at the
top, middle or bottom of screen.

@node mformula,  palettemenu,  ytextpos,  menus



@appendixsec formulae

Each escape time fractal has it's own formula. XaoS supports following
formulas:

@menu 
* mandel::	Mandelbrot
* mandel3::	Mandelbrot^3
* octal::	Octal
* newton::	Newton
* barnsley::	Barnsley1
* phoenix::	Phoenix
* magnet::	Magnet
@end menu 
@node mandel,  mandel3,  ,  mformula


@appendixsubsec Mandelbrot

Mandelbrot set is the most famous escape time fractal ever. It has simple
formula @math{z=z^2+c}. You might also try tutorial ``the Mandelbrot set''.

@emph{Available as}: menu item, command line option

@node mandel3,  octal,  mandel,  mformula


@appendixsubsec Mandelbrot^3---Mandelbrot^6

This fractal uses simple modification of the standard
Mandelbrot set' formula. It uses @math{z=z^3+c} instead of
@math{z=z^2+c}.

Other derivations of the Mandelbrot set (Mandelbrot^4
etc.) uses even higher powers. You might also try tutorial
``higher power Mandelbrot sets''.

@emph{Available as}: menu item, command line option
@node octal,  newton,  mandel3,  mformula


@appendixsubsec Octal

This is less known fractal, that Thomas discovered in Fractint. It has quite
interesting shape mainly when displayed in the alternative <a
mplane>planes</a>. You might try tutorial ``Octo''.

@emph{Available as}: menu item, command line option

@node newton,  barnsley,  octal,  mformula


@appendixsubsec Newton

This is an Newton's approximation method for finding roots of polynomial. It
uses polynomial @math{x^3=1} and counts number of iterations needed to
reach approximate value of the root. More information are in tutorial ``Newton''.

This fractal don't have Julia sets, but XaoS is able to generate Julia-like
sets, which are also very interesting (sometimes also called ``Nova
formulae'').

@emph{Available as}: menu item, command line option

@node barnsley,  phoenix,  newton,  mformula


@appendixsubsec Barnsley1

This is formula by Michael Barnsley. It produces very nice crystalline Julia
sets. You might also try tutorial ``Barnsley's formula''.

@emph{Available as}: menu item, command line option

@node phoenix,  magnet,  barnsley,  mformula


@appendixsubsec Phoenix

This is formula produces very nice Julia sets.
You might also try tutorial ``Phoenix''.

@emph{Available as}: menu item, command line option

@node magnet,  ,  phoenix,  mformula


@appendixsubsec Magnet

This is formula that comes from the theoretical physics.
It is derived from the study
of theoretical lattices in the
context of magnetic renormalization
transformations.
You might also try tutorial ``Magnet''.

@emph{Available as}: menu item, command line option

@node palettemenu,  ,  mformula,  menus



@appendixsec Palette
Functions to change fractal's palette.
@menu 
* defpalette::	Default palette
* randompalette::	Random palette
* palette::	Custom palette
* cycling::	Color cycling
* shiftpalette::	Shift palette
@end menu 
@node defpalette,  randompalette,  ,  palettemenu


@appendixsubsec Default palette
@defun defaultpalette number 
@end defun

Create an default palette. In the scripting language number specifies how much
is palette shifted.

Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable palette emulation filter first.

@emph{Available as}: menu item, command line option, command

@node randompalette,  palette,  defpalette,  palettemenu


@appendixsubsec Random palette
@defun randompalette 
@end defun

Create an random palette. XaoS will automatically pick one of his algorithms
for generating palettes and create one.

Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable palette emulation filter first.

@emph{Available as}: menu item, command line option, command

@node palette,  cycling,  randompalette,  palettemenu


@appendixsubsec Custom palette
@defun palette integer integer integer 
@end defun

Custom palette lets you re-create some of the random palettes. First value
specifies algorithm which should be currently one of the following:
@table @strong
@item 0
Default palette
@item 1
Black to color grades
@item 2
Black to color to white grades
@item 3
Cubistic-like algorithm.
@end table
Seed specifies an random seed for palette. Different seeds generates different
palettes. Last value is amount how much palette is shifted.

Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable palette emulation filter first.

@emph{Available as}: menu item, command line option, command

@node cycling,  shiftpalette,  palette,  palettemenu


@appendixsubsec Color cycling
@defun cycling bool 
@end defun

Color cycling is old and simple effect to animate fractals. It makes nice
effect mainly at the standard Mandelbrot set. At truecolor displays, color
cycling fails to initialize (since they don't have palette). You might enable
palette emulation filter to make it possible.

@emph{Available as}: menu item, command line option, command

In the user interface, colors should be also cycled in the opposite direction
by function ``@emph{Reversed color cycling}''.

To control cycling speed, you might use arrow keys or following function
``@emph{Color cycling speed}''.

@emph{Available as}: menu item
@defun cyclingspeed integer 
@end defun

Integer value specifies skips per second. It should be also negative to select
cycling in the opposite direction.

@emph{Available as}: menu item, command line option, command

@node shiftpalette,  ,  cycling,  palettemenu


@appendixsubsec Shift palette
@defun shiftpalette integer 
@end defun

Shift palette by specified color cells. This should be used to tune palette
position at fractal. Also functions @emph{Shift one forward} and
@emph{Shift one backward} should be used for finetunning.
Note that shifted and rotated palettes should look in the different way at
different displays (because of different maximal palette size).

Shifting of palette at truecolor displays causes recalculation of screen. To
avoid this, you might use palette emulation filter. @xref{palettef}.

@emph{Available as}: menu item, command line option, command


@c ## menus controls ##
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@comment  node-name,  next,      previous,  up
@node authors, lists,menus ,Top

@appendix Credits
(alphabetically)
@table @strong
@item Eric Courteau (ecourteau@@cplus.fr)
Francais.cat (translation of tutorials)
@item Radek Doulik (rodo@@atrey.karlin.mff.cuni.cz)
GTK interface, windowid patches
@item Tim Goodwin (tgoodwin@@cygnus.co.uk)
english.cat corrections
@item Jan Hubicka (hubicka@@paru.cas.cz)
Zooming routines, ugly interface, palettes,drivers, autopilot, filters, documentation, tutorials, maitainer etc...
@item Jens Kilian (jjk@@acm.org)
BeOS driver, deutsch.cat
@item Thomas A. K. Kjaer(takjaer@@imv.aau.dk)
OS/2 ports (320x200 graphics and AA-lib)
@item Thomas Marsh
First zoomer, formulas, planes, X11 driver, inversions, many ideas
@item  David Meleedy
Grammatical and spelling fixed version of @code{xaos.6}
@item Terje Pedersen (terjepe@@login.eunet.no)
Amiga port
@item Fabrice Premel (premelfa@@etu.utc.fr)
Periodicity checking
@item Jan Olderdissen (jan@@olderdissen.com)
Win32 port
@item Pavel Tzekov (paveltz@@csoft.bg)
Win32 support
@item Charles Vidal
Tcl/Tk interface
@item Tapio K. Vocaldo(taps@@rmx.com)
Macintosh port
@end table

To contact authors you might also use the mailing list. @xref{lists}.
Or following snail-mail:


@example
Jan Hubicka
Dukelskych bojovniku 1944
Tabor 390 03
Czech Republic
@end example


@c ## appendix authors ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node lists, index ,authors ,Top

@appendix Mailing-lists:
XaoS now have following mailing lists at
majordomo@@horac.ta.jcu.cz
@table @strong
@item xaos
this list is for general xaos discusion
(ideas, questions, bugreports..)
@item xaos-announce
keeps you informed about new versions
@item xaos-devel
you want to become XaoS developer? Subscribe here and
let us know about you! You will be welcomed.
@end table

To subscribe send following message to
@code{majordomo@@horac.ta.jcu.cz}:

@code{subscribe [list_name]}



@c ## appendix lists ##

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@comment  node-name,  next,      previous,  up
@node index,  ,lists ,Top
@unnumbered Index of functions

@printindex fn


@contents
@bye
