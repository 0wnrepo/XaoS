This is Info file xaos.info, produced by Makeinfo version 1.68 from the
input file xaos.texinfo.

INFO-DIR-SECTION Graphics
START-INFO-DIR-ENTRY
* XaoS: (xaos).               The fast realtime interactive fractal zoomer
END-INFO-DIR-ENTRY

   (C) 1997 Jan Hubicka

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: xaos.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

XaoS 3.1
********

                                 An realtime interactive fractal zoomer
                                                          User's manual
                                                           May 14, 1998

   This manual contains user documentation about XaoS--an fast realtime
zoomer.  XaoS uses open development model, so sources are freely
available. File `xaosdev.texinfo' in the source documentation contains
hacker's manual.  (design overview, algorithm description etc.)

* Menu:

* Overview::		What does this software do then ?
* tutorial::		XaoS tutorial
* controls::		Basic controls
* mpeg::		How to encode MPEG files
* format::		XaoS's file format description
* writehelp::		How to write XaoS help files
* xshl::		XaoS simaple hypertext language
* drivers::		Driver specific documentation
* menus::		Functions, menu items and command line parameters
* authors::		Credits
* lists::		Mailing lists
* index::		Function index


File: xaos.info,  Node: Overview,  Next: tutorial,  Prev: Top,  Up: Top

Overview
********

* Menu:

* Why?::		Why yet another fractal generator?
* What?::		What does this software do then?


File: xaos.info,  Node: Why?,  Next: What?,  Prev: Overview,  Up: Overview

Why yet another fractal generator?
==================================

   We decided to make XaoS, because all fractal browsers we know needs
long time to calculate every image. You may browse nice images
generated by them but real impression from fractal--they self
similarity and possible infinite zooming into nice part of fractals can
be seen only in animation. There are many programs available that makes
nice animations but they takes long time to calculate and lots of space
on disc. Most of animations are quite ugly because their authors can't
see it without many hours of calculations.

   Natural question is: it is possible to generate such animation in
realtime? Ansver was negative for many years, since Mandelbrot set is
very computational expensive. Thinks are changing. Today's computer are
fast enought to calculate aprox. 1000 pixels per frame. It is enought
for very low resolution animation (30x30). Several programs doing that
are available. But 30x30 animation still looks quite ugly. To make
animation nice you need at least 320x200 pixels. And thats 65 times
more!  One possibility is wait until computers will be fast enought, but
it should take many years and then 320x200 animations will be obsolette
and everyone will want 1024x768 resolution instead.

   We found special algorithm that saves up to 99.98% of calculations
during zooming by reusing pixels already caluclated in previous frames.
There were some programs doing similiar trick before but we don't know
about any able to do zooming interactivly in same or higher speed than
XaoS does. Many other tricks was later implemented into XaoS to
archieve higher framerate.  Now XaoS does up to 120 frames per second
at 120Mhz pentium in fullscreen 320x200 animation and calculates at the
avearge 160 (0.24%) pixels per frame.  This makes XaoS fast enought to
archeieve primary goal--realtime animation, but there is still many
places for improvement, since more complex fractals, higher
resolutions, or slower computers still brings many problems.


File: xaos.info,  Node: What?,  Prev: Why?,  Up: Overview

What does this software do then ?
=================================

   XaoS is an realtime interactive fractal zoomer. This means that it
lets you zoom smoothly into place you choose without many hours of
calculation required by most of other fractal generators. It now has
also many other features, like 9 different fractal types, autopilot,
special coloring modes, support for various bit depths (8bpp,
truecolor, hicolor and realcolor), random palette generation, color
cycling etc...


File: xaos.info,  Node: tutorial,  Next: controls,  Prev: Overview,  Up: Top

XaoS tutorial
*************

   This is brief introduction to the basic XaoS features.

How to zoom
===========

   Main advantage of XaoS is that after few seconds needed to calculate
first image you may choose some point by mouse and press *left* button.
Image will start to zoom smoothly into point you choose. You may move
mouse and zoom smoothly into interesting areas. By pressing *middle
button* (or *left+right*) you may also *move image* using "drag & drop"
in case you missed some interesting place. *UN-zooming* is also
possible by *right button*, but it is much slower because optimizations
are not so effective as for zooming.

   In case you think that default *speed* is boring (it is quite slow to
make XaoS smooth on slow computer) you may change it by pressing *arrow
up/down*. But understand that faster zooming is more expensive so if
speed is too high you should see just funny colorful blinking
rectangles.

Autopilot
=========

   To make XaoS yet more impressive we did special autopilot that
automatically drives into interesting boundaries of set. So you should
press `A', play your favorite music, drink coffee and relax. I never
tried this but it should be really relaxing! Many pictures in XaoS
gallery are discovered using autopilot.

   Autopilot has also some additional features. It return back in case
zoomed picture is not interesting anymore. Also is able to detect, when
zoomed into really boring part or reached limit of floating point
numbers and restart zooming.

Various fractal formulas
========================

   XaoS also supports other formulas than Mandelbrot set. You may change
*formula* using *number keys*.

   On keys `1' to `5' are *Mandelbrot sets with various power*. The
"normal" Mandelbrot set is on key `1'.

   On key `6' is fractal called *octo*. It is some fractal that Thomas
discovered in fractint.

   On key `7' is fractal called *Newton*. It is famous Newton's formula
for finding roots.

   On key `8' is fractal called *Barnsley*.

   On key `9' is fractal called *Phoenix*. It is very nice and quite
famous fractal.

   On key `0' is fractal called *Magnet*. This fractal has quite
complex formula so it is bit slow.

Out-coloring modes
==================

   To make fractal yet more interesting more coloring modes for points
outside set are provided. "Classical coloring mode" uses number of
iterations that orbit required to escape boundaries. You might change
this mode from the *Fractal menu* or by pressing key `C' Too see more
about coloring modes try tutorial Incoloring modes from XaoS features
overview.

   Those cryptic names for coloring modes are mathematical formulas
where *iter* means number of iterations, *real* real coordinate of last
orbit, *imag* imaginary coordinate of last orbit.

In-coloring mode
================

   Similar to out coloring mode is in coloring. It is only way how to
display thinks inside set. They also can be changed from *fractal menu*
or by pressing `F'.

   You might also want to see tutorial Out-coloring modes from XaoS
features overview.

Planes
======

   All fractals displayed by XaoS are function with complex parameter.
It can be displayed in normal complex plane where x is real part of
number and y is imaginary. But may be also displayed in some other
planes. You might select plane from the *Fractal menu* or by pressing
`I'.

   planes another cryptic names. And, you guessed, another mathematical
formulas. Here mu means coordinates in normal complex plane. In case
you have coordinates in `1/mu' plane and you need complex plane (to
calculate Mandelbrot) you simply use coordinates as variable mu.
Lambda is another plane that can be converted to mu using similar
formula.

*mu*
     normal mode..

*1/mu*
     Inversion-infinity is in 0 and 0 is in infinity.

*1/(mu+0.25)*
     Similar to inversion but moves center outside of Mandelbrot so it
     looks parabolic

*lambda*
     lambda plane

*1/lambda*
     Inversion of lambda plane

*1/lambda-1*
     Inversion with moved center

*1/(mu-1.40115)*
     Very interesting mode for Mandelbrot set. Makes small thinks big.
     So you can browse its details.

Mandelbrot/Julia switching
==========================

   Most of fractals displayed by XaoS (currently all of them) have two
forms: Mandelbrot and Julia. Every point in Mandelbrot form has its own
Julia set. To see more about this correspondence, try tutorial Julia
set from the Introduction to fractals.

   In the Mandelbrot mode, you might get corresponding Julia by moving
mouse to point you selected and pressing `M'. To return back press `M'
again. Some fractals (Barnsley and phoenix) are already in their Julia
versions, because Mandelbrot ones are boring. But by pressing `M' in
such fractal you should get to Mandelbrot version and by choosing
another point as base and pressing `M' again you should get completely
different fractal.  The most interesting points for Julia sets are at
boundaries of Mandelbrot set. Most of Julia inside or outside set are
boring.

Fast Julia preview mode
=======================

   Fast Julia mode is solution for question: What point use as base for
Julia set. Just press `J' and small Julia set will be displayed at top
left corner. Then move mouse around with pressed button 1 and Julia to
corresponding point will be automatically generated.

Palette
=======

   In case you think that default XaoS colors are ugly or you are just
bored by them you may try to change it by pressing `P'. XaoS will
generate automatically random palette. Many of them looks ugly so press
`P' again to get different one.

Filters
=======

   Many interesting effect should be done by post calculation filters.
XaoS has filters as emboss, motion-blur etc. To enable them use `filter
menu' or press `E'.

Palette cycling
===============

   This is very old trick that makes Mandelbrot set more interesting.
You may enable/disable it using `Y'. In the truecolor modes you need to
enable palette emulator filter first. This is done via `E' key.  Or
from filter menu.

Changing number of iterations
=============================

   To calculate fractals perfectly you need infinite number of
iterations. XaoS does just first few of them so after longer zooming
you may get into place that looks quite boring and boundaries of set
are rounded w/o any interesting details. This should be changed by
changing number of iterations:

   Press and hold `arrow left' and wait until iterations are high
enough.  This may slow down calculation much. To reduce number of
iterations press `arrow right'.

Changing resolution
===================

   XaoS usually starts in low resolution (320x200 or so) to make
calculations faster. In case you have fast computer or you need to save
bigger `.gif' images you may change resolution. This should be done by
pressing `=' in full screen drivers or simply by resizing XaoS window.

Changing driver
===============

   XaoS usually have more than one driver available. You may change it
on the fly in case you want different one. For example XaoS started in X
windows and you want to use AA driver. This can be done from the UI
menu.

   This action is bit dangerous, because XaoS can crash during
initialization in case of some problem with initialization--XaoS tries
to initialize an new driver, if it fails it attempts to return back to
the original. Sometimes this in impossible.

Other features
==============

   XaoS has many other features, but they don't fit into this tutorial.
Most of them are available from the menu, so you might experiment with
them. You might also want to see the *animated tutorials* from the
*help menu*, to have an idea what XaoS can do.


File: xaos.info,  Node: controls,  Next: mpeg,  Prev: tutorial,  Up: Top

Basic controls
**************

   By default mouse buttons works in following way:

*left*
     zoom in

*right*
     zoom out

*middle*
     move fractal using drag&drop style way

   This behavior should change. If you enable rotation, first button is
used for rotating fractals. Also in fast Julia mode first button is
used to change seed.

   If you don't have middle button, press both buttons to enable
emulation.

   After few minutes of zooming you will probably reach end of
precisity and fractals will get boring. If you are getting strange big
rectangles at screen, you probably reached limit of numbers and there
is no way to avoid this except UN-zoom back and choose different area.
It don't hurt so much, since you have zoomed approximately.. 64 051 194
700 380 384, so there is quite a lot of areas to explore. Algorithms
with unlimited precisity exists, but they are still too slow for
real-time zooming.

   In the other case you have reached an limit of iterations. The
fractal is calculated just approximately and in this case you need to
increase number of iterations (and decrease speed). This is done from
menu or using arrow keys *Left* and *Right*.

   An *Up* and *Down* keys should be used to change zooming speed. Note
that higher speed costs more and image will be blocky.

   Also this behavior changes. With palette cycling enabled, *Left* and
*Right* keys changes cycling speed, in continuous rotation they changes
speed of rotation.

   All other functions are available from the menus, which (in the
default configuration) are displayed when you move mouse to the top of
screen/window.  It is useful to learn an keys, which are displayed in
gray color.


File: xaos.info,  Node: mpeg,  Next: format,  Prev: controls,  Up: Top

How to encode MPEG files from XaoS
**********************************

   To save sequence, make `xaf' file first. (the easiest way to do this
is to use *record* function in file menu) Then you need to render
sequence.  XaoS can output sequences of ordinary `PNG' images, that
should be later used by MPEG encoder.

Generating sequence for MPEG
============================

   To encode sequence use command as follows:

     xaos -render [filename] -size 352x240 -antialiasing
     -renderframerate 24 -basename [basename]

   `[filename]' is name of `xaf' file, `[basename]' is name used as
base for images.  XaoS add four digit number and extension
automatically.

   You might also want to change the resolution. 352x240 is the default
size for MPEG files, but other sizes works as well. Each dimension must
be multiple of 16.

   Framerate should be also altered. MPEG supports just few selected
framerates (namely 23.976, 24, 25, 29.97, 30) so you might pick any of
them.

   `-antialiasing' is used to produce anti-aliased images. It takes
much longer time and much more memory to calculate them, but resulting
images are better for MPEG DCT compression and they are *compressed
about 3 times more*.  (same is true about *JPEG images*)

   At the other hand, the other XaoS rendering option `-alwaysrecalc'
(which disables XaoS's zooming optimizations) is *not recommended*.
Sequence of animation contains then quite a lot of extra information,
which increases size of MPEG file, but because of MPEG's lossy
compression it is hard to see difference. So it don't worth it.

Rendered files
==============

   Once you start it, XaoS will generate thousands of frames. They
takes quite long time to calculate and save, and consumes plenty of
disc space.  (to render part 1 of tutorial you need about 60MB and half
a hour of time).

   All images are named `[basename]framenum.png'. For example
`intro0001.png' is first frame of animation intro. In case consetuctive
frames are same, XaoS don't save them. So some frames are missing. If
your encoder can't handle this, you will need to write simple script,
which will do symbolic links.

   List of all filenames is saved into file `[basename].par', where
each line is name for the frame. The names repeats here if necessary,
so you should use this file to supply filenames to the encoder.

Pattern file
============

   Some other files are generated as well. There is generated an
*pattern file*, which contains *recommended order of P, B and I frames*.

   MPEG sequence consist of this three frames. The *I frames* are just
images saved in format similar to JPEG files.

   The *P frames* are images, which are constructed from previous one
(latest I or P frame). In case consetuctive frames are similar (and in
the animation they often are), the P frame takes much less disc space
than I frame.

   The *B frames* are constructed from nearest previous P or I frame
and next P or I frame. They takes even less disc space, but they are
quite hard to encode.  Also they are *not used as previous frames*, so
their information is lost once they are displayed. So they are usually
rendered at lower quality then P or I frame and used just to
interpolate nearest frame and make animation smoother. It is generally
not good idea to make whole sequence just form B frames.

   Also using just P frames is generally not good idea. It makes file
shorter, but to jump into Nth frame of animation you need to
*recalculate all P and B frames since latest I frame*. Decoders often
wants to jump into some frame (when user wants, or in case they can't
decode sequence in time), so you need to have some I frames in the
animation to make this possible. Mainly because of the second purpose
you need to place them quite often. Usually they are used for every
15th frame or so. Because they costs quite a lot, in my animations I
usually use every 27th frame. To set this distance use `-iframedist'
option. It should be multiple of 3

   XaoS generates recommended order of this frame based on the
knowledge of fractal motion. Situations where screen don't move at all
are rendered just from P frames (since jumping is usually not required
here), situations where screen changes completely (at least in XaoS's
opinion) I frames are used and in other standard sequence
`IBBPBBPBBPBBP...' is used.

   If your encoder supports this, you should supply this pattern for
encoding to squeeze out some bytes..

Motion vector files
===================

   XaoS also generates motion vector recommendation for the encoder.
They are useful for encoding of B and P frames.

   In case some objects just moves at screen, motion vectors shows at
their old position, so no image needs to be saved.

   Calculating of this motion vector is very significant task. In case
you guess them well, you increase quality and reduce file size, which
is always great.  Calculation also takes lots of CPU and it is hard to
get optimal vectors (it just takes too long time).

   XaoS know how does the fractals move, so he can calculate this
vectors quite easily. XaoS saves this information into `*.p' and `*.b'
files. (`*.p' are for P frames, `*.b' are for B frames). If your
encoder supports this, you should supply this vectors to increase
quality. They are `not exact' (XaoS can do many mistakes), but encoder
should try to find his own vectors, try XaoS's ones and pick the better
one.

   This technique saves quite a lot of bytes in fast zooming/UN-zooming
animations.. (where images moves more than 3 or 5 pixels per
frame--since most programs looks 10-20 pixels around for motion vectors)

   To enable saving of motion vector files, add option `-rendervectors'.

Berkeley parallel MPEG encoder
==============================

   This is the encoder I use. It seems to be the best freely available
software encoder I've tested. It can generate quite small files, but it
is rather slow.  It is available at Berkeley's FTP site
`mm-ftp.CS.Berkeley.EDU' and called `mpeg_encode1.5b'

   It has lots of options to tune, so you should spend quite a lot of
time with playing with this. The configuration I use is in file
`doc/mpeg.param'.

   I've also done some patches that makes possible to use the pattern
and motion files generated from XaoS. The patch is in
`doc/mpeg_encode.patch'. So if you want to use this features (they are
*EXPERIMENTAL*) you might apply this patch and recompile encoder.

   Once you filled the `mpeg.param' file (see comments inside), you
should render sequence using `mpeg_encode [filename]' and with luck you
are done.


File: xaos.info,  Node: format,  Next: writehelp,  Prev: mpeg,  Up: Top

XaoS' file format
*****************

   This section describes format used by XaoS for animations,
configuration files and saved positions. All these files have common
format, designed to be easily readable, to allow manual editing of
files and converting them into another program.

   I also taken a care to make it easily extensible for future versions
of XaoS so I hope there will not be many incompatibilities between
various XaoS's versions.

   File is simple set of commands executed sequentially. XaoS does not
provide any variables/cycles as usual scripting languages but possible
future extension to scheme should be easy since format uses scheme-like
syntax.  Syntax of every command is:

   `(command_name '*[param1] [param2]*`)'

   Where parameters are optional and separated by whitespace (arbitrary
number of spaces, tabs and enters). Parameters should have following
types:

*integer*
     number w/o decimal point (`123')

*float*
     floating point number in decimal notation with optional exponent
     (`1.23E2')

*keyword*
     text started by apostroph `''. It is used to pass various string
     constants like formula name (`'mandel') Apostrophe is required for
     scheme compatibility

*string*
     Text inside double quotes. The only parameter that should contain
     whitespace

*boolean*
     `#t' for true or `#f' for false

   Complete description of all XaoS functions (with some examples)
contains index of functions in the XaoS registry. *Note menus::.  You
might take special care to animation functions. *Note animf::. Also the
following functions are significant:

*load*
     This function loads and interprets file. It works in similiar way
     as include in C.

*initstate*
     This function reset XaoS state to default values from version 3.0.
     This command should be at the beginning of each animation file,
     since otherwise some stuff previously enabled by user should make
     unexpected effects.  State is not reseted by default before
     playing animation since it should make impossible to write macros.
     Current version IMO don't need them, but in future versions, where
     scheme programming language will be available this should be much
     more interesting subject.

*usleep*
     This function waits selected amount of time(in usec) until next
     commands are processed. Screen is recalculated and displayed at
     the beginning of usleep when necessary. Remaining time is spent by
     waiting or performing animation you entered by animation commands.

*wait*
     Waits until screen is animated (fractal is in calculation or some
     filters--like motion-blur does some animation. Do not call this
     function when zoom, or continuous rotation is active otherwise
     deadlock happens. It is recommended to call it, before text
     subtitles are displayed, since it looks ugly when they are
     displayed over blocky unfinished fractal. It may look well for you
     but ugly for others. Also you should call it after animation is
     performed and before switch to another fractal happens, since
     switch to fractal involves calculation, screen is stopped for a
     while and unfinished fractal there looks ugly. You should also
     call it, when you want to do something as soon as possible.

   Example:

     ;configure everything for the first frame
     (inistate)
     (palette 1 1163254293 0) ;custom palette
     (cycling #t) ;enable cycling
     (cyclingspeed 7)
     (maxiter 276) ;higher number o fiterations
     (range 3) ;default range for solid guessing
     (usleep 1000000) ;second frame start here
     (moveview -1.8101154154614007889 -8.2687205907162041209E-05)
     ;just move the image
     (usleep 1000000) ;thirt frame
     (morphview -1.8101154154614007889 -8.2687205907162041209E-05
     6.277210971069452361E-10 6.2772109785334669875E-10)
     ;10 seconds of zooming into selected
     rectangle
     (usleep 100000000)

   Best way to learn XaoS command language is probably to read position
files and modify them. For example to create zooming animation from the
original file:

     (initstate)
     (defaultpalette 0)
     (formula 'mandel)
     (view -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)

   Just change `view' command to `morphview' command and add `usleep':

     (initstate)
     (defaultpalette 0)
     (formula 'mandel)
     (morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)
     (usleep 10000000)

   Following code produces Julia morphing in the real axis:

     (initstate)
     (fastjulia #t)
     (juliaseed -2 0)
     (morphjulia 2 0)
     (usleep 2000000)

   And following is the "rotozooming" animation:

     (initstate)
     (fastrotate #t)
     (morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)
     (morphangle 300)
     (usleep 10000000)
     (wait)
     (fastrotate #f)

XaoS gallery
************

   I plan to make XaoS gallery of animations and position files at XaoS
home-page so please send me all your nice animations and images you
created using XaoS to `jh@ucw.cz'


File: xaos.info,  Node: writehelp,  Next: xshl,  Prev: format,  Up: Top

How to write XaoS help files
****************************

   XaoS help lies in the file `help/xaos.hlp'. It is divided into parts,
where each is started by the *keyword* - word using it you activate it.
In the help file keywords are wrote using `%keyword'

   If you are writing documentation about some command in XaoS function
registry, use same keyword, as the name of function in order to get
context sensitive help work.


File: xaos.info,  Node: xshl,  Next: drivers,  Prev: writehelp,  Up: Top

xshl
====

   *Xshl* stands for *XaoS simple hypertext language*. It uses similar
tags to HTML. It is simpler and more restrictive in order to make it
easy to parse using various scripts. In C code you might use quite
universal library present in `src/util/xshl.c' to parse it.

   Following tags are supported:

*head*
     make headings (should be at least at the begging of the page)

*emph*
     emphatize

*tt*
     Use non proportional font

*br*
     Break line

*p*
     Next paragraph

*dl*
     Definition list

*dt*
     Definition tag (should be used only inside definition list)

*dd*
     Definition description (should be used only inside definition list)

*center*
     align to center

*right*
     align to right

*red*
     change color to red (should not be used in help files)

*black*
     change color to black (should not be used in help files)

*white*
     change color to white (should not be used in help files)

*a name*
     link to other help page

*tutor name*
     activate tutorial

*notex*
     Ignore this in texinfo manuals


File: xaos.info,  Node: drivers,  Next: menus,  Prev: xshl,  Up: Top

driver specific documentation
*****************************

   XaoS is portable and works at different platforms. Since not all
platforms are exactly the same, there is some differences. Here is
documentation about each this specific port.

* Menu:

* aa::			AA-lib--high quality ascii art driver
* dos::			DOS driver
* dX-fullscreen::	directX fullscreen driver
* dX-window::		directX windowed driver
* ggi::			GGI driver
* plan9::		plan9 driver
* SVGAlib::		SVGAlib driver
* win32::		Win32 driver
* X11:: 		X11 driver


File: xaos.info,  Node: aa,  Next: dos,  Up: drivers

AA-lib driver
=============

   AA driver is currently the most advanced and portable driver for
XaoS.  It is based at AAlib--an high quality ASCII-art library
developed by AA-project.  (see `http://www.ta.jcu.cz/aa')

   It is fully featured XaoS driver for text mode displays. It supports
256 colors and mouse where possible.

   It also has some extended features available from the UI menu:

*Attributes*
     AA-lib may use character attributes to reach fine qualitty of
     image.  By default it uses normal, dim and bold characters where
     possible.  But you should also enable different ones like reversed
     or bold font characters. You may also enable usage of non
     ansii/reversed characters if your device supports it.

*Font*
     AA-lib uses bitmap image of font to prepare approximation table
     used for ASCII art rendering.  This bitmap is expected to be same
     as one used by your device. AAlib performs detection where
     possible however some devices (like UNIX text terminals or MDA)
     does not support this. AAlib has few font images compiled in, so in
     this cases you should try to use one of them to achieve best
     results.

*Inversion*
     Some devices uses inversed video use this to get correct results
     at such devices.

*Dithering mode*
     Dithering is an way to get more exact color in approximation by
     combining more characters. But this method should bring ugly
     looking noise at certain images.  Use this menu to disable or tune
     it.

*Palette options*
     By default AA driver uses XaoS palette to render images, but it
     quite often looks ugly at text displays. Here you can choose
     special text palette instead. Note that with filters enabled
     results should be rather ugly. This function is available from the
     *palette menu*.

*Save text screen*
     Normal save function will generate normal PNG image instead of nice
     ASCII-art. To save ASCII art use this function instead. It
     supports many text file formats like HTML, ANSI, more, etc... It
     will also ask you for font and attributes(see above). It is
     available from the *file menu*

   AA-lib driver also provides the full set of standard AA-lib's
command line options. You may use them to tune parameters like gamma
correction etc. See `xaos -help' or AA-lib documentation for details.

   An AA driver was done by Jan Hubicka, 1997.


File: xaos.info,  Node: dos,  Next: dX-fullscreen,  Prev: aa,  Up: drivers

DOS driver
==========

   This is fully featured driver for DJGPP and allegro.  It supports
many VGA modes, VESA 1.0--3.0, VBE/AF, S3 and some other cards.

   Following problems may occour:

*Some DPMI servers may cause problems*
     Some DPMI servers like one from Novell/Dr/Open DOS are buggy. Use
     clean DOS instead and XaoS will automatically start `cwsdpmi'.
     Under Open Dr DOS use `dpmi off' at command line to disable it.

*Higher resolutions don't work*
     If your videocard has enough memory for selected resolution, you
     most probably have an unsupported videocard.  Please use some VESA
     BIOS extension on this videocards. Please see note about VESA at
     the end of this section.

*XaoS needs coprocessor*
     I don't distribute coprocessor library linked into XaoS because it
     is too slow for real-time zoomer. Coprocessor emulation will not
     help, because xaos works in protected mode.

*XaoS needs mouse driver to be usable*

*XaoS works slowly in higher resolution*
     This should be also caused by slow Allegro's driver or VESA BIOS
     of your videocard. You might try some other VESA BIOS extension.
     Look for at the `http://www.talula.demon.co.uk' for FreeBE project
     or Scitech Display Doctor package.  Please see note about VESA at
     the end of this section.

VESA
----

   VESA is an standard for using higher resolutions in DOS. Many
videocards has VESA in the BIOS so you don't need any additional
software, while other needs special program providing this. Also some
VESA BIOS implementations are buggy or suboptimal, there is 3 different
versions, while the version 1.0 is many times slower than 2.0, which
has support for protected mode and linear framebuffer.  So if you have
problems with higher resolutions, or some graphics modes are not
available (like 320x200 truecolor), you might try some software package
emulating VESA.

   Most famous VESA emulating program is Scitech display doctor. It has
support for many videocards and is quite reliable. It's disadvantage
is, that it is shareware and works just 30 days. You might also try an
`ftp.simtel.net' that contains many VESA emulation packages such as
`s3vbe' or the new FreeBe project at `http://www.talula.demon.co.uk'

   DOS driver was done by Jan Hubicka, 1997.


File: xaos.info,  Node: dX-fullscreen,  Next: dX-window,  Prev: dos,  Up: drivers

directX fullscreen driver
=========================

   This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API and kludges in DirectX it
should be rather unstable. Please report all bugs and in case of
problems you might use DOS version of XaoS instead.

   This driver allows the Windows port of XaoS run in the full screen
mode.  Driver support 256, 65536 and 16777216 color modes (24bpp and
32bpp) in all resolutions supported by directX.  You might change
graphics mode by pressing `=' key (or using UI/Resize menu). In case
selected mode is not supported, driver will restore previous settings.

   Use `-mode WIDTHxHEIGHTxDEPTH' (like `-mode 640x480x16') command
line option to change graphics mode.

   If you want to start XaoS in directX, use `-driver dX-fullscreen'
option.

   See Win32 driver documentation for some more Windows releated
information.

   DirectX driver was done by Jan Hubicka, Jan Olderdissen and Pavel
Tzekov, 1999.


File: xaos.info,  Node: dX-window,  Next: ggi,  Prev: dX-fullscreen,  Up: drivers


File: xaos.info,  Node: ggi,  Next: plan9,  Prev: dX-window,  Up: drivers

GGI driver
==========

   GGI stands for General Graphics Interface. Part of this project is
to develop libggi--an portable graphics library and XaoS's GGI driver
use it.  It is experimental, since API of libggi is not stabilized yet.
There are some problems with keyboard handling--shift key don't work
yet.

   All other stuff might work well, but no guarantees. It is alpha
quality software.

   GGI driver was done by Jan Hubicka, 1998.


File: xaos.info,  Node: plan9,  Next: SVGAlib,  Prev: ggi,  Up: drivers

Plan9 driver
============

   Plan9 is very nice small operating system by Bell labs (authors of
UNIX). It is very incompatible with other operating systems. Even the C
compiler and header files are different, but XaoS should work there
well (even at the limited free demo installation without any POSIX
compatibility stuff)

   There is few limitations: File selector and image saving don't work.
You might save an position files and then later render them at the
other OS, or save screenshots.

   Plan9 terminals also don't provide any way to catch an arrow keys,
so you can't use them. Use mouse to navigate in the menus. Also getting
of screen resolution is impossible, so use `-pixelwidth' and
`-pixelheight' instead of `-screenwidth' and `-screenheight'.

   By default XaoS changes colormap. This will collide with other
colorful programs like Mortha. You might disable this behavior using
`-nopalette' switch. Disadvantage of this solution is, that it is
slower.

   Plan9 driver was done by Jan Hubicka, 1997.


File: xaos.info,  Node: SVGAlib,  Next: win32,  Prev: plan9,  Up: drivers

SVGAlib driver
==============

   This is driver for Linux SVGAlib. I really like this driver, because
I much prefer full screen zooming instead of small 320x320 window in
X11.  It was one of first drivers for XaoS and is fully featured.  The
following problems can occur:

*XaoS don't initialize graphics mode*
     when started under other user than root SVGAlib requires root
     privileges to directly access hardware. When you really want to
     start XaoS as normal user enable sticky bit (`chmod +s') at XaoS
     executable note that I take care to disable all security holes
     caused by this bit so I believe it is safe.

*Mouse doesn't work*

*Screen is blank in higher resolution*
     Both this problems are probably caused by wrong configuration of
     SVGAlib. Please configure it in `etc/vga/libvga.cong' or
     `/usr/local/lib/libvga.conf' Also GPM can cause problems. Try to
     kill it before starting XaoS

*When I switch console I can't switch back*
     This is another typical SVGAlib bug Try to hold `F' key longer
     than `alt'.  It helps on my computer. On older SVGAlib there was
     famous "enter bug" that caused crash after pressing enter. Try to
     update to newer release.

   SVGAlib driver was done by Jan Hubicka, 1997.


File: xaos.info,  Node: win32,  Next: X11,  Prev: SVGAlib,  Up: drivers

Win32 driver
============

   This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API it should be rather unstable.
Please report all bugs. In case of problems you might use DOS version
of XaoS instead.

   Driver should work in all bit depths, but 16 color mode is not
natively supported by XaoS engine. XaoS internally works in 32k colors
and result is converted to 16 colors by Windows. Because Windows
conversion routines are slow and ugly, result is slow and ugly.  Please
configure your display to another bit depth to "solve" this problem.

   Use `-size WIDTHxHEIGHT' command line option to change default
window size.

   This driver also have maps to native Windows look and fell. There is
small problem with combo boxes in dialogs. They are expected to give
you choice between few strings. The keyboard controls (changing choice
by arrow keys) works, but mouse selection is broken. If you know how to
solve this bug, please let me know.

   XaoS is UNIX application and have many command line options.  Some
features are not available from the GUI.  Because Windows applications
can't have normal output, most of critical messages are displayed in
message boxes, but some longer messages are ommited. Most significant
is help about command line options that you can find in the
`doc/cmdopts.txt'.  Quite confusing should be fact, that animation
rendering mode don't display anything, only renders the images. Just
start the rendering and message box will inform you that XaoS is
entering calculation loop. Relax and wait for message box signaling end
of the loop.

   Note that XaoS also supports directX API.

   Win32 driver was done by Jan Hubicka, Jan Olderdissen and Pavel
Tzekov, 1999.


File: xaos.info,  Node: X11,  Prev: win32,  Up: drivers

X11 driver
==========

   This was the first driver done for XaoS. It supports many visuals,
shared colormaps and MitSHM extension.

   Bugs/limitations:

*XaoS makes some X servers too busy*
     Sometimes XaoS generates images faster, than X can display them.
     In this case XaoS badly respond to mouse and other applications
     stops This happens especially at old R4 servers. Use `-sync' to
     avoid this problem. Note that `-sync' do `not' enable an
     synchronous mode in communication just makes one additional XSync
     call. So slowdown is not so high as you might expect.

*Does not work at all visuals*
     This driver supports only 8bpp pseudocolor/grayscales, 15,16,24
     and 32bpp truecolor, 1bpp and 8bpp staticolor visuals.

*Palette rotating does not work for 8bpp pseudocolor w/o private palette*
   X11 driver was done by Jan Hubicka and Thomas Marsh, 1997.


File: xaos.info,  Node: menus,  Next: authors,  Prev: drivers,  Up: Top

Menus, functions and command line parameters
********************************************

   All XaoS functions are in central function registry. The scripting
language, menus, dialogs and command line options are built from this
database. This section contains information about all functions
available in this registry.

* Menu:

* root::	Root menu
* animroot::	Animation root menu
* plc::	Replay only commands

* linemenu::	Line drawing functions
* animf::	Animation functions
* time::	Timing functions
* file::	File
* fractal::	Fractal
* calc::	Calculation
* mfilter::	Filters
* ui::	UI
* misc::	Misc
* helpmenu::	Help
* file::	File
* helpmenu::	Help
* xtextpos::	Horizontal text position
* ytextpos::	Vertical text position
* mformula::	formulae
* palettemenu::	Palette


File: xaos.info,  Node: root,  Next: animroot,  Up: menus


File: xaos.info,  Node: animroot,  Next: plc,  Prev: root,  Up: menus

Animation root menu
===================

   This menu is displayed at the top of screen when animation replay is
active.

* Menu:

* file::	File
* stopreplay::	Stop replay
* helpmenu::	Help
* ui::	UI


File: xaos.info,  Node: stopreplay,  Up: animroot

Stop replay
-----------

   Terminate animation replay.

   *Available as*: menu item


File: xaos.info,  Node: plc,  Next: linemenu,  Prev: animroot,  Up: menus

Replay only commands
====================

   Some commands, such as timing primitives or animation functions are
available just in animation files.

* Menu:

* linemenu::	Line drawing functions
* animf::	Animation functions
* time::	Timing functions
* load::	Include file


File: xaos.info,  Node: load,  Up: plc

Include file
------------

 - Function: load FILE

   This function lets you include another file into your script. It
works in similar way as `#include' in C source or `load' in scheme.
File is searched in the same directory as current source is.

   *Available as*: command


File: xaos.info,  Node: linemenu,  Next: animf,  Prev: plc,  Up: menus

Line drawing functions
======================

   XaoS has support for drawing lines. This functions are available
only in animations and should be used to show some parts of fractals or
draw simple diagrams. See tutorial "Introduction to fractals" for
example of this feature.

   Lines should be drawn in *screen* coordinates, where 0,0 is top left
corner and 1,1 is bottom right, *scaled* coordinates, which are similar
just scaled to keep 0,0--1,1 rectangular or *Fractal* coordinates
should be used to draw line at exact position of screen.

   Color of line should be specified by command `color'. *Note color::.
You might draw arbitrary number of lines and later morph them. Each
line has its own key, which is number used to identify it. You might
set key using command `linekey'.  Next lines have consetuctive numbers.
Commands for changing line then operates at line with current key.

   For example:

     (color 'red)
     (line 'scaled 0.3 0.5 0.7 0.5)
     (line 'scaled 0.3 0.5 0.7 0.5)
     (line 'scaled 0.3 0.5 0.3 0.5)
     (line 'scaled 0.7 0.5 0.7 0.5)
     (linekey 0)
     (morphline 'scaled 0.3 0.3 0.7 0.3)
     (morphline 'scaled 0.3 0.7 0.7 0.7)
     (morphline 'scaled 0.3 0.3 0.3 0.7)
     (morphline 'scaled 0.7 0.3 0.7 0.7)
     (usleep 1000000)

   Creates line morphing to rectangle

 - Function: line KEYWORD COMPLEX COMPLEX

   Draw line between two points.  `keyword' specifies type of
coordinates and should be one of the following: ``fractal', ``screen'
or ``scaled'.  Function also increase the line key.

   *Available as*: command

 - Function: morphline KEYWORD COMPLEX COMPLEX

   Morph current line to given coordinates.  `keyword' specifies type
of coordinates and should be one of the following: ``fractal',
``screen' or ``scaled'.  Line will start moving at the next timing
command. *Note time::. and reach the final position before end of it.
Function also increase the line key.

   *Available as*: command

 - Function: morphlastline KEYWORD COMPLEX COMPLEX

   This function has same functionality as morphline, but it don't
increase the line key and touches line with previous key. This is
useful when you want to move just drawn line--you don't need to set
linekey back.

   *Available as*: command

 - Function: linekey INTEGER

   Set current line key.

   *Available as*: command

 - Function: clearline

   Clear current line. This function also increase the line key.

   *Available as*: command

 - Function: clearlines

   Clear all displayed line. Lines should be also cleared using
`clearscreen' or `display' commands available from Misc menu. *Note
misc::.

   *Available as*: command


File: xaos.info,  Node: animf,  Next: time,  Prev: linemenu,  Up: menus

Animation functions
===================

   This functions are used to animate fractal state--zoom, UN-zoom and
morph various parameters. They should be used only in the animation
files.  Animations are usually performed for whole time selected by the
next timing function. *Note time::.  For example:

     (view 0 0 1 1)
     (morphview 0 0 2 2)
     (usleep 5000000)

   Will do 5 seconds long UN-zooming animation.

* Menu:

* animateview::	Animate view
* morphview::	Morph view
* morphjulia::	Morph julia
* moveview::	Move view
* morphangle::	Morph angle
* zoom::	Zooming functions


File: xaos.info,  Node: animateview,  Next: morphview,  Up: animf

Animate view
------------

 - Function: animateview FLOAT FLOAT FLOAT FLOAT

   This function is almost equivalent to function `view'. *Note
uiview::.  It expect that view will be changed just slightly so
recalculation is done with `ANIMATE' priority. This means that dynamic
resolution is used by default.

   View-port is selected by the center and two radiuses (real and
imaginary). See `view' for more information.

   *Available as*: command


File: xaos.info,  Node: morphview,  Next: morphjulia,  Prev: animateview,  Up: animf

Morph view
----------

 - Function: morphview FLOAT FLOAT FLOAT FLOAT
   For whole time selected by next `usleep' or other timing function
viewpoint is smoothly morphed from current one to one selected by
`morphview'.

   View-port is selected by the center and two radiuses (real and
imaginary). See for more information

   This function should be easily used for creating the
zooming/UN-zooming animations using position files.  This is example
position file generated by XaoS:

     (initstate)
     (defaultpalette 0)
     (formula 'mandel)
     (view -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)

   Just by exchanging `view' command by `morphview' command and adding
`usleep' you might create zooming animation:

     (initstate)
     (defaultpalette 0)
     (formula 'mandel)
     (morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)
     (usleep 10000000)

   *Available as*: command


File: xaos.info,  Node: morphjulia,  Next: moveview,  Prev: morphview,  Up: animf

Morph julia
-----------

 - Function: morphjulia COMPLEX
   For whole time selected by next `usleep' or other timing function
julia seed is smoothly interpolated between current one to one selected
by `morphjulia'. By default this will cause recalculation of the whole
screen.  To avoid this use fast julia mode. *Note fastjulia::.

   Simple animation morphing julia seed in the X axis:

     (initstate)
     (fastjulia #t)
     (juliaseed -2 0)
     (morphjulia 2 0)
     (usleep 2000000)

   *Available as*: command


File: xaos.info,  Node: moveview,  Next: morphangle,  Prev: morphjulia,  Up: animf

Move view
---------

 - Function: moveview COMPLEX
   Smoothly move center to image to another position.

   *Available as*: command


File: xaos.info,  Node: morphangle,  Next: zoom,  Prev: moveview,  Up: animf

Morph angle
-----------

 - Function: morphangle FLOAT
   Smoothly rotate to image to another angle. By default rotation causes
recalculation of the whole screen. To avoid this you need to enable
fast rotate mode. *Note rotate::. Don't forget to disable it later,
since it slow down other animations.

   Simple "rotozooming" animation:

     (initstate)
     (fastrotate #t)
     (morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08
     9.69332308834E-08)
     (morphangle 300)
     (usleep 10000000)
     (wait)
     (fastrotate #f)

   *Available as*: command


File: xaos.info,  Node: zoom,  Prev: morphangle,  Up: animf

Zooming functions
-----------------

   Functions for zooming/UN-zooming was created mainly for recording the
animation. In manually created animation files it is easier to use
`morphview'. *Note morphview::.

 - Function: zoomcenter COMPLEX
   This function set center to zoom in. Center is given as position in
fractal coordinates.

   *Available as*: command

 - Function: zoom
   Start zooming to area specified by `zoomcenter'. Work is the same
way as first button.

   Speed of zooming should be controlled by function `speed' or in more
exact way by `maxstep' and `speedup'.

 - Function: unzoom

   Start un-zooming from area specified by `zoomcenter'. Work is the
same way as third button.

   *Available as*: command

 - Function: stop
   Stop zooming or UN-zooming.

   *Available as*: command


File: xaos.info,  Node: time,  Next: file,  Prev: animf,  Up: menus

Timing functions
================

   Timing functions are used to control animation replay daemon. It
might wait for given time or wait until calculation is complete. The
animation functions are controlled by this. Animations are performed
for whole selected time.

* Menu:

* usleep::	Usleep
* textsleep::	Wait for text
* wait::	Wait for complete image


File: xaos.info,  Node: usleep,  Next: textsleep,  Up: time

Usleep
------

 - Function: usleep INTEGER

   This function waits selected amount of time(in usec) until next
commands are processed. Screen is recalculated and displayed at the
beginning of usleep when necessary. Remaining time is spent by waiting
or performing animation.

   *Available as*: command


File: xaos.info,  Node: textsleep,  Next: wait,  Prev: usleep,  Up: time

Wait for text
-------------

 - Function: textsleep

   Behavior is very similar to `usleep', but the time is calculated
from number of letters currently displayed at screen. So if you want
wait just for time user needs to read subtitle, use this function. User
can then alter replay speed for its own needs using `letterspersec'.
*Note letterspersec::. This value should be changed during replay by
arrow keys.

   *Available as*: command


File: xaos.info,  Node: wait,  Prev: textsleep,  Up: time

Wait for complete image
-----------------------

 - Function: wait

   Wait until image is complete. You might use this function always
after zooming or UN-zooming when dynamic resolution should be used.
This ensures that image calculation will be complete and user will see
the result before animation continues. Also should be useful in
combination with filters like motion blur, since it will wait while
animation is performed.

   This function can not be used with animation functions, otherwise
deadlock will happened.

   *Available as*: command


File: xaos.info,  Node: file,  Next: fractal,  Prev: time,  Up: menus

File
====

* Menu:

* loadpos::	Load
* savepos::	Save
* record::	Record
* play::	Replay
* saveimg::	Save image
* loadexample::	Load random example
* savecfg::	Save configuration
* quit::	Quit


File: xaos.info,  Node: loadpos,  Next: savepos,  Up: file

Load XaoS position file
-----------------------

   Load XaoS position file (`*.xpf').  See format description for more
information.

   *Available as*: menu item, command line option


File: xaos.info,  Node: savepos,  Next: record,  Prev: loadpos,  Up: file

Save XaoS position file
-----------------------

 - Function: savepos FILE

   Save current state to XaoS position file (`*.xpf'). This file is in
human readable format and should be later easily improved by hand or
used as base for animation.  See format description for more
information.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: record,  Next: play,  Prev: savepos,  Up: file

Record animation
----------------

 - Function: record BOOL [ FILE ]

   Start recording to XaoS animation file (`*.xaf'). This file is in
human readable format and should be later easily edited.  See format
description for more information.  To stop animation recording select
this function in the menu again, or use command `(record #f)'

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: play,  Next: saveimg,  Prev: record,  Up: file

Replay animation
----------------

   Replay XaoS animation file (`.xaf').

   *Available as*: menu item, command line option


File: xaos.info,  Node: saveimg,  Next: loadexample,  Prev: play,  Up: file

Save image
----------

 - Function: saveimg FILE

   Save current state to image file. This file is in `.png' (portable
network graphics) format, which should be later read by many
applications like graphics editors, internet browsers etc.

   For this function an external library called `pnglib' is required. In
cases where this library wasn't available during compilation, this
function don't work. Please see `INSTALL' for more information about
obtaining png library and recompiling XaoS.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: loadexample,  Next: savecfg,  Prev: saveimg,  Up: file

Load random example
-------------------

 - Function: loadexample

   Choose random `.xpf' file from the `examples' directory and load it.
You might use it as the starting point for next exploration.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: savecfg,  Next: quit,  Prev: loadexample,  Up: file

Save configuration
------------------

 - Function: savecfg

   Save current configuration. Configuration is saved into special file
(at UNIX `~/.xaosrc', `xaos.cfg' under DOS), which is automatically
loaded at startup. So next time you run XaoS you will get the same
configuration.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: quit,  Prev: savecfg,  Up: file

Quit
----

 - Function: quit

   Quit XaoS.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: fractal,  Next: calc,  Prev: file,  Up: menus

Fractal
=======

   This menu contains all function, which lets you specify fractal
parameters like formulas, coloring modes, seeds and much more.

* Menu:

* formula::	Formula
* mformula::	formulae
* incoloring::	Incoloring mode
* outcoloring::	Outcoloring mode
* plane::	Plane
* palettemenu::	Palette
* uimandelbrot::	Mandelbrot mode
* uiperturbation::	Perturbation
* uiview::	View
* initstate::	Reset to defaults
* tcolor::	True-color coloring modes


File: xaos.info,  Node: formula,  Next: uimandelbrot,  Up: fractal

Formula
-------

 - Function: formula KEYWORD

   Set the current fractal formula. Keyword should be one of the
following formulas:
*'mandel*
     Standard Mandelbrot set. *Note mandel::.

*'mandel3*
     Mandelbrot set power 3. *Note mandel3::.

*'mandel4*
     Mandelbrot set power 4.

*'mandel5*
     Mandelbrot set power 5.

*'mandel6*
     Mandelbrot set power 6.

*'newton*
     Newton approximation method. *Note newton::.

*'barnsley*
     First barnsley's formula. *Note barnsley::.

*'octo*
     Fractint's octo. *Note octal::.

*'phoenix*
     Phoenix. *Note phoenix::.

*'magnet*
     Magnet. *Note magnet::.

   *Available as*: command


File: xaos.info,  Node: uimandelbrot,  Next: uiperturbation,  Prev: formula,  Up: fractal

Mandelbrot/Julia mode
---------------------

   Fractal should be in Mandelbrot or Julia mode. Each point in the
Mandelbrot set has it's own Julia set. To learn more about this
correspondence see tutorial "Julia set".

   This function should be used to switch between this modes. In case
you are enabling Julia mode, you need to set seed--point selected from
the Mandelbrot set.

   In case you are enabling function from menu, you are prompted for
this number.  Often it is useful to use some point at screen. You might
do that by pressing `M' key. Then you are not asked for seed and
current position of mouse is used instead.

   Good seedpoints lies at the boundaries of the set. Other seeds
generates usually quite boring fractal. You might also explore various
seeds using Fast julia mode. *Note fastjulia::.

   Note that not all fractals has Julias. But XaoS can generate an fake
Julia sets, which uses some modification of the formula in the other
cases, so this function is currently usable for all fractal types.

   *Available as*: menu item

 - Function: julia BOOL

   This function is used to enable/disable julia mode in the animation
files.

   *Available as*: command line option, command

 - Function: juliaseed COMPLEX

   Select current julia seed.

   *Available as*: command line option, command


File: xaos.info,  Node: uiperturbation,  Next: uiview,  Prev: uimandelbrot,  Up: fractal

Perturbation
------------

   Perturbation is simple trick, where some other starting point of
orbit is used. Traditionally zero is used, but other values should
generate interesting results too.

   When enabling this function from the menu, you will be asked for
complex number specifying the perturbation. When you select it again,
perturbation will be disabled and you will not be prompted.

   It is often useful to specify complex number representing some point
at the screen. This should be achieved by placing mouse cursor there
and pressing `B'. Another pressing `B' will disable perturbation (set
perturbation value to zero).

   Function has effect just for some formulas (like the Mandelbrot set)
in the Mandelbrot mode. *Note uimandelbrot::.

   *Available as*: menu item

 - Function: perturbation COMPLEX

   This is an perturbation function with better interface to scripting
language. It don't have the enable/disable feature, but lets you always
specify the numbers. Use 0 0 to disable perturbation.

   *Available as*: command line option, command


File: xaos.info,  Node: uiview,  Next: initstate,  Prev: uiperturbation,  Up: fractal

View
----

   Set current viewpoint in the fractal. This function is useful when
you have found some interesting coordinates somewhere (at the WWW page
or so) and you want to see it in XaoS.

   In the dialog you will be asked for *center*, *radius* and *angle*
of image.

   Center specifies point, which will be displayed in the center of
screen. Radius is radius of circle around this center. XaoS will choose
smallest possible area, which fits to screen and contains whole this
circle. Angle is rotation of the image in degrees.

   Many different formats for specifying area are used. Some people use
coordinates of left top and bottom down visible point instead. Then they
specify coordinates as four numbers x1, y1, x2, y2. To set same
viewpoint in XaoS, calculate (x1+x2)/2 and set it as real part of
center. Imaginary part of center is (y1+y2)/2. Radius is larger of
x2-x1 and y2-y1.

   Other programs uses zoom factor instead of radius. Then you might
set radius to 2/zoom.

   *Available as*: menu item

 - Function: view FLOAT FLOAT FLOAT FLOAT

   This function is used to set visible area of fractal from the
animation files. It don't let you specify the angle, which can be
controlled by separate function `angle', but lets you specify ellipse
instead of circle. You might specify both real and imaginary radius, so
you have better control of area that will be visible. XaoS will choose
smallest possible area containing this ellipse, which is not shrinked.

   *Available as*: command line option, command

 - Function: angle FLOAT

   Set rotation angle in degrees. By default this causes recalculation
of screen.  You might enable fast rotation mode. *Note rotate::. This
will let you rotate screen without recalculation, but will slow down
other thinks, so don't forget to disable it later.

   *Available as*: command line option, command


File: xaos.info,  Node: initstate,  Next: plane,  Prev: uiview,  Up: fractal

Reset to defaults
-----------------

 - Function: initstate

   This function resets most of XaoS values to the defaults. It is
useful in cases you are lost and you want to start from the beginning.
Also it should be used as the first command of every animation file to
ensure that it will be played always in the same environment.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: plane,  Next: incoloring,  Prev: initstate,  Up: fractal

Plane
-----

 - Function: plane INTEGER

   All fractals displayed by XaoS are function with complex parameter.
It can be displayed in normal complex plane where x is real part of
number and y is imaginary. But may be also displayed in some more funny
modes:
*mu*
     normal complex plane

*1/mu*
     Inversion-infinity is in 0 and 0 is in infinity.

*1/(mu+0.25)*
     Similar to inversion but moves center outside of Mandelbrot so it
     looks parabolic

*lambda plane, 1/lambda, 1/lambda-1*
     Lambda planes and its inversions with different center.

*1/(mu-1.40115)*
     Very interesting mode for Mandelbrot set. Makes small thinks big.
     So you can browse its details.  You might also try tutorial about
planes to see some examples.

   In the scripting language, planes are numbered as follows:

*0*
     mu

*1*
     1/mu

*2*
     1/(mu+0.25)

*3*
     lambda

*4*
     1/lambda

*5*
     1/(lambda-1)

*6*
     1/(mu-1.40115)

   *Available as*: command line option, command


File: xaos.info,  Node: incoloring,  Next: outcoloring,  Prev: plane,  Up: fractal

Inside coloring mode
--------------------

 - Function: incoloring INTEGER

   Areas inside the set are usually filled by the black color.
Alternatively you might use different ways in order to make fractal
more interesting. Value of the latest orbit should be used to specify
color. It is the only method to make visible areas inside the set. You
might also try tutorial

   XaoS has many different modes for doing this. The cryptic names of
modes are mathematical formulas, where *real* means real part of the
latest orbit, *imag* imaginary part. *zmag* takes magnitude of the
latest value. The *Decomposition-like* method uses angle of the orbit.
Also truecolor incoloring modes are available.

   In the scripting language, incoloring mode is specified by the
integer value with following meaning:

*0*
     0

*1*
     zmag

*2*
     Decomposition-like

*3*
     real/imag

*4*
     abs(abs(c)-abs(r))

*5*
     cos(mag)

*6*
     mag*cos(real^2)

*7*
     sin(real^2-imag^2)

*8*
     atan(real*imag*creal*cimag)

*9*
     squares

*10*
     Truecolor. To set exact parameters for truecolor coloring use
     `tcolor'. *Note tcolor::.

   *Available as*: command line option, command


File: xaos.info,  Node: outcoloring,  Next: tcolor,  Prev: incoloring,  Up: fractal

Outside coloring mode
---------------------

 - Function: outcoloring INTEGER

   Concept of outcoloring modes is similar to inside coloring mode but
for areas outside set. The value of latest orbit is used to calculate
color of pixel. This should make image more interesting. You might try
tutorial "Outcoloring modes" to see some examples.

   The cryptic names of modes are mathematical formulas, where *real*
means real part of the latest orbit, *imag* imaginary part. *binary
decomposition* uses different color in case imaginary part of orbit is
lower than zero, *smooth* attempts to remove the stripes. Also
truecolor coloring modes are available.

   In the scripting language, incoloring mode is specified by the
integer value with following meaning:

*0*
     iter

*1*
     iter+real

*2*
     iter+imag

*3*
     iter+real/imag

*4*
     iter+real+imag+real/imag

*5*
     binary decomposition

*6*
     biomorphs

*7*
     potential

*8*
     color decomposition

*9*
     smooth

*10*
     True-color outcoloring mode. To set exact parameters for truecolor
     coloring use `outtcoloring'. *Note tcolor::.

   *Available as*: command line option, command


File: xaos.info,  Node: tcolor,  Prev: outcoloring,  Up: fractal

Truecolor coloring mode
-----------------------

 - Function: intcoloring INTEGER

 - Function: outtcoloring INTEGER

   Truecolor coloring modes are similar to incolor and <a
outcoloring>outcolor</a> coloring modes. The difference is, that they
don't use palette, but calculates directly three components--red, green
and blue.  This lets you to display more information about fractal and
produces quite interesting results. At 8bpp displays you need to enable
<a palettef>palette emulator filter</a> first to see anything. You
might try tutorial "Truecolor coloring modes" to see some examples.

   The cryptic names of formulas are always three mathematical formulas
(each for every color component), where *real* means real part of the
latest orbit, *imag* imaginary part.

   To enable inside/outside truecolor coloring mode in scripting
language, set `incoloring'/`outcoloring' value to 10 (truecolor coloring
mode).

   Number select formula as follows:

*0*
     black

*1*
     re*im sin(re^2) angle

*2*
     sin(re) sin(im) sin(square)

*3*
     hsv

*4*
     hsv2

*5*
     cos(re^c) cos(im^2) cos(square)

*6*
     abs(re^2) abs(im^2) abs(square)

*7*
     re*im re*re im*im

*8*
     abs(im*cim) abs(re*cre) abs(re*cim)

*9*
     abs(re*im-csqr) abs(re^2-csqr) abs(im^2-csqr)

   *Available as*: command line option, command


File: xaos.info,  Node: calc,  Next: mfilter,  Prev: fractal,  Up: menus

Calculation
===========

   This menus contains functions to control calculation parameters such
as maximal number of iteration or periodicity checking.

* Menu:

* range::	Solid guessing
* dynamic::	Dynamic resolution
* periodicity::	Periodicity checking
* maxiter::	Iterations
* fastjulia::	Fast julia mode
* dynamic::	Dynamic resolution
* rotate::	Rotation


File: xaos.info,  Node: range,  Next: periodicity,  Up: calc

Solid guessing range
--------------------

 - Function: range INTEGER

   XaoS performs an solid guessing optimization: in case that all
corners of rectangle has same color it expect that whole rectangle is
solid and don't calculate points inside set. This optimization saves
lots of calculation, but sometimes introduces errors. This value alters
size of maximal rectangle, which can be guessed. Default value is 4,
use 0 to disable this feature.

   *Available as*: command line option, command


File: xaos.info,  Node: periodicity,  Next: maxiter,  Prev: range,  Up: calc

Periodicity checking
--------------------

 - Function: periodicity BOOL

   Periodicity checking is one of way to speed up calculation. Areas
inside set needs `maxiter' iterations to calculate, that point is most
probably inside set. One of tricks to avoid this calculation is
periodicity checking. Often the trajectory of orbit gets into cycle,
which you might detect and stop calculation, since it is sure, that
orbit will never leave it.

   Implementation of this method is quite problematic. It slows down in
cases, where cycles are not found and also checking of cycle is quite
hard work.  Because of inexact calculations, cycle is never exact, so
you need to use some error value. Higher error value means, that cycle
will be detected sooner, whole lower error value means more exact
calculation. Higher values introduces serious mistakes especially at
the front of the Mandelbrot set. XaoS detects this value automatically
and it is correct for the most cases, but sometimes it might be wrong.
Also other optimizations in XaoS (such as boundary trace) don't give
much chance to this method, since areas inside set are usually not
calculated.

   Thats why advantages of this method are disputable. You might
experiment with enabling/disabling it. Sometimes it is faster when
enabled, sometimes when disabled. Also this method works only in the
case incoloring methods are disabled and just at certain fractal types.

   You might try tutorial "Escape time fractals" for more information
about calculation of fractal.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: maxiter,  Next: fastjulia,  Prev: periodicity,  Up: calc

Iterations
----------

 - Function: maxiter INTEGER

   When fractal set is calculated, an trajectory of orbit is examined
for each point. In case orbit leaves to infinity, point is outside set.
Otherwise orbit is inside set. For exact calculation you need to know
whole trajectory of orbit, which has infinite number of positions for
areas inside set. So fractal can not be calculated exactly. By default
XaoS calculates maximally 170 positions (iterations) and then gives up
and in case, point is still inside the bail-out, it guesses, that point
is inside set.

   When zoomed into detail area, this value should become low and
fractal will be boring. You might try to increase this value (and
decrease speed of calculation) if you want to get image interesting
again.

   You might try tutorial "Escape time fractals" for more information
about calculation of fractal.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: fastjulia,  Next: dynamic,  Prev: maxiter,  Up: calc

Fast julia mode
---------------

 - Function: fastjulia BOOL

   By default, changing of seed for the julia set requires
recalculation of the image (which is quite slow). It is nice effect to
change seed smoothly and make morphing animations. XaoS has special
algorithm, which can calculate such morphings at real-time. It is very
inexact, but it is good for first preview.

   If you want to select good seedpoint, enable fast julia mode and
find some nice place by dragging first mouse button.  Then change to
the julia mode to get exact image.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: dynamic,  Next: rotate,  Prev: fastjulia,  Up: calc

Dynamic resolution
==================

 - Function: fastmode KEYWORD

   XaoS performs many optimizations, but quite often it is not enough.
In order to keep high framerate, XaoS automatically lowers the
resolution and increases it back in case he has some free time. This
feature is by default enabled in animation, but you might also enable
it for the new images (then it creates nice effects when image is
recalculated) or disable is completely if you don't like it.

   Keyword should be one of the following:
*`'never'*
     Disable dynamic resolution

*`'animate'*
     Use only for animations (default)

*`'new'*
     Use also for new images


File: xaos.info,  Node: rotate,  Prev: dynamic,  Up: calc

Image rotation
==============

   XaoS has also support for image rotation. The image should be
rotated to arbitrary angle. By default changing of angle requires
recalculation of the whole screen, but when *fast rotation mode* is
enabled, angle should be changed smoothly. In this mode XaoS calculates
larger non-rotated image and rotates it later, so it increases memory
requirements and slows down, so it should be disabled, when rotation is
not used.

   User interface should be set to two rotation modes--*rotate by
mouse* when you should by dragging first mouse button change angle, or
*continuous rotation mode*, where image is rotated continuously.  You
might use arrow keys to change speed.

 - Function: fastrotate BOOL

   This function should be used to enable and disable fast rotation mode
*Available as*: command line option, command

Automatic rotation
------------------

 - Function: autorotate BOOL

   Use this function to enable continuous rotation. In the scripting
language you might use also function `morphangle' to get similar effect.

 - Function: rotationspeed FLOAT

   Specify continuous rotation speed. Speed is set in the angle per
seconds value.  Negative values are allowed and means opposite direction

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: mfilter,  Next: ui,  Prev: calc,  Up: menus

Filters
=======

   Filters are post-calculation effect applied to the resulting image.
They should perform effects like motion-blur, emulation of different
videomode and such. You might try also an tutorial about filters.

* Menu:

* filter::	Filter command
* edge::	Edge detection
* edge2::	Edge detection2
* starfield::	Starfield
* stereogram::	Random dot stereogram
* interlace::	Interlace filter
* blur::	Motionblur
* emboss::	Emboss
* palettef::	Palette emulator
* anti::	Antialiasing
* truecolor::	Truecolor emulator


File: xaos.info,  Node: filter,  Next: edge,  Up: mfilter

Filter command
--------------

 - Function: filter KEYWORD BOOL

   This command should be used to enable/disable various filters. *Note
mfilter::.  *Keyword* specifies filter and should be one of the
following:

*`'edge'*
     Edge detection

*`'edge2'*
     Edge detection2

*`'starfield'*
     Starfield

*`'stereogram'*
     Random dot stereogram

*`'interlace'*
     Interlace filter

*`'blur'*
     Motionblur

*`'emboss'*
     Emboss

*`'palette'*
     Palette emulator

*`'anti'*
     Antialiasing

*`'truecolor'*
     Truecolor

   *Available as*: command


File: xaos.info,  Node: edge,  Next: edge2,  Prev: filter,  Up: mfilter

Edge detection
--------------

   This filter performs standard edge detection algorithm. Solid areas
are filed in black color. This produces very interesting results at
some fractals.  This version of filter produces relatively wide lines,
so it is useful especially in the higher resolution. The filter edge
detection2 makes lines better for the low resolution modes.

   *Available as*: menu item, command line option


File: xaos.info,  Node: edge2,  Next: starfield,  Prev: edge,  Up: mfilter

Edge detection2
---------------

   This filter performs standard edge detection algorithm. Solid areas
are filed in black color. This produces very interesting results at
some fractals.  This version of filter produces relatively tight lines,
so it is useful especially in the lower resolution. The filter edge
detection2 makes lines better for the high resolution modes.

   *Available as*: menu item, command line option


File: xaos.info,  Node: starfield,  Next: stereogram,  Prev: edge2,  Up: mfilter

Starfield
---------

   Starfields filter generates random stars depends at the number of
iterations required to calculate of points. Choose your favorite spiral
fractal and enable this filter to get galaxy.

   *Available as*: menu item, command line option


File: xaos.info,  Node: stereogram,  Next: interlace,  Prev: starfield,  Up: mfilter

Random dot stereogram
---------------------

   Fractal images are also good as base for random dot stereogram. In
case you don't know what this mean, please point your browser to
altavista or other searching engine and find some article about this
images, because browsing such images is not easy. They makes possible
to generate three dimensional images at normal monitor without any
additional hardware.

   XaoS is also able to generate this images in animation so you may use
all normal XaoS functions except palette changing/rotation, because this
is unnecessary. To make animation yet more exciting XaoS emulates
"falling" into the set. So during zooming distance from set is getting
lower and lower. But never lets you fall down so when set reaches level
of your monitor distance is changed again and you are far away.

   To make this in real sizes xaos needs to know *exact sizes of your
monitor*. Because most platforms does not know this values you need to
use *command line options* to tune this. Otherwise you should have
problems with seeing anything in images generated by XaoS (in case your
monitor is too big or resolution low). Or images are not as deep as
normaly (in case your monitor small or resolution high).

   By default xaos expect my 15" monitor (29.0cm x 21.5 cm). Another
problem is virtual screen supported by some windowed environments(like
X11) that makes program think that resolution is higher and you see
just part of this screen. This cause problem with recalculation screen
size to pixel size.

   The worst think you should do at all is to run full-screen XaoS in
some graphical window(windows 95 or OS/2 ?) where XaoS don't know that
real size of his window is different.

   Following command line options are provided for this.

*`-screenwidth', `-screenheight'*
     lets you specify size of your screen in centimeters. Note that you
     need to specify size of image at you monitor. Not size with some
     borders or such.

*`-pixelwidth', `-pixelheight'*
     lets you specify exact size of one pixel in cases I described
     bellow.

   This options are used by some other parts of XaoS too. So you should
use them even you don't want to see stereograms. You should write small
starting script that passes correct parameters.

   Another problem should happen when *window is smaller than 8cm*. In
this case you will be unable to see anything.

   So correct way to see XaoS stereogram is:
*1*
     start XaoS with options specifying correct size of screen or pixel

*2*
     Sit 60cm away from monitor

*3*
     In case you use windowed environment resize XaoS window to make it
     wider than, say, 15 cm.

*4*
     Enable filter (by pressing `E')

*5*
     concentrate far away from monitor (you should try to use your
     reflection) until random points will get into different distances
     and you will see Mandelbrot

*6*
     Carefully use you mouse to zoom into interesting areas (it is easy
     to lose concentration when you are not trained. Or use autopilot.

*7*
     Enjoy animation :)

   Last problem should be that fractal is deformed. This can be caused
by wrong geometry of your monitor. Eye is extremely sensible for
distances so should see very small changes in geometry that are normally
invisible.

   *Available as*: menu item, command line option


File: xaos.info,  Node: interlace,  Next: blur,  Prev: stereogram,  Up: mfilter

Interlace filter
----------------

   Interlace filter reduces horizontal resolution and in each frame
draws just even or odd lines. This speeds up calculation and in higher
resolutions produces motion-blur like effect.

   *Available as*: menu item, command line option


File: xaos.info,  Node: blur,  Next: emboss,  Prev: interlace,  Up: mfilter

Motionblur
----------

   Motion blur mixes current frame with previous ones in order to
produce motion-blur effect. It might be quite slow in 16bpp truecolor
modes. Best results produces probably in 8bpp modes, so you might try
to enable palette filter first

   *Available as*: menu item, command line option


File: xaos.info,  Node: emboss,  Next: palettef,  Prev: blur,  Up: mfilter

Emboss
------

   This is an standard emboss filter well known from programs such as
GIMP or Photoshop. It produces nice results especially with smooth
incoloring mode. *Note incoloring::.

   *Available as*: menu item, command line option


File: xaos.info,  Node: palettef,  Next: anti,  Prev: emboss,  Up: mfilter

Palette emulator
----------------

   XaoS should work in palette or truecolor mode. Both modes have its
advantages and disadvantages. Palette mode allows effect such as
palette rotation and truecolor mode allows smoother incoloring and
outcoloring modes and truecolor coloring mode. *Note tcolor::. If your
display is truecolor, you might enable this filter to get palette
emulation.

   *Available as*: menu item, command line option


File: xaos.info,  Node: anti,  Next: truecolor,  Prev: palettef,  Up: mfilter

Antialiasing
------------

   Antialiasing is one of techniques how to increase image quality.
XaoS then calculates four values for each pixel and uses average of
them. This makes boundaries look better.

   This filter slows down a much and highly increases memory
requirements. But it is useful, when you want to save better images.
Antialiasing helps a much when you want to encode JPEG or MPEG files.
They are much shorter then.

   *Available as*: menu item, command line option


File: xaos.info,  Node: truecolor,  Prev: anti,  Up: mfilter

Truecolor emulator
------------------

   XaoS should work in palette or truecolor mode. Both modes have its
advantages and disadvantages. Palette mode allows effect such as
palette rotation and truecolor mode allows smoother incoloring and
outcoloring modes and truecolor coloring mode. *Note tcolor::. If your
display is 8bpp, you might enable this filter to get truecolor
emulation.

   More information about filters

   *Available as*: menu item, command line option


File: xaos.info,  Node: ui,  Next: misc,  Prev: mfilter,  Up: menus

UI
==

   This menus contains functions to control user interface layer of
XaoS such as zooming speed and such.

* Menu:

* speed::	Zooming speed
* letterspersec::	Letters per second
* autopilot::	Autopilot
* recalculate::	Recalculate
* interrupt::	Interrupt
* nogui::	Disable XaoS's builtin GUI
* status::	Status
* ministatus::	Ministatus


File: xaos.info,  Node: speed,  Next: letterspersec,  Up: ui

Zooming speed
-------------

 - Function: speed FLOAT

   Change zooming speed. 1 means default speed, 2 means twice as fast.

   *Available as*: menu item, command line option, command

   In the scripting language you might use following functions for
better control of speed.

 - Function: maxstep FLOAT

   Selects speed of zooming/UN-zooming. Step specifies how large amount
of range will be taken away each 1/20 of second.  (0 means nothing, 1
means everything--this value is incorrect) Higher values means faster
zooming.

   *Available as*: command

 - Function: speedup FLOAT
   When zooming/UN-zooming every 1/20 of second the `speedup' value is
added to current step until `maxstep' is reached. So this value selects
speedup/slowdown of animation. Both this functions are more for internal
use of XaoS then for manually wrote scripts.

   *Available as*: command


File: xaos.info,  Node: letterspersec,  Next: autopilot,  Prev: speed,  Up: ui

Letters per second
------------------

 - Function: letterspersec INTEGER

   Speed of subtitles for function `textsleep'. *Note textsleep::. User
can set this value to fit his own needs. It should be changed also by
arrow keys during animation replay.

   *Available as*: command line option, command


File: xaos.info,  Node: autopilot,  Next: recalculate,  Prev: letterspersec,  Up: ui

Autopilot
---------

 - Function: autopilot BOOL

   To make XaoS yet more impressive we did special autopilot that
automatically drives into interesting boundaries of set. So you should
press `A', play your favorite music, drink coffee and relax. I never
tried this but it should be really relaxing! Many pictures in XaoS
gallery are discovered using autopilot.

   Autopilot has also some additional features. It return back in case
zoomed picture is not interesting anymore. Also is able to detect, when
zoomed into really boring part or reached limit of floating point
numbers and restart zooming.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: recalculate,  Next: interrupt,  Prev: autopilot,  Up: ui

Recalculate
-----------

 - Function: recalculate

   Recalculate current fractal. This should be used when fractal at
screen is strange because of error propagation caused by solid
guessing. *Note range::.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: interrupt,  Next: nogui,  Prev: recalculate,  Up: ui

Interrupt
---------

 - Function: interrupt

   Interrupt current calculation.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: nogui,  Next: status,  Prev: interrupt,  Up: ui

Disable XaoS's builtin GUI
--------------------------

 - Function: nogui BOOL

   Disable XaoS menus and dialogs. This function should be used by
external GUI programs, that changes parameters from pipe. See hacker's
manual (`xaosdev.texinfo') for more details.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: status,  Next: ministatus,  Prev: nogui,  Up: ui

Status
------

 - Function: status BOOL

   Enable/disable status information. Status displays some useful
information about current fractal, such as viewpoint etc.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: ministatus,  Prev: status,  Up: ui

Ministatus
----------

 - Function: ministatus BOOL

   Enable/disable status line. This status contains basic information
such as how much you are zoomed or framerate.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: misc,  Next: helpmenu,  Prev: ui,  Up: menus

Misc
====

   Miscelanely functions.

* Menu:

* command::	Command
* renderanim::	Render animation
* clearscreen::	Clear screen
* display::	Display fractal
* text::	Display text
* color::	Color
* xtextpos::	Horizontal text position
* ytextpos::	Vertical text position
* textposition::	Text position
* message::	Message


File: xaos.info,  Node: command,  Next: renderanim,  Up: misc

Command
-------

   You might invoke all XaoS functions also using command. This command
has same syntax as in XaoS animation files

   *Available as*: menu item


File: xaos.info,  Node: renderanim,  Next: clearscreen,  Prev: command,  Up: misc

Render animation
----------------

   Render animation to image files. See How to encode MPEG file for
description of the options.

   *Available as*: menu item,


File: xaos.info,  Node: clearscreen,  Next: display,  Prev: renderanim,  Up: misc

Clear screen
------------

 - Function: clearscreen

   Clear screen. To display fractal again, use `display'. *Note
display::.  This function is useful mainly for tutorials and similar
animations.

   *Available as*: menu item, command


File: xaos.info,  Node: display,  Next: text,  Prev: clearscreen,  Up: misc

Display fractal
---------------

 - Function: display

   Display fractal. This functions disables effect of `clearscreen',
line drawing and text output functions.

   *Available as*: menu item, command


File: xaos.info,  Node: text,  Next: color,  Prev: display,  Up: misc

Display text
------------

 - Function: text STRING

   Display given text at screen. This function is useful mainly for
tutorials.  Text should be cleared by printing space, `clearscreen', or
`display' function. You might also use `textposition' command to select
text position.

   To wait time user needs to read text, you might use function
`textsleep'. *Note textsleep::.

   Example:

     (clearscreen)
     (textposition 'center 'middle)
     (text "Welcome into my animation")
     (textsleep)
     (display)

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: color,  Next: textposition,  Prev: text,  Up: misc

Color
-----

 - Function: color KEYWORD

   Change color of texts and lines. *Keyword* should be one of the
following: `'white', `'black' and `'red'.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: textposition,  Next: message,  Prev: color,  Up: misc

Text position
-------------

 - Function: textposition KEYWORD KEYWORD

   Select position for text. *Note text::. First keyword specifies
horizontal position and second vertical. Horizontal position should be
one of the following: `'left', `'center', `'right'. Vertical one of
following: `'top', `'middle', `'bottom'.

   *Available as*: command line option, command


File: xaos.info,  Node: message,  Prev: textposition,  Up: misc

Message
-------

 - Function: message STRING

   This function is almost identical to function `text'. *Note text::.
It uses message catalogs in the `catalog' directory to translate
message.  It should be used only in the multi-lingual XaoS tutorials.

   *Available as*: command line option, command


File: xaos.info,  Node: helpmenu,  Next: xtextpos,  Prev: misc,  Up: menus

Help
====

   This menu contains help and tutorials.


File: xaos.info,  Node: xtextpos,  Next: ytextpos,  Prev: helpmenu,  Up: menus

Horizontal text position
========================

   Select horizontal position for text. *Note text::. It should be
drawn at the left, in center or at right.


File: xaos.info,  Node: ytextpos,  Next: mformula,  Prev: xtextpos,  Up: menus

Vertical text position
======================

   Select vertical position for text. *Note text::. It should be drawn
at the top, middle or bottom of screen.


File: xaos.info,  Node: mformula,  Next: palettemenu,  Prev: ytextpos,  Up: menus

formulae
========

   Each escape time fractal has it's own formula. XaoS supports
following formulas:

* Menu:

* mandel::	Mandelbrot
* mandel3::	Mandelbrot^3
* octal::	Octal
* newton::	Newton
* barnsley::	Barnsley1
* phoenix::	Phoenix
* magnet::	Magnet


File: xaos.info,  Node: mandel,  Next: mandel3,  Up: mformula

Mandelbrot
----------

   Mandelbrot set is the most famous escape time fractal ever. It has
simple formula z=z^2+c. You might also try tutorial "the Mandelbrot
set".

   *Available as*: menu item, command line option


File: xaos.info,  Node: mandel3,  Next: octal,  Prev: mandel,  Up: mformula

Mandelbrot^3--Mandelbrot^6
--------------------------

   This fractal uses simple modification of the standard Mandelbrot
set' formula. It uses z=z^3+c instead of z=z^2+c.

   Other derivations of the Mandelbrot set (Mandelbrot^4 etc.) uses
even higher powers. You might also try tutorial "higher power
Mandelbrot sets".

   *Available as*: menu item, command line option


File: xaos.info,  Node: octal,  Next: newton,  Prev: mandel3,  Up: mformula

Octal
-----

   This is less known fractal, that Thomas discovered in Fractint. It
has quite interesting shape mainly when displayed in the alternative <a
mplane>planes</a>. You might try tutorial "Octo".

   *Available as*: menu item, command line option


File: xaos.info,  Node: newton,  Next: barnsley,  Prev: octal,  Up: mformula

Newton
------

   This is an Newton's approximation method for finding roots of
polynomial. It uses polynomial x^3=1 and counts number of iterations
needed to reach approximate value of the root. More information are in
tutorial "Newton".

   This fractal don't have Julia sets, but XaoS is able to generate
Julia-like sets, which are also very interesting (sometimes also called
"Nova formulae").

   *Available as*: menu item, command line option


File: xaos.info,  Node: barnsley,  Next: phoenix,  Prev: newton,  Up: mformula

Barnsley1
---------

   This is formula by Michael Barnsley. It produces very nice
crystalline Julia sets. You might also try tutorial "Barnsley's
formula".

   *Available as*: menu item, command line option


File: xaos.info,  Node: phoenix,  Next: magnet,  Prev: barnsley,  Up: mformula

Phoenix
-------

   This is formula produces very nice Julia sets.  You might also try
tutorial "Phoenix".

   *Available as*: menu item, command line option


File: xaos.info,  Node: magnet,  Prev: phoenix,  Up: mformula

Magnet
------

   This is formula that comes from the theoretical physics.  It is
derived from the study of theoretical lattices in the context of
magnetic renormalization transformations.  You might also try tutorial
"Magnet".

   *Available as*: menu item, command line option


File: xaos.info,  Node: palettemenu,  Prev: mformula,  Up: menus

Palette
=======

   Functions to change fractal's palette.

* Menu:

* defpalette::	Default palette
* randompalette::	Random palette
* palette::	Custom palette
* cycling::	Color cycling
* shiftpalette::	Shift palette


File: xaos.info,  Node: defpalette,  Next: randompalette,  Up: palettemenu

Default palette
---------------

 - Function: defaultpalette NUMBER

   Create an default palette. In the scripting language number
specifies how much is palette shifted.

   Note that changing of palette in the truecolor modes forces
recalculation of the whole screen. To avoid this, you might enable
palette emulation filter first.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: randompalette,  Next: palette,  Prev: defpalette,  Up: palettemenu

Random palette
--------------

 - Function: randompalette

   Create an random palette. XaoS will automatically pick one of his
algorithms for generating palettes and create one.

   Note that changing of palette in the truecolor modes forces
recalculation of the whole screen. To avoid this, you might enable
palette emulation filter first.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: palette,  Next: cycling,  Prev: randompalette,  Up: palettemenu

Custom palette
--------------

 - Function: palette INTEGER INTEGER INTEGER

   Custom palette lets you re-create some of the random palettes. First
value specifies algorithm which should be currently one of the
following:
*0*
     Default palette

*1*
     Black to color grades

*2*
     Black to color to white grades

*3*
     Cubistic-like algorithm.  Seed specifies an random seed for
palette. Different seeds generates different palettes. Last value is
amount how much palette is shifted.

   Note that changing of palette in the truecolor modes forces
recalculation of the whole screen. To avoid this, you might enable
palette emulation filter first.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: cycling,  Next: shiftpalette,  Prev: palette,  Up: palettemenu

Color cycling
-------------

 - Function: cycling BOOL

   Color cycling is old and simple effect to animate fractals. It makes
nice effect mainly at the standard Mandelbrot set. At truecolor
displays, color cycling fails to initialize (since they don't have
palette). You might enable palette emulation filter to make it possible.

   *Available as*: menu item, command line option, command

   In the user interface, colors should be also cycled in the opposite
direction by function "*Reversed color cycling*".

   To control cycling speed, you might use arrow keys or following
function "*Color cycling speed*".

   *Available as*: menu item

 - Function: cyclingspeed INTEGER

   Integer value specifies skips per second. It should be also negative
to select cycling in the opposite direction.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: shiftpalette,  Prev: cycling,  Up: palettemenu

Shift palette
-------------

 - Function: shiftpalette INTEGER

   Shift palette by specified color cells. This should be used to tune
palette position at fractal. Also functions *Shift one forward* and
*Shift one backward* should be used for finetunning.  Note that shifted
and rotated palettes should look in the different way at different
displays (because of different maximal palette size).

   Shifting of palette at truecolor displays causes recalculation of
screen. To avoid this, you might use palette emulation filter. *Note
palettef::.

   *Available as*: menu item, command line option, command


File: xaos.info,  Node: authors,  Next: lists,  Prev: menus,  Up: Top

Credits
*******

   (alphabetically)
*Eric Courteau (ecourteau@cplus.fr)*
     Francais.cat (translation of tutorials)

*Radek Doulik (rodo@atrey.karlin.mff.cuni.cz)*
     GTK interface, windowid patches

*Martin Dozsa (madsoft@centrum.cz)*
     Czech translation of menus

*Tim Goodwin (tgoodwin@cygnus.co.uk)*
     english.cat corrections

*Jan Hubicka (jh@ucw.cz)*
     Zooming routines, ugly interface, palettes,drivers, autopilot,
     filters, documentation, tutorials, maitainer etc...

*Jens Kilian (jjk@acm.org)*
     BeOS driver, deutsch.cat

*Thomas A. K. Kjaer (takjaer@imv.aau.dk)*
     OS/2 ports (320x200 graphics and AA-lib)

*Zoltan Kovacs (kovzol@math.u-szeged.hu)*
     Internationalization

*Andreas Madritsch (amadritsh@datacomm.ch)*
     New fractal types, bailout

*Thomas Marsh*
     First zoomer, formulas, planes, X11 driver, inversions, many ideas

*David Meleedy*
     Grammatical and spelling fixed version of `xaos.6'

*Paul Nasca (paulnasca@email.ro)*
     Ministatus improvement

*Nix (nix@esperi.demon.co.uk)*
     Grammatical and spelling fixed version xaos.hlp and other files

*Terje Pedersen (terjepe@login.eunet.no)*
     Amiga port

*Cesar Perez (oroz@users.sourceforge.net)*
     Spanish translations

*Fabrice Premel (premelfa@etu.utc.fr)*
     Periodicity checking

*Jan Olderdissen (jan@olderdissen.com)*
     Win32 port

*Pavel Tzekov (paveltz@csoft.bg)*
     Win32 support

*Charles Vidal*
     Tcl/Tk interface

*Tapio K. Vocaldo(taps@rmx.com)*
     Macintosh port

   To contact authors you might also use the mailing list. *Note
lists::.  Or following snail-mail:

     Jan Hubicka
     Dukelskych bojovniku 1944
     Tabor 390 03
     Czech Republic


File: xaos.info,  Node: lists,  Next: index,  Prev: authors,  Up: Top

Mailing-lists:
**************

   Currently not available. :-(


File: xaos.info,  Node: index,  Prev: lists,  Up: Top

Index of functions
******************

* Menu:

* angle:                                 uiview.
* animateview:                           animateview.
* autopilot:                             autopilot.
* autorotate:                            rotate.
* clearline:                             linemenu.
* clearlines:                            linemenu.
* clearscreen:                           clearscreen.
* color:                                 color.
* cycling:                               cycling.
* cyclingspeed:                          cycling.
* defaultpalette:                        defpalette.
* display:                               display.
* fastjulia:                             fastjulia.
* fastmode:                              dynamic.
* fastrotate:                            rotate.
* filter:                                filter.
* formula:                               formula.
* incoloring:                            incoloring.
* initstate:                             initstate.
* intcoloring:                           tcolor.
* interrupt:                             interrupt.
* julia:                                 uimandelbrot.
* juliaseed:                             uimandelbrot.
* letterspersec:                         letterspersec.
* line:                                  linemenu.
* linekey:                               linemenu.
* load:                                  load.
* loadexample:                           loadexample.
* maxiter:                               maxiter.
* maxstep:                               speed.
* message:                               message.
* ministatus:                            ministatus.
* morphangle:                            morphangle.
* morphjulia:                            morphjulia.
* morphlastline:                         linemenu.
* morphline:                             linemenu.
* morphview:                             morphview.
* moveview:                              moveview.
* nogui:                                 nogui.
* outcoloring:                           outcoloring.
* outtcoloring:                          tcolor.
* palette:                               palette.
* periodicity:                           periodicity.
* perturbation:                          uiperturbation.
* plane:                                 plane.
* quit:                                  quit.
* randompalette:                         randompalette.
* range:                                 range.
* recalculate:                           recalculate.
* record:                                record.
* rotationspeed:                         rotate.
* savecfg:                               savecfg.
* saveimg:                               saveimg.
* savepos:                               savepos.
* shiftpalette:                          shiftpalette.
* speed:                                 speed.
* speedup:                               speed.
* status:                                status.
* stop:                                  zoom.
* text:                                  text.
* textposition:                          textposition.
* textsleep:                             textsleep.
* unzoom:                                zoom.
* usleep:                                usleep.
* view:                                  uiview.
* wait:                                  wait.
* zoom:                                  zoom.
* zoomcenter:                            zoom.



Tag Table:
Node: Top431
Node: Overview1469
Node: Why?1662
Node: What?3774
Node: tutorial4325
Node: controls12084
Node: mpeg13847
Node: format20491
Node: writehelp25712
Node: xshl26215
Node: drivers27353
Node: aa27946
Node: dos30410
Node: dX-fullscreen32788
Node: dX-window33873
Node: ggi33958
Node: plan934477
Node: SVGAlib35573
Node: win3236918
Node: X1138748
Node: menus39698
Node: root40550
Node: animroot40611
Node: stopreplay40885
Node: plc41025
Node: load41376
Node: linemenu41695
Node: animf44419
Node: animateview45082
Node: morphview45599
Node: morphjulia46646
Node: moveview47252
Node: morphangle47472
Node: zoom48127
Node: time48996
Node: usleep49423
Node: textsleep49790
Node: wait50307
Node: file50922
Node: loadpos51188
Node: savepos51435
Node: record51863
Node: play52338
Node: saveimg52539
Node: loadexample53173
Node: savecfg53516
Node: quit53939
Node: fractal54103
Node: formula54630
Node: uimandelbrot55350
Node: uiperturbation56764
Node: uiview57924
Node: initstate59874
Node: plane60347
Node: incoloring61425
Node: outcoloring62702
Node: tcolor63960
Node: calc65367
Node: range65804
Node: periodicity66366
Node: maxiter68033
Node: fastjulia69051
Node: dynamic69739
Node: rotate70468
Node: mfilter71827
Node: filter72423
Node: edge73050
Node: edge273547
Node: starfield74050
Node: stereogram74394
Node: interlace77809
Node: blur78164
Node: emboss78555
Node: palettef78874
Node: anti79389
Node: truecolor79955
Node: ui80492
Node: speed80904
Node: letterspersec81843
Node: autopilot82228
Node: recalculate82979
Node: interrupt83331
Node: nogui83551
Node: status83950
Node: ministatus84252
Node: misc84544
Node: command84936
Node: renderanim85164
Node: clearscreen85412
Node: display85735
Node: text86018
Node: color86670
Node: textposition86959
Node: message87409
Node: helpmenu87778
Node: xtextpos87910
Node: ytextpos88153
Node: mformula88394
Node: mandel88735
Node: mandel389019
Node: octal89472
Node: newton89808
Node: barnsley90338
Node: phoenix90629
Node: magnet90870
Node: palettemenu91215
Node: defpalette91501
Node: randompalette91974
Node: palette92471
Node: cycling93282
Node: shiftpalette94232
Node: authors94914
Node: lists96247
Node: index96795

End Tag Table
