%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%main
<head>XaoS</head>
<center>
Welcome to XaoS - an real-time fractal zoomer. 
</center>
<p>
XaoS is free software. You are welcome to redistribute it under certain
<a gpl>conditions</a>. It also means, that you may get <emph>sources</emph>
and help to its <a authors>authors</a> with the 
<a devel>development</a>.
<p>
If you don't know, what fractal is, please try tutorial ``<tutor fractal.xaf>An introduction to fractals</tutor>''. 
If you are new to XaoS, you should try it too, since it is quite good example of XaoS's features. 
<p>
To see more about XaoS features, try tutorial 
``<tutor features.xaf>XaoS features overview</tutor>''. 
<p>
Both this tutorials are divided into chapters and available from help menu.
So you don't need to watch them all at once (they are about half an hour long)
<head>Where to get up-to date information</head>
XaoS home-page is available at <tt>http://www.paru.cas.cz/~hubicka/XaoS</tt>
and we also have three <a lists>mailing lists</a>.
<head>Other thinks to read</head>
<center>
<a tutorial>Tutorial</a><p>
<a controls>Basic controls</a><p>
<a writehelp>How to write this help file</a><p>
<a mpeg>How to encode MPEG files</a><p>
<a drivers>Driver specific documentation</a><p>
<a format>XaoS' file format</a><p>
<a menus>Menus, commands and parameter index</a><p>
</center>



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mpeg

<head>How to encode MPEG files from XaoS</head>
<p>
To save sequence, make <tt>xaf</tt> file first. (the easiest way to do this is
to use <emph>record</emph> function in file menu) Then you need to render sequence.
XaoS can output sequences of ordinary <tt>PNG</tt> images, that should be later
used by MPEG encoder.
<p>
<head>Generating sequence for MPEG</head>
<p>
To encode sequence use command as follows:
<p><tt>
xaos -render [filename] -size 352x240 -antialiasing 
       -renderframerate 24 -basename [basename]
</tt><p>
<tt>[filename]</tt> is name of <tt>xaf</tt> file, <tt>[basename]</tt> is name used as base for images.
XaoS add four digit number and extension automatically.
<p>
You might also want to change the resolution. 352x240 is the default size
for MPEG files, but other sizes works as well. Each dimension must be multiple
of 16.
<p>
Framerate should be also altered. MPEG supports just few selected framerates
(namely 23.976, 24, 25, 29.97, 30) so you might pick any of them.
<p>
<tt>-antialiasing</tt> is used to produce anti-aliased images. It takes much longer
time and much more memory to calculate them, but resulting images are better
for MPEG DCT compression and they are <emph>compressed about 3 times more</emph>.
(same is true about <emph>JPEG images</emph>)
<p>
At the other hand, the other XaoS rendering option <tt>-alwaysrecalc</tt> (which disables
XaoS's zooming optimizations) is <emph>not recommended</emph>. Sequence of animation contains
then quite a lot of extra information, which increases size of MPEG file, but because
of MPEG's lossy compression it is hard to see difference. So it don't worth
it.
<head>Rendered files</head>
Once you start it, XaoS will generate thousands of frames. They takes quite
long time to calculate and save, and consumes plenty of disc space.
(to render part 1 of tutorial you need about 60MB and half a hour of time).
<p>
All images are named <tt>[basename]framenum.png</tt>. For example <tt>intro0001.png</tt> is
first frame of animation intro. In case consetuctive frames are same, XaoS
don't save them. So some frames are missing. If your encoder can't handle
this, you will need to write simple script, which will do symbolic links.
<p>
List of all filenames is saved into file <tt>[basename].par</tt>, where each line is
name for the frame. The names repeats here if necessary, so you should use this
file to supply filenames to the encoder.

<head>Pattern file</head>

Some other files are generated as well. There is generated an <emph>pattern file</emph>,
which contains <emph>recommended order of P, B and I frames</emph>.
<p>
MPEG sequence consist of this three frames. The <emph>I frames</emph> are just images
saved in format similar to JPEG files. 
<p>
The <emph>P frames</emph> are images, which are
constructed from previous one (latest I or P frame). In case consetuctive
frames are similar (and in the animation they often are), the P frame takes
much less disc space than I frame.
<p>
The <emph>B frames</emph> are constructed from nearest previous P or I frame and next P or
I frame. They takes even less disc space, but they are quite hard to encode.
Also they are <emph>not used as previous frames</emph>, so their information is lost
once they are displayed. So they are usually rendered at lower quality then
P or I frame and used just to interpolate nearest frame and make animation
smoother. It is generally not good idea to make whole sequence just form B
frames.
<p>
Also using just P frames is generally not good idea. It makes file shorter,
but to jump into Nth frame of animation you need to <emph>recalculate all P and B frames
since latest I frame</emph>. Decoders often wants to jump into some frame (when
user wants, or in case they can't decode sequence in time), so you need
to have some I frames in the animation to make this possible. Mainly
because of the second purpose you need to place them quite often. Usually
they are used for every 15th frame or so. Because they costs quite a lot,
in my animations I usually use every 27th frame. To set this distance
use <tt>-iframedist</tt> option. It should be multiple of 3
<p>
XaoS generates recommended order of this frame based on the knowledge of
fractal motion. Situations where screen don't move at all are rendered
just from P frames (since jumping is usually not required here), situations
where screen changes completely (at least in XaoS's opinion) I frames are used
and in other standard sequence <tt>IBBPBBPBBPBBP...</tt> is used.
<p>
If your encoder supports this, you should supply this pattern for encoding to
squeeze out some bytes..

<head>Motion vector files</head>

XaoS also generates motion vector recommendation for the encoder. They are
useful for encoding of B and P frames.
<p>
In case some objects just moves at screen, motion vectors shows at their old
position, so no image needs to be saved.
<p>
Calculating of this motion vector is very significant task. In case you guess
them well, you increase quality and reduce file size, which is always great.
Calculation also takes lots of CPU and it is hard to get optimal vectors (it
just takes too long time).
<p>
XaoS know how does the fractals move, so he can calculate this vectors quite
easily. XaoS saves this information into <tt>*.p</tt> and <tt>*.b</tt> files. (<tt>*.p</tt> are for P
frames, <tt>*.b</tt> are for B frames). If your encoder supports this, you should
supply this vectors to increase quality. They are <tt>not exact</tt> (XaoS can do many
mistakes), but encoder should try to find his own vectors, try XaoS's ones and
pick the better one.
<p>
This technique saves quite a lot of bytes in fast zooming/UN-zooming
animations.. (where images moves more than 3 or 5 pixels per frame--since
most programs looks 10-20 pixels around for motion vectors)
<p>
To enable saving of motion vector files, add option
<tt>-rendervectors</tt>.

<head>Berkeley parallel MPEG encoder</head>

This is the encoder I use. It seems to be the best freely available software
encoder I've tested. It can generate quite small files, but it is rather slow.
It is available at Berkeley's FTP site <tt>mm-ftp.CS.Berkeley.EDU</tt> and called
<tt>mpeg_encode1.5b</tt>
<p>
It has lots of options to tune, so you should spend quite a lot of time with
playing with this. The configuration I use is in file <tt>doc/mpeg.param</tt>.
<p>
I've also done some patches that makes possible to use the pattern and motion
files generated from XaoS. The patch is in <tt>doc/mpeg_encode.patch</tt>. So if
you want to use this features (they are <emph>EXPERIMENTAL</emph>) you might apply this
patch and recompile encoder.
<p>
Once you filled the <tt>mpeg.param</tt> file (see comments inside), you should render
sequence using <tt>mpeg_encode [filename]</tt> and with luck you are done.





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%controls
<head>Basic controls</head>
By default mouse buttons works in following way:
<p>
<dl>
<dt>left<dd>zoom in
<dt>right<dd>zoom out  
<dt>middle<dd>move fractal using drag&drop style way
</dl>
<p>
This behavior should change. If you enable rotation, first button is used for rotating
fractals. Also in fast Julia mode first button is used to change seed.
<p>
If you don't have middle button, press both buttons to enable
emulation.
<p>
After few minutes of zooming you will probably reach end of precisity and
fractals will get boring. If you are getting strange big rectangles at screen,
you probably reached limit of numbers and there is no way to avoid this except
UN-zoom back and choose different area. It don't hurt so much, since you have
zoomed approximately.. 64 051 194 700 380 384, so there is quite a lot of areas to
explore. Algorithms with unlimited precisity exists, but they are still too
slow for real-time zooming.
<p>
In the other case you have reached an limit of iterations. The fractal is
calculated just approximately and in this case you need to increase number of
iterations (and decrease speed). This is done from menu or using arrow keys
<emph>Left</emph> and <emph>Right</emph>.
<p>
An <emph>Up</emph> and <emph>Down</emph> keys should be used to change zooming
speed. Note that higher speed costs more and image will be blocky.
<p>
Also this behavior changes. With palette cycling enabled, <emph>Left</emph>
and <emph>Right</emph> keys changes cycling speed, in continuous
rotation they changes speed of rotation.
<p>
All other functions are available from the menus, which (in the default
configuration) are displayed when you move mouse to the top of screen/window.
It is useful to learn an keys, which are displayed in gray color.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%writehelp
<head>How to write XaoS help files</head>
XaoS help lies in the file <tt>help/xaos.hlp</tt>. It is divided into parts,
where each is started by the <emph>keyword</emph> - word using it you activate
it. In the help file keywords are wrote using <tt>%keyword</tt>
<p>
If you are writing documentation about some command in XaoS function registry,
use same keyword, as the name of function in order to get context sensitive
help work.
<p>
<notex>
Help file uses special format called <a xshl>xshl</a>.
</notex>





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xshl
<head>xshl</head>
<emph>Xshl</emph> stands for <emph>XaoS simple hypertext language</emph>. It
uses similar tags to HTML. It is simpler and more restrictive in order to
make it easy to parse using various scripts. In C code you might use quite
universal library present in <tt>src/util/xshl.c</tt> to parse it.
<p>
Following tags are supported:
<p>
<dl>
<dt>head
<dd>make headings (should be at least at the begging of the page)
<dt>emph
<dd>emphatize
<dt>tt
<dd>Use non proportional font
<dt>br
<dd>Break line
<dt>p
<dd>Next paragraph
<dt>dl
<dd>Definition list
<dt>dt
<dd>Definition tag (should be used only inside definition list)
<dt>dd
<dd>Definition description (should be used only inside definition list)
<dt>center
<dd>align to center
<dt>right
<dd>align to right
<dt>red
<dd>change color to red (should not be used in help files)
<dt>black
<dd>change color to black (should not be used in help files)
<dt>white
<dd>change color to white (should not be used in help files)
<dt>a name
<dd>link to other help page
<dt>tutor name
<dd>activate tutorial
<dt>notex
<dd>Ignore this in texinfo manuals
</dl>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%authors

<head>Credits</head>
(alphabetically)
<dl>
<dt>Eric Courteau   (ecourteau@cplus.fr)
<dd>Francais.cat (translation of tutorials)
<dt>Radek Doulik    (rodo@atrey.karlin.mff.cuni.cz)
<dd>GTK interface, windowid patches
<dt>Tim Goodwin	(tgoodwin@cygnus.co.uk)
<dd>english.cat corrections
<dt>Jan Hubicka	(hubicka@paru.cas.cz) 
<dd>Zooming routines, ugly interface, palettes,drivers, autopilot, filters, documentation, tutorials, maitainer etc...
<dt>Jens Kilian	(jjk@acm.org)
<dd>BeOS driver, deutsch.cat
<dt>Thomas A. K. Kjaer(takjaer@imv.aau.dk)
<dd>OS/2 ports (320x200 graphics and AA-lib)
<dt>Thomas Marsh
<dd>First zoomer, formulas, planes, X11 driver, inversions, many ideas
<dt> David Meleedy
<dd>Grammatical and spelling fixed version of <tt>xaos.6</tt>
<dt>Terje Pedersen  (terjepe@login.eunet.no)
<dd>Amiga port
<dt>Fabrice Premel (premelfa@etu.utc.fr)
<dd>Periodicity checking
<dt>Jan Olderdissen (jan@olderdissen.com)
<dd>Win32 port
<dt>Pavel Tzekov (paveltz@csoft.bg)
<dd>Win32 support
<dt>Charles Vidal
<dd>Tcl/Tk interface
<dt>Tapio K. Vocaldo(taps@rmx.com)
<dd>Macintosh port
</dl>
<p>
To contact authors you might also use the <a lists>mailing list</a>.
Or following snail-mail:
<p><tt>
  Jan Hubicka<br>
  Dukelskych bojovniku 1944<br>
  Tabor 390 03<br>
  Czech Republic<br>
</tt><p>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%devel
<head>Development</head>
XaoS is free software. One of the most significant rights, its <a gpl>license</a>
grants to you is possibility to <emph>freely get, study and
improve</emph> its sources. They are available from the XaoS home-page.
<p>
If you want to do some development, you are encouraged to send your work back
to <a authors>authors</a> and in case it is well done, it will be added into
next release. All changes should be sent to my address:
<tt>hubicka@paru.cas.cz</tt>
<p>
XaoS has open development model. Development versions are available at ftp
site <emph>ftp.ta.jcu.cz</emph> in directory <emph>/pub/linux/hubicka/XaoS/experimental</emph>
so if you are interested in the development, you might try them. We also have an
<a lists>developers mailing list</a>, where you might subscribe, if you want
to be informed about latest development, discuss various thinks etc.
<p>
We need many developers. XaoS is quite easily extensible. You might read a bit
about its internals in the file <emph>doc/xaos.info</emph>. XaoS is also
portable, so if it don't work at your favorite platform (or there is just old
version available), you should quite easily port it.
<p>
We also need authors for tutorials, people who should translate
them into foreign language etc...


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%lists

<head>Mailing-lists:</head>
      XaoS now have following mailing lists at 
      majordomo@horac.ta.jcu.cz
<dl>
      <dt>xaos
	<dd>this list is for general xaos discusion 
	(ideas, questions, bugreports..)
      <dt>xaos-announce
	<dd>keeps you informed about new versions
      <dt>xaos-devel
	<dd>you want to become XaoS developer? Subscribe here and
	let us know about you! You will be welcomed.
</dl>
<p>
      To subscribe send following message to 
      <tt>majordomo@horac.ta.jcu.cz</tt>:
<p>
      <tt>subscribe [list_name]</tt>



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%format
<head>XaoS' file format</head>
This section describes format used by XaoS for animations, configuration
files and saved positions. All these files have common format, designed
to be easily readable, to allow manual editing of files and converting them
into another program.
<p>
I also taken a care to make it easily extensible for future versions of XaoS
so I hope there will not be many incompatibilities between various XaoS's
versions.
<p>
File is simple set of commands executed sequentially. XaoS does not provide
any variables/cycles as usual scripting languages but possible future
extension to scheme should be easy since format uses scheme-like syntax.
Syntax of every command is:
<p>
<tt>(command_name </tt><emph>[param1] [param2]</emph><tt>)</tt>
<p>
Where parameters are optional and separated by whitespace (arbitrary number
of spaces, tabs and enters). Parameters should have following types:
<p>
<dl>
<dt>integer
<dd>number w/o decimal point (<tt>123</tt>)
<dt>float
<dd>floating point number in decimal notation with optional exponent (<tt>1.23E2</tt>)
<dt>keyword
<dd>text started by apostroph <tt>'</tt>. It is used to pass various string constants 
like formula name (<tt>'mandel</tt>) Apostrophe is required for scheme compatibility
<dt>string
<dd>Text inside double quotes. The only parameter that should contain whitespace
<dt>boolean
<dd><tt>#t</tt> for true or <tt>#f</tt> for false
</dl>
<p>
Complete description of all XaoS functions (with some examples) contains index of functions in the <a menus>XaoS registry</a>. 
You might take special care to <a animf>animation functions</a>. Also the following functions are significant:

<dl>
<dt>load
<dd>
This function loads and interprets file. It works in similiar way as include
in C.
<dt>initstate
<dd>
This function reset XaoS state to default values from version 3.0. This
command should be at the beginning of each animation file, since otherwise
some stuff previously enabled by user should make unexpected effects.
State is not reseted by default before playing animation since it should
make impossible to write macros. Current version IMO don't need them, but
in future versions, where scheme programming language will be available this
should be much more interesting subject.
<dt>usleep
<dd>
This function waits selected amount of time(in usec) until next commands
are processed. Screen is recalculated and displayed at the beginning of
usleep when necessary. Remaining
time is spent by waiting or performing animation you entered by animation
commands.
<dt>wait
<dd>
Waits until screen is animated (fractal is in calculation or some filters--like motion-blur does some animation. Do not call this function when zoom,
or continuous rotation is active otherwise deadlock happens. It is
recommended to call it, before text subtitles are displayed, since it looks
ugly when they are displayed over blocky unfinished fractal. It may look
well for you but ugly for others. Also you should call it after animation is
performed and before switch to another fractal happens, since switch to
fractal involves calculation, screen is stopped for a while and unfinished
fractal there looks ugly. You should also call it, when you want to do
something as soon as possible.
</dl>
<p>
Example:
<p><tt>
;configure everything for the first frame<br>
(inistate)<br>
(palette 1 1163254293 0)	;custom palette<br>
(cycling #t)			;enable cycling<br>
(cyclingspeed 7)<br>
(maxiter 276)			;higher number o fiterations<br>
(range 3)			;default range for solid guessing<br>
(usleep 1000000)		;second frame start here<br>
(moveview -1.8101154154614007889 -8.2687205907162041209E-05)<br>
				;just move the image<br>
(usleep 1000000)		;thirt frame<br>
(morphview -1.8101154154614007889 -8.2687205907162041209E-05<br>
            6.277210971069452361E-10 6.2772109785334669875E-10)<br>
				;10 seconds of zooming into selected<br>
				rectangle<br>
(usleep 100000000)<br>
</tt><p>
Best way to learn XaoS command language is probably to read position files
and modify them. For example to create zooming animation from the original
file:
<p><tt>
(initstate)<br>
(defaultpalette 0)<br>
(formula 'mandel)<br>
(view -1.64128273713 -5.50393226816E-05 9.69332308848E-08<br>
9.69332308834E-08)<br>
</tt><p>
Just change <tt>view</tt> command to <tt>morphview</tt> command and add <tt>usleep</tt>:

<p><tt>
(initstate)<br>
(defaultpalette 0)<br>
(formula 'mandel)<br>
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08<br>
9.69332308834E-08)<br>
(usleep 10000000)<br>
</tt><p>
Following code produces Julia morphing in the real axis:
<p><tt>
(initstate)<br>
(fastjulia #t)<br>
(juliaseed -2 0)<br>
(morphjulia 2 0)<br>
(usleep 2000000)<br>
</tt><p>

And following is the ``rotozooming'' animation:

<p><tt>
(initstate)<br>
(fastrotate #t)<br>
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08<br>
9.69332308834E-08)<br>
(morphangle 300)<br>
(usleep 10000000)<br>
(wait)<br>
(fastrotate #f)<br>
</tt><p>

<head>XaoS gallery</head>

I plan to make XaoS gallery of animations and position files at XaoS home-page
so please send me all your nice animations and images you created using XaoS
to <tt>hubicka@paru.cas.cz</tt>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%drivers

<head>driver specific documentation</head>
XaoS is portable and works at different platforms. Since not all platforms are
exactly the same, there is some differences. Here is documentation about each
this specific port.
<notex>
<center>
<p>
<a aa>AA-lib driver</a>
<p>
<a dos>MS-DOS driver</a>
<p>
<a ggi>GGI driver</a>
<p>
<a plan9>plan9 driver</a>
<p>
<a SVGAlib>SVGAlib driver</a>
<p>
<a X11>X11 driver</a>
<p>
<a DGA>DGA driver</a>
<p>
<a win32>Win32 driver</a>
<p>
<a dX-window>directX windowed driver</a>
<p>
<a dX-fullscreen>directX fullscreen driver</a>
<p>
<a BeOS>BeOS drivers (BeOS, DirectWindow, WindowScreen) </a>
</center>
</notex>



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%aa

<head>AA-lib driver</head>

AA driver is currently the most advanced and portable driver for XaoS.
It is based at AAlib--an high quality ASCII-art library developed by AA-project.
(see <tt>http://www.ta.jcu.cz/aa</tt>)
<p>
It is fully featured XaoS driver for text mode displays. It supports 256 colors
and mouse where possible.
<p>
It also has some extended features available from the UI menu:
<p>
<dl>
<dt>Attributes
<dd>AA-lib may use character attributes to reach fine qualitty of image.
  By default it uses normal, dim and bold characters where possible.
  But you should also enable different ones like reversed or bold font 
  characters. You may also enable usage of non ansii/reversed characters if
  your device supports it.
<dt>Font
<dd>AA-lib uses bitmap image of font to prepare approximation table used for ASCII art rendering.
This bitmap is expected to be same as one used by your device. AAlib performs 
detection where possible however some devices (like UNIX text terminals or 
MDA) does not support this. AAlib has few font images compiled in, so in
this cases you should try to use one of them to achieve best results.
<dt>Inversion
<dd>Some devices uses inversed video use this to get correct results at such devices.
<dt>Dithering mode
<dd>Dithering is an way to get more exact color in approximation by combining 
  more characters. But this method should bring ugly looking noise at certain images.
  Use this menu to  disable or tune it.
<dt>Palette options
<dd>By default AA driver uses XaoS palette to render images, but it quite often looks ugly
at text displays. Here you can choose special text palette instead. Note that with 
filters enabled results should be rather ugly. This function is available from
the <emph>palette menu</emph>.
<dt>Save text screen
<dd>Normal save function will generate normal PNG image instead of nice
  ASCII-art. To save ASCII art use this function instead. It supports many  
  text file formats like HTML, ANSI, more, etc... It will also ask you for
font and attributes(see above). It is available from the <emph>file
menu</emph>
</dl>
<p>
AA-lib driver also provides the full set of standard AA-lib's command line options. You may use them to tune parameters like gamma correction etc. See <tt>xaos -help</tt> or AA-lib documentation for
details.
<p>
An AA driver was done by Jan Hubicka, 1997.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%dos

<head>DOS driver</head>
This is fully featured driver for DJGPP and allegro. 
It supports many VGA modes, VESA 1.0--3.0, VBE/AF, S3 and some other cards.
<p>
Following problems may occour:
<p>
<dl>
<dt>Some DPMI servers may cause problems
<dd>Some DPMI servers like one from Novell/Dr/Open DOS are buggy. Use clean DOS
  instead and XaoS will automatically start <tt>cwsdpmi</tt>.
  Under Open Dr DOS use <tt>dpmi off</tt> at  command line to disable it.
<dt>Higher resolutions don't work
 <dd>If your videocard has enough memory for selected resolution,
 you most probably have an unsupported videocard.
 Please use some VESA BIOS extension on this videocards. Please see note
 about VESA at the end of this section.
<dt>XaoS needs coprocessor
 <dd>I don't distribute coprocessor library linked into XaoS because it is too slow for
 real-time zoomer. Coprocessor emulation will not help, because xaos works in protected mode.
<dt>XaoS needs mouse driver to be usable
<dt>XaoS works slowly in higher resolution
 <dd>This should be also caused by slow Allegro's driver or VESA BIOS of your
 videocard. You might try some other VESA BIOS extension.
 Look for at the <tt>http://www.talula.demon.co.uk</tt> for FreeBE
 project or Scitech Display Doctor package.
 Please see note about VESA at the end of this section.
</dl>
<head>VESA</head>
VESA is an standard for using higher resolutions in DOS. Many videocards has VESA in
the BIOS so you don't need any additional software, while other needs special
program providing this. Also some VESA BIOS implementations are buggy or
suboptimal, there is 3 different versions, while the version 1.0 is many times
slower than 2.0, which has support for protected mode and linear framebuffer.
So if you have problems with higher resolutions, or some graphics modes are
not available (like 320x200 truecolor), you might try some software package
emulating VESA.
<p>
Most famous VESA emulating program is Scitech display doctor. It has support
for many videocards and is quite reliable. It's disadvantage is, that it is
shareware and works just 30 days. You might also try an
<tt>ftp.simtel.net</tt> that contains many VESA emulation packages such as
<tt>s3vbe</tt> or the new FreeBe project at
<tt>http://www.talula.demon.co.uk</tt>
<p>
DOS driver was done by Jan Hubicka, 1997.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ggi

<head>GGI driver</head>

GGI stands for General Graphics Interface. Part of this project is to develop
libggi--an portable graphics library and XaoS's GGI driver use it.
It is experimental, since API of libggi is not stabilized yet.
There are some problems with keyboard handling--shift key don't work
yet.
<p>
All other stuff might work well, but no guarantees. It is alpha quality
software.
<p>
GGI driver was done by Jan Hubicka, 1998.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%plan9

<head>Plan9 driver</head>

Plan9 is very nice small operating system by Bell labs (authors of UNIX). It
is very incompatible with other operating systems. Even the C compiler and
header files are different, but XaoS should work there well (even at the
limited free demo installation without any POSIX compatibility stuff)
<p>
There is few limitations: File selector and image saving don't work. You might
save an position files and then later render them at the other OS, or save
screenshots. 
<p>
Plan9 terminals also don't provide any way to catch an arrow keys, so you
can't use them. Use mouse to navigate in the menus. Also getting of screen
resolution is impossible, so use <tt>-pixelwidth</tt> and <tt>-pixelheight</tt>
instead of <tt>-screenwidth</tt> and <tt>-screenheight</tt>.
<p>
By default XaoS changes colormap. This will collide with other colorful
programs like Mortha. You might disable this behavior using
<tt>-nopalette</tt> switch. Disadvantage of this solution is, that it is
slower.
<p>
Plan9 driver was done by Jan Hubicka, 1997.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%SVGAlib

<head>SVGAlib driver</head>

This is driver for Linux SVGAlib. I really like this driver, because
I much prefer full screen zooming instead of small 320x320 window in X11.
It was one of first drivers for XaoS and is fully featured. 
The following problems can occur:
<p>
<dl>
<dt>XaoS don't initialize graphics mode
<dd>when started under other user than root SVGAlib requires root privileges 
  to directly access hardware. When you really want to start XaoS as  
  normal user enable sticky bit (<tt>chmod +s</tt>) at XaoS executable 
  note that I take care to disable all security holes caused by this 
  bit so I believe it is safe.
<dt>Mouse doesn't work
<dt>Screen is blank in higher resolution
<dd>Both this problems are probably  caused by wrong configuration of 
SVGAlib. Please configure it in <tt>etc/vga/libvga.cong</tt> or 
<tt>/usr/local/lib/libvga.conf</tt>
Also GPM can cause problems. Try to kill it before starting XaoS
<dt>When I switch console I can't switch back
<dd>This is another typical SVGAlib bug Try to hold <tt>F</tt> key longer than <tt>alt</tt>.
  It helps on my computer. On older SVGAlib there was famous ``enter bug'' that caused
  crash after pressing enter. Try to update to newer release.
</dl>
<p>
SVGAlib driver was done by Jan Hubicka, 1997.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%win32

<head>Win32 driver</head>

This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API it should be rather unstable.
Please report all bugs. In case of problems you might use DOS version
of XaoS instead.
<p>
Driver should work in all bit depths, but 16 color mode is not natively
supported by XaoS engine. XaoS internally works in 32k colors and
result is converted to 16 colors by Windows. Because Windows
conversion routines are slow and ugly, result is slow and ugly.
Please configure your display to another bit depth to ``solve''
this problem.
<p>
Use <tt>-size WIDTHxHEIGHT</tt> command line option to change default
window size.
<p>
This driver also have maps to native Windows look and fell. There is small
problem with combo boxes in dialogs. They are expected to give you choice
between few strings. The keyboard controls (changing choice by arrow keys)
works, but mouse selection is broken. If you know how to solve this bug,
please let me know.
<p>
XaoS is UNIX application and have many command line options. 
Some features are not available from the GUI.
Because Windows applications can't have normal output,
most of critical messages are displayed in message boxes, but
some longer messages are ommited. Most significant is help about command
line options that you can find in the <tt>doc/cmdopts.txt</tt>.
Quite confusing should be fact, that animation rendering mode don't
display anything, only renders the images. Just start the rendering
and message box will inform you that XaoS is entering calculation
loop. Relax and wait for message box signaling end of the loop.
<p>
Note that XaoS also supports <a dX-window>directX</a> API.
<p>
Win32 driver was done by Jan Hubicka, Jan Olderdissen and Pavel Tzekov, 1999.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%dX-window

<head>directX windowed driver</head>

This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API and kludges in DirectX
it should be rather unstable.  Please report all bugs and in case
of problems you might use DOS version of XaoS instead.
<p>
The directX driver is alternative windowed driver to <a win32>win32 driver</a>.
In case you have directX installed, this driver is used by default. It have
almost same behaviour as the <a win32>win32 driver</a> so please read it's
documentation for more details. Only difference should be the speed of
displaying.
<p>
Driver supports only hicolor and truecolor modes. There is no support
for 256 and 16 color modes because of palette colision problems. The win32
driver will be used in this cases by default, so you will not get any
problems.
<p>
If you are experiencing problems with this driver, you might want to
use <a win32>win32 driver</a> by default. Use <tt>-driver win32</tt> command
line option.
<p>
DirectX driver was done by Jan Hubicka, Jan Olderdissen
and Pavel Tzekov, 1999.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%dX-fullscreen

<head>directX fullscreen driver</head>
This is driver for Windows 9x and NT. It is new in version 3.1 and
because of some oddities of Windows API and kludges in DirectX
it should be rather unstable.  Please report all bugs and in case
of problems you might use DOS version of XaoS instead.
<p>
This driver allows the Windows port of XaoS run in the full screen mode.
Driver support 256, 65536 and 16777216 color modes (24bpp and 32bpp)
in all resolutions supported by directX.
You might change graphics mode by pressing <tt>=</tt> key
(or using UI/Resize menu). In case selected mode is not supported,
driver will restore previous settings.
<p>
Use <tt>-mode WIDTHxHEIGHTxDEPTH</tt> (like <tt>-mode 640x480x16</tt>)
command line option to change graphics mode.
<p>
If you want to start XaoS in directX, use <tt>-driver dX-fullscreen</tt> option.
<p>
See <a win32>Win32 driver</a> documentation for some more Windows
releated information.
<p>
DirectX driver was done by Jan Hubicka, Jan Olderdissen
and Pavel Tzekov, 1999.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%BeOS DirectWindow WindowScreen

<head>BeOS support</head>

XaoS have pretty advanced support for BeOS R4. It works on both power PC and
Intel platforms, supports multithreading, clipboard, file dragging,
have native look and fell and can work as an image translator from XaoS files
to images.
<p>
The first version of BeOS driver was done by Jens Kilian and later extended
by Jan Hubicka.
<p>
<head>Installation</head>
<p>
You might start the installation script to do all this work. In case you want
something special, read this section.
<p>
In order to make XaoS working you need to keep the executable together with
data files (<tt>help</tt>, <tt>examples</tt>, <tt>catalogs</tt> and <tt>tutorials</tt> directory)
<p>
After first start XaoS registers two new mime types called <tt>image/x-xaos-position</tt> for XaoS Position Files and <tt>video/x-xaos-animation</tt> for XaoS Animation Files, registers the icon and set's itself as default application.
<p>
<head>Available display drivers</head>
<p>
XaoS supports following drivers:
<p>
<dl>
<dt>BeOS
<dd>Standard windowed driver using application server
<dt>DirectWindow
<dd>Driver done using Game Kit's direct window class
<dt>WindowScreen
<dd>Fullscreen driver.
</dl>
<p>
By default XaoS start in windowed mode and use Application server for output.
You might change driver to DirectWindow to use direct access to videoram. Note
that this mode is slower in most cases and not supported by some videocards.
<p>
The BeOS driver by default choose most similar bitmap supported by XaoS
to archieve best and fastest results.
In UI menu you might change this default choice to other one if you wish.
Also you might ask the BeOS and DirectWindow to resize to fullscreen mode.
<p>
XaoS also supports real fullscreen mode using BWindowScreen API. To switch
XaoS to this driver use UI menu. If you want to use this mode by default,
use <tt>-driver WindowScreen</tt> command line option.
<p>
This driver differs a lot from windowed ones. It use direct access to video
card alwing you to change video mode. Also the 256 color mode
can access palette so it is not dithered like in the windowed mode.
Because BeOS can't do GUI in fullscreen mode, XaoS use it's own toolkit. Hope
you will fell confortable in it.
<p>
<head>XaoS as translator</head>
<p>
You might be able to open XaoS files in graphics applications
such as ShowImage or ArtPaing. In preferences you can find DataTranslations
program that can be used to set size, type and DPI of resulting image.
Also antialiasing can be enabled.
<p>
Note that <emph>translation can take a while</emph>. So be patient and
wait for the result.
<p>
If the translator don't work, ensure that you have link to XaoS executable
in <tt>/boot/beos/system/add-ons/Translators/</tt>. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%X11

<head>X11 driver</head>
This was the first driver done for XaoS. It supports many visuals, shared
colormaps and MitSHM extension.
<p>
Bugs/limitations:
<p>
<dl>
<dt>XaoS makes some X servers too busy
<dd>Sometimes XaoS generates images faster, than X can display them.
In this case XaoS badly respond to mouse and other applications stops  
This happens especially at old R4 servers. Use <tt>-sync</tt> to avoid this
problem. Note that <tt>-sync</tt> do <tt>not</tt> enable an synchronous mode in communication 
just makes one additional XSync call. So slowdown is not so high as you might expect.
<dt>Does not work at all visuals
<dd>This driver supports only 8bpp pseudocolor/grayscales, 15,16,24 and 32bpp truecolor, 1bpp and 8bpp staticolor visuals.
<dt>Palette rotating does not work for 8bpp pseudocolor w/o private palette
</dl>
<p>
X11 driver was done by Jan Hubicka and Thomas Marsh, 1997.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DGA

<head>DGA driver</head>
This is the driver for DGA (Direct Graphics Architecture) extension used by
XFree86 X servers. It is pretty new so it can be buggy.
<p>
Bugs/limitations:
<p>
<dl>
<dt>In 8bpp mode XaoS have problems with palette on certain windowmanagers
<dd>I don't know why this happends. Just ley me know whats wrong or use other
windowmanager.
<dt>Banked modes are not supported.
<dd>I don't have any card to test this, so it don't work in current version.
</dl>
<p>
DGA driver was done by Jan Hubicka, 1999.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%tutorial

<head>XaoS tutorial</head>

This is brief introduction to the basic XaoS features.
 
<head>How to zoom</head>
 Main advantage of XaoS is that after few seconds needed to calculate
 first image you may choose some point by mouse and press <emph>left</emph> button.
 Image will start to zoom smoothly into point you choose. You may move
 mouse and zoom smoothly into interesting areas. By pressing <emph>middle
 button</emph> (or <emph>left+right</emph>) you may also <emph>move image</emph> using ``drag & drop'' in
 case you missed some interesting place. <emph>UN-zooming</emph> is also possible by
 <emph>right button</emph>, but it is much slower because optimizations are not so
 effective as for zooming.
<p>
 In case you think that default <emph>speed</emph> is boring (it is quite slow to
 make XaoS smooth on slow computer) you may change it by pressing <emph>arrow
 up/down</emph>. But understand that faster zooming is more expensive so if
 speed is too high you should see just funny colorful blinking
 rectangles.
 
<head>Autopilot</head>

 To make XaoS yet more impressive we did special autopilot that
 automatically drives into interesting boundaries of set. So you should
 press <tt>A</tt>, play your favorite music, drink coffee and relax. I never
 tried this but it should be really relaxing! Many pictures in XaoS
 gallery are discovered using autopilot.
<p>
 Autopilot has also some additional features. It return back in case
 zoomed picture is not interesting anymore. Also is able to detect,
 when zoomed into really boring part or reached limit of floating point
 numbers and restart zooming.
<p>
<head>Various fractal formulas</head>

 XaoS also supports other formulas than Mandelbrot set. You may change
 <emph>formula</emph> using <emph>number keys</emph>.
 
 
<p>
 On keys <tt>1</tt> to <tt>5</tt> are <emph>Mandelbrot sets with various power</emph>. The ``normal''
 Mandelbrot set is on key <tt>1</tt>. 
<p>
 On key <tt>6</tt> is fractal called <emph>octo</emph>. It is some fractal that Thomas
 discovered in fractint.
<p>
 On key <tt>7</tt> is fractal called <emph>Newton</emph>. It is famous Newton's formula for finding roots.
<p>
 On key <tt>8</tt> is fractal called <emph>Barnsley</emph>.
<p>
 On key <tt>9</tt> is fractal called <emph>Phoenix</emph>. It is very nice and quite famous fractal.
<p>
 On key <tt>0</tt> is fractal called <emph>Magnet</emph>. This fractal has quite complex formula so it is
 bit slow. 
 
<head>Out-coloring modes</head>

 To make fractal yet more interesting more coloring modes for points
 outside set are provided. ``Classical coloring mode'' uses number of
 iterations that orbit required to escape boundaries. You might change this
 mode from the <emph>Fractal menu</emph> or by pressing key <tt>C</tt>
 Too see more about coloring modes try tutorial <tutor outcolor.xaf>Incoloring modes</tutor> from XaoS features overview.
<p>
 Those cryptic names for coloring modes are mathematical formulas where <emph>iter</emph> means number
 of iterations, <emph>real</emph> real coordinate of last orbit, <emph>imag</emph> imaginary
 coordinate of last orbit.
<p>
<head>In-coloring mode</head>

 Similar to out coloring mode is in coloring. It is only way how to
 display thinks inside set. They also can be changed from <emph>fractal
 menu</emph> or by pressing <tt>F</tt>. 
 <p>
 You might also want to see tutorial
 <tutor outcolor.xaf>Out-coloring modes</tutor> from XaoS features overview.

<head>Planes</head>

 All fractals displayed by XaoS are function with complex parameter. It
 can be displayed in normal complex plane where x is real part of
 number and y is imaginary. But may be also displayed in some other
 planes. You might select plane from the <emph>Fractal menu</emph> or by
 pressing <tt>I</tt>.
<p>
 planes another cryptic names. And, you guessed, another mathematical
 formulas. Here mu means coordinates in normal complex plane. In case
 you have coordinates in <tt>1/mu</tt> plane and you need complex plane (to
 calculate Mandelbrot) you simply use coordinates as variable mu.
 Lambda is another plane that can be converted to mu using similar
 formula.
 <p>
<dl>
 <dt>mu
	<dd>normal mode..
	
 <dt>1/mu
	<dd>Inversion-infinity is in 0 and 0 is in infinity.
	
 <dt>1/(mu+0.25)
	<dd>Similar to inversion but moves center outside of Mandelbrot so
	it looks parabolic
	
 <dt>lambda
	<dd>lambda plane
	
 <dt>1/lambda
	<dd>Inversion of lambda plane
	
 <dt>1/lambda-1
	<dd>Inversion with moved center
	
 <dt>1/(mu-1.40115)
	<dd>Very interesting mode for Mandelbrot set. Makes small thinks
	big. So you can browse its details.
</dl>
<p>
 
<head>Mandelbrot/Julia switching</head>

 Most of fractals displayed by XaoS (currently all of them) have two
 forms: Mandelbrot and Julia. Every point in Mandelbrot form has its
 own Julia set. To see more about this correspondence, try tutorial 
 <tutor julia.xaf>Julia set</tutor> from the Introduction to fractals.
<p>
In the Mandelbrot mode, you might get corresponding Julia by moving mouse to point you selected
 and pressing <tt>M</tt>. To return back press <tt>M</tt> again. Some fractals
 (Barnsley and phoenix) are already in their Julia versions, because
 Mandelbrot ones are boring. But by pressing <tt>M</tt> in such fractal you
 should get to Mandelbrot version and by choosing another point as base
 and pressing <tt>M</tt> again you should get completely different fractal.
 The most interesting points for Julia sets are at boundaries of
 Mandelbrot set. Most of Julia inside or outside set are boring.
<p>
 
<head>Fast Julia preview mode</head>

 Fast Julia mode is solution for
 question: What point use as base for Julia set. Just press <tt>J</tt> and
 small Julia set will be displayed at top left corner. Then move mouse
 around with pressed button 1 and Julia to corresponding point will be
 automatically generated. 
 
<head>Palette</head>

 In case you think that default XaoS colors are ugly or you are just
 bored by them you may try to change it by pressing <tt>P</tt>. XaoS will
 generate automatically random palette. Many of them looks ugly so
 press <tt>P</tt> again to get different one.
<p>
<head>Filters</head>

 Many interesting effect should be done by post calculation filters.
 XaoS has filters as emboss, motion-blur etc. To enable them use <tt>filter menu</tt>
 or press <tt>E</tt>.
<p>
<head>Palette cycling</head>

 This is very old trick that makes Mandelbrot set more interesting. You
 may enable/disable it using <tt>Y</tt>. In the truecolor modes you need
 to enable palette emulator filter first. This is done via <tt>E</tt> key.
 Or from filter menu.
<p>
<head>Changing number of iterations</head>

 To calculate fractals perfectly you need infinite number of
 iterations. XaoS does just first few of them so after longer zooming
 you may get into place that looks quite boring and boundaries of set
 are rounded w/o any interesting details. This should be changed by
 changing number of iterations:
 <p>
 Press and hold <tt>arrow left</tt> and wait until iterations are high enough.
 This may slow down calculation much. To reduce number of iterations
 press <tt>arrow right</tt>.
 
<head>Changing resolution</head>

 XaoS usually starts in low resolution (320x200 or so) to make
 calculations faster. In case you have fast computer or you need to
 save bigger <tt>.gif</tt> images you may change resolution. This should be done
 by pressing <tt>=</tt> in full screen drivers or simply by resizing XaoS
 window.
 
<head>Changing driver</head>

 XaoS usually have more than one driver available. You may change it on
 the fly in case you want different one. For example XaoS started in X
 windows and you want to use AA driver. This can be done from the UI menu.
 <p>
 This action is bit dangerous, because XaoS can crash
 during initialization in case of some problem with initialization--XaoS
 tries to initialize an new driver, if it fails it attempts to return back
 to the original. Sometimes this in impossible.

<head>Other features</head>
XaoS has many other features, but they don't fit into this tutorial. Most of
them are available from the menu, so you might experiment with them. You might
also want to see the <emph>animated tutorials</emph> from the <emph>help menu</emph>,
to have an idea what XaoS can do.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%menus
<main><head>Menus, functions and command line parameters</head></main>
All XaoS functions are in central function registry. The scripting language,
menus, dialogs and command line options are built from this database. This
section contains information about all functions available in this registry.
<menuitems><center>
<p><submenu><a root>Root menu</a>
<p><submenu><a animroot>Animation root menu</a>
<p><submenu><a plc>Replay only commands</a>
%end
<p><submenu><a linemenu>Line drawing functions</a>
<p><submenu><a animf>Animation functions</a>
<p><submenu><a time>Timing functions</a>
<p><submenu><a file>File</a>
<p><submenu><a fractal>Fractal</a>
<p><submenu><a calc>Calculation</a>
<p><submenu><a mfilter>Filters</a>
<p><submenu><a ui>UI</a>
<p><submenu><a misc>Misc</a>
<p><submenu><a helpmenu>Help</a>
<p><submenu><a file>File</a>
<p><submenu><a helpmenu>Help</a>
<p><submenu><a xtextpos>Horizontal text position</a>
<p><submenu><a ytextpos>Vertical text position</a>
<p><submenu><a mformula>formulae</a>
<p><submenu><a palettemenu>Palette</a>
</center></menuitems>
<node root, , animroot, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%root

<notex>
<menuhead><head>Root menu</head></menuhead>
This menu is usually displayed at the top of screen or window. It contains all
sub-menus currently available. During animation is displayed another menu--<a animroot>Animation root
menu</a>.
<menuitems><center>
<p><submenu><a file>File</a>
<p><submenu><a fractal>Fractal</a>
<p><submenu><a calc>Calculation</a>
<p><submenu><a mfilter>Filters</a>
<p><submenu><a ui>UI</a>
<p><submenu><a misc>Misc</a>
<p><submenu><a helpmenu>Help</a>
</center></menuitems>
</notex>
<node animroot, root, plc, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%animroot

<menuhead><head>Animation root menu</head></menuhead>
This menu is displayed at the top of screen when animation replay is active.
<menuitems><center>
<p><submenu><a file>File</a>
<p><a stopreplay>Stop replay</a>
<p><submenu><a helpmenu>Help</a>
<p><submenu><a ui>UI</a>
</center></menuitems>
<node stopreplay, , , animroot>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%stopreplay
<head>Stop replay</head>
Terminate animation replay.
<p>
<emph>Available as</emph>: menu item



<node plc, animroot, linemenu, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%plc
<menuhead><head>Replay only commands</head></menuhead>
Some commands, such as timing primitives or animation functions are available
just in animation files.
<menuitems><center>
<p><submenu><a linemenu>Line drawing functions</a>
<p><submenu><a animf>Animation functions</a>
<p><submenu><a time>Timing functions</a>
<p><a load>Include file</a>
</center></menuitems>
<node load, , , plc>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%load
<head>Include file</head>
<p><emph>Syntax</emph>:(load file)
<p>
This function lets you include another file into your script. It works in
similar way as <tt>#include</tt> in C source or <tt>load</tt> in scheme.
File is searched in the same directory as current source is.
<p>
<emph>Available as</emph>: command

<node linemenu, plc, animf, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%linemenu

<menuhead><head>Line drawing functions</head></menuhead>
XaoS has support for drawing lines. This functions are available only in
animations and should be used to show some parts of fractals or draw simple
diagrams. See tutorial ``<tutor intro.xaf>Introduction to fractals</tutor>'' for
example of this feature.
<p>
Lines should be drawn in   <emph>screen</emph> coordinates, where 0,0
is top left corner and 1,1 is bottom right, <emph>scaled</emph> coordinates,
which are similar just scaled to keep 0,0--1,1 rectangular or
<emph>Fractal</emph> coordinates should be used to draw line at exact
position of screen.
<p>
Color of line should be specified by command <a color><tt>color</tt></a>.
You might draw arbitrary number of lines and later morph them. Each line has
its own key, which is number used to identify it. You might set key using
command <tt>linekey</tt>.
Next lines have consetuctive numbers. Commands for changing line then operates
at line with current key.
<p>
For example:
<p><tt>
(color 'red)<br>
(line 'scaled 0.3 0.5 0.7 0.5)<br>
(line 'scaled 0.3 0.5 0.7 0.5)<br>
(line 'scaled 0.3 0.5 0.3 0.5)<br>
(line 'scaled 0.7 0.5 0.7 0.5)<br>
(linekey 0)<br>
(morphline 'scaled 0.3 0.3 0.7 0.3)<br>
(morphline 'scaled 0.3 0.7 0.7 0.7)<br>
(morphline 'scaled 0.3 0.3 0.3 0.7)<br>
(morphline 'scaled 0.7 0.3 0.7 0.7)<br>
(usleep 1000000)<br>
</tt><p>
Creates line morphing to rectangle
<notex>
<menuitems><center>
<p><a line>Draw line</a>
<p><a morphline>Morph line</a>
<p><a morphlastline>Morph last line</a>
<p><a linekey>Set line key</a>
<p><a clearline>Clear line</a>
<p><a clearlines>Clear all lines</a>
</center></menuitems>
</notex>
<notex>
<node line, , morphline, linemenu>
</notex>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%line


<notex>
<head>Draw line</head>
</notex>
<p><emph>Syntax</emph>:(line keyword complex complex)
<p>
Draw line between two points.
<tt>keyword</tt> specifies type of coordinates and should be one of the
following: <tt>`fractal</tt>, <tt>`screen</tt> or <tt>`scaled</tt>.
Function also increase the line key.
<p>
<emph>Available as</emph>: command

<notex>
<node morphline, line, morphlastline, linemenu>
</notex>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%morphline


<notex>
<head>Morph line</head>
</notex>
<p><emph>Syntax</emph>:(morphline keyword complex complex)
<p>
Morph current line to given coordinates.
<tt>keyword</tt> specifies type of coordinates and should be one of the
following: <tt>`fractal</tt>, <tt>`screen</tt> or <tt>`scaled</tt>.
Line will start moving at the next <a time>timing command</a>. and reach the
final position before end of it.
Function also increase the line key.
<p>
<emph>Available as</emph>: command

<notex>
<node morphlastline, morphline, linekey, linemenu>
</notex>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%morphlastline


<notex>
<head>Morph last line</head>
</notex>
<p><emph>Syntax</emph>:(morphlastline keyword complex complex)
<p>
This function has same functionality as <a morphline>morphline</a>, but it don't
increase the line key and touches line with previous key. This is useful when
you want to move just drawn line--you don't need to set <a linekey>linekey</a> back.
<p>
<emph>Available as</emph>: command

<notex>
<node linekey, morphlastline, clearline, linemenu>
</notex>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%linekey
<notex>
<head>Set line key</head>
</notex>
<p><emph>Syntax</emph>:(linekey integer)
<p>
Set current line key.
<p>
<emph>Available as</emph>: command

<notex>
<node clearline, linekey, clearlines, linemenu>
</notex>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%clearline
<notex>
<head>Clear line</head>
</notex>
<p><emph>Syntax</emph>:(clearline)
<p>
Clear current line. This function also increase the line key.
<p>
<emph>Available as</emph>: command

<notex>
<node clearlines, clearline, , linemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%clearlines
<head>Clear all lines</head>
</notex>
<p><emph>Syntax</emph>:(clearlines)
<p>
Clear all displayed line. Lines should be also cleared using
<tt>clearscreen</tt> or <tt>display</tt> commands available from <a misc>Misc menu</a>.
<p>
<emph>Available as</emph>: command

<node animf, linemenu, time, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%animf

<menuhead><head>Animation functions</head></menuhead>
This functions are used to animate fractal state--zoom, UN-zoom and morph
various parameters. They should be used only in the animation files.
Animations are usually performed for whole time selected by the next <a time>timing function</a>.
For example:
<p><tt>
(view 0 0 1 1)<br>
(morphview 0 0 2 2)<br>
(usleep 5000000)
</tt><p>
Will do 5 seconds long UN-zooming animation.
<menuitems><center>
<p><a animateview>Animate view</a>
<p><a smoothmorph>Smooth morphing</a>
<p><a morphview>Morph view</a>
<p><a morphjulia>Morph julia</a>
<p><a moveview>Move view</a>
<p><a morphangle>Morph angle</a>
<p><a zoom>Zooming functions</a>
</center></menuitems>
<node animateview, , morphview, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%animateview
<head>Animate view</head>
<p><emph>Syntax</emph>:(animateview float float float float)
<p>
This function is almost equivalent to function <a uiview><tt>view</tt></a>.
It expect that view will be changed just slightly so recalculation is done with
<tt>ANIMATE</tt> priority. This means that dynamic resolution is used by
default. 
<p>
View-port is selected by the center and two radiuses (real and imaginary). See
<a uiview><tt>view</tt></a> for more information.
<p>
<emph>Available as</emph>: command

<node smoothmorph, animateview, morphview, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%smoothmorph
<head>Smooth Morphing</head>
<p><emph>Syntax</emph>:(morphview keystring starttime endtime)
This function lets you to make smooth start and stop of morphing. Specify
starttime and stoptime nonzero and morphing will speedup and slowdown for
selected number of usecs.
<p>
Keystring is used to select what morphing you want to control. It is one of
the following choices:
<dl>
<dt>'view
<dd>control <a morphview>morphview</a>
<dt>'angle
<dd>control <a morphangle>morphangle</a>
<dt>'julia
<dd>control <a morphjulia>morphjulia</a>
<dt>'line
<dd>control <a morphline>morphline</a>
</dl>
<node morphview, smoothmorph, morphjulia, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%morphview
<head>Morph view</head>
<p><emph>Syntax</emph>:(morphview float float float float)
For whole time selected by next <a usleep><tt>usleep</tt></a> or other timing function viewpoint is smoothly morphed from
current one to one selected by <tt>morphview</tt>.
<p>
View-port is selected by the center and two radiuses (real and imaginary). See
<a uiview>for more information</a>
<p>
This function should be easily used for creating the zooming/UN-zooming animations using position files.
This is example position file generated by XaoS:
<p><tt>
(initstate)<br>
(defaultpalette 0)<br>
(formula 'mandel)<br>
(view -1.64128273713 -5.50393226816E-05 9.69332308848E-08 
    9.69332308834E-08)<br>
</tt><p>
Just by exchanging <tt>view</tt> command by <tt>morphview</tt> command and
adding <tt>usleep</tt> you might create zooming animation:
<p><tt>
(initstate)<br>
(defaultpalette 0)<br>
(formula 'mandel)<br>
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08 
    9.69332308834E-08)<br>
(usleep 10000000)
</tt><p>


<emph>Available as</emph>: command

<node morphjulia, morphview, moveview, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%morphjulia
<head>Morph julia</head>
<p><emph>Syntax</emph>:(morphjulia complex)
For whole time selected by next <a usleep><tt>usleep</tt></a> or other timing function julia seed
is smoothly interpolated between current one to one selected by <tt>morphjulia</tt>. By default this will
cause recalculation of the whole screen. 
To avoid this use <a fastjulia>fast julia mode</a>.
<p>
Simple animation morphing julia seed in the X axis:
<p><tt>
(initstate)<br>
(fastjulia #t)<br>
(juliaseed -2 0)<br>
(morphjulia 2 0)<br>
(usleep 2000000)<br>
</tt><p>
<p>
<emph>Available as</emph>: command

<node moveview, morphjulia, morphangle, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%moveview
<head>Move view</head>
<p><emph>Syntax</emph>:(moveview complex)
Smoothly move center to image to another position.
<p>
<emph>Available as</emph>: command

<node morphangle, moveview, zoom, animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%morphangle
<head>Morph angle</head>
<p><emph>Syntax</emph>:(morphangle float)
Smoothly rotate to image to another angle. By default rotation causes
recalculation of the whole screen. To avoid this you need to enable 
<a rotate>fast rotate mode</a>. Don't forget to disable it later, since
it slow down other animations. 
<p>Simple ``rotozooming'' animation:
<p><tt>
(initstate)<br>
(fastrotate #t)<br>
(morphview -1.64128273713 -5.50393226816E-05 9.69332308848E-08<br>
9.69332308834E-08)<br>
(morphangle 300)<br>
(usleep 10000000)<br>
(wait)<br>
(fastrotate #f)<br>
</tt><p>
<emph>Available as</emph>: command

<node zoom, morphangle, , animf>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%zoom zoom unzoom stop
<head>Zooming functions</head>
<p>
Functions for zooming/UN-zooming was created mainly for recording the
animation. In manually created animation files it is easier to use
<a morphview><tt>morphview</tt></a>.
<p>
<p><emph>Syntax</emph>:(zoomcenter complex)
This function set center to zoom in. Center is given as position in fractal
coordinates.
<p>
<emph>Available as</emph>: command
<p><emph>Syntax</emph>:(zoom)
Start zooming to area specified by <tt>zoomcenter</tt>. Work is the
same way as first button. 
<p>
Speed of zooming should be controlled by function <a speed><tt>speed</tt></a> or in more
exact way by <tt>maxstep</tt> and <tt>speedup</tt>.
<p>
<p><emph>Syntax</emph>:(unzoom)
<p>
Start un-zooming from area specified by <tt>zoomcenter</tt>. Work is the
same way as third button. 
<p>
<emph>Available as</emph>: command
<p><emph>Syntax</emph>:(stop)
Stop zooming or UN-zooming.
<p>
<emph>Available as</emph>: command

<node time, animf, file, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%time

<menuhead><head>Timing functions</head></menuhead>
Timing functions are used to control animation replay daemon. It might wait
for given time or wait until calculation is complete. The animation functions
are controlled by this. Animations are performed for whole selected time.
<menuitems><center>
<p><a usleep>Usleep</a>
<p><a textsleep>Wait for text</a>
<p><a wait>Wait for complete image</a>
</center></menuitems>
<node usleep, , textsleep, time>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%usleep
<head>Usleep</head>
<p><emph>Syntax</emph>:(usleep integer)
<p>
This function waits selected amount of time(in usec) until next commands
are processed. Screen is recalculated and displayed at the beginning of
usleep when necessary. Remaining
time is spent by waiting or performing animation.
<p>
<emph>Available as</emph>: command

<node textsleep, usleep, wait, time>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%textsleep
<head>Wait for text</head>
<p><emph>Syntax</emph>:(textsleep)
<p>Behavior is very similar to <a usleep><tt>usleep</tt></a>, but the time is
calculated from number of letters currently displayed at screen. So if you
want wait just for time user needs to read subtitle, use this function. User
can then alter replay speed for its own needs using 
<a letterspersec><tt>letterspersec</tt></a>. This value should be changed during
replay by arrow keys.
<p>
<emph>Available as</emph>: command

<node wait, textsleep, , time>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%wait
<head>Wait for complete image</head>
<p><emph>Syntax</emph>:(wait)
<p>
Wait until image is complete. You might use this function always after
zooming or UN-zooming when dynamic resolution should be used. This ensures that
image calculation will be complete and user will see the result before
animation continues. Also should be useful in combination with filters like
<a blur>motion blur</a>, since it will wait while animation is
performed.
<p>
This function can not be used with <a animf>animation functions</a>,
otherwise deadlock will happened.
<p>
<emph>Available as</emph>: command

<node file, time, fractal, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%file

<menuhead><head>File</head></menuhead>
<menuitems><center>
<p><a loadpos>Load</a>
<p><a savepos>Save</a>
<p><a record>Record</a>
<p><a play>Replay</a>
<p><a saveimg>Save image</a>
<p><a loadexample>Load random example</a>
<p><a savecfg>Save configuration</a>
<p><submenu><a quit>Quit</a>
</center></menuitems>
<node loadpos, , savepos, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%loadpos
<head>Load XaoS position file</head>
<p>
Load XaoS position file (<tt>*.xpf</tt>). 
See <a format>format description</a> for more information.
<p>
<emph>Available as</emph>: menu item, command line option

<node savepos, loadpos, record, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%savepos
<head>Save XaoS position file</head>
<p><emph>Syntax</emph>:(savepos file)
<p>
Save current state to XaoS position file (<tt>*.xpf</tt>). This file is in
human readable format and should be later easily improved by hand or used as
base for animation.
See <a format>format description</a> for more information.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node record, savepos, play, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%record
<head>Record animation</head>
<p><emph>Syntax</emph>:(record bool [ file ])
<p>
Start recording to XaoS animation file (<tt>*.xaf</tt>). This file is in
human readable format and should be later easily edited.
See <a format>format description</a> for more information.
To stop animation recording select this function in the menu again, or use
command <tt>(record #f)</tt>
<p>
<emph>Available as</emph>: menu item, command line option, command

<node play, record, saveimg, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%play
<head>Replay animation</head>
<p>
Replay XaoS animation file (<tt>.xaf</tt>).
<p>
<emph>Available as</emph>: menu item, command line option

<node saveimg, play, loadexample, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%saveimg
<head>Save image</head>
<p><emph>Syntax</emph>:(saveimg file)
<p>
Save current state to image file. This file is in <tt>.png</tt> (portable
network graphics) format, which should be later read by many applications
like graphics editors, internet browsers etc.
<p>
For this function an external library called <tt>pnglib</tt> is required. In
cases where this library wasn't available during compilation, this function
don't work. Please see <tt>INSTALL</tt> for more information about obtaining
png library and recompiling XaoS.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node loadexample, saveimg, savecfg, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%loadexample
<head>Load random example</head>
<p><emph>Syntax</emph>:(loadexample)
<p>
Choose random <tt>.xpf</tt> file from the <tt>examples</tt> directory and
load it.
You might use it as the starting point for next exploration.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node savecfg, loadexample, quit, file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%savecfg
<head>Save configuration</head>
<p><emph>Syntax</emph>:(savecfg)
<p>
Save current configuration. Configuration is saved into special file (at UNIX
<tt>~/.xaosrc</tt>, <tt>xaos.cfg</tt> under DOS), which is automatically loaded
at startup. So next time you run XaoS you will get the same configuration.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node quit, savecfg, ,file>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%quit quitmenu noquit
<head>Quit</head>
<p><emph>Syntax</emph>:(quit)
<p>
Quit XaoS.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node edit, file, fractal, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%edit
<menuhead><head>Edit</head></menuhead>
The stuff normally covered by edit menu in the application.
<menuitems><center>
<p><a undo>Undo</a>
<p><a redo>Redo</a>
<p><a copy>Copy</a>
<p><a paste>Paste</a>
</center></menuitems>
<node undo, , redo, edit>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%undo
<head>Undo</head>
Undo last operation. Because "last operation" is quite hard to define in
XaoS (where changes are continuous). So it might bring you some surprises.
I hope it will do what you want.
<p>
<emph>Available as</emph>: menu item
<node redo, undo, copy, edit>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%redo
<head>Redo</head>
Redo last undone operation. See <a undo>undo</a> documentation.
<p>
<emph>Available as</emph>: menu item
<node copy, redo, pase, edit>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%copy
<head>Copy</head>
Copy fractal to clipboard. Implementation of this function is platform
specific so you don't have to be available on your setup.
<p>
<emph>Available as</emph>: menu item
<node paste, copy, , edit>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%paste
<head>Paste</head>
Paste fractal from clipboard.  Implementation of this function is platform
specific so you don't have to be available on your setup.
<p>
<emph>Available as</emph>: menu item

<node fractal, edit, calc, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%fractal
<menuhead><head>Fractal</head></menuhead>
This menu contains all function, which lets you specify fractal parameters like
formulas, coloring modes, seeds and much more.

<menuitems><center>
<p><a formula>Formula</a>
<p><submenu><a mformula>formulae</a>
<p><a incoloring>Incoloring mode</a>
<p><a outcoloring>Outcoloring mode</a>
<p><a plane>Plane</a>
<p><submenu><a palettemenu>Palette</a>
<p><a uimandelbrot>Mandelbrot mode</a>
<p><a uiperturbation>Perturbation</a>
<p><a uiview>View</a>
<p><a initstate>Reset to defaults</a>
<p><a tcolor>True-color coloring modes</a>
</center></menuitems>
<node formula, , uimandelbrot, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%formula
<head>Formula</head>
<p><emph>Syntax</emph>:(formula keyword)
<p>
Set the current fractal formula. Keyword should be one of the following
formulas:
<dl>
<dt>'mandel
<dd>Standard <a mandel>Mandelbrot set</a>.
<dt>'mandel3
<dd><a mandel3>Mandelbrot set power 3</a>.
<dt>'mandel4
<dd>Mandelbrot set power 4.
<dt>'mandel5
<dd>Mandelbrot set power 5.
<dt>'mandel6
<dd>Mandelbrot set power 6.
<dt>'newton
<dd><a newton>Newton approximation method</a>.
<dt>'barnsley
<dd><a barnsley>First barnsley's formula</a>.
<dt>'octo
<dd><a octal>Fractint's octo</a>.
<dt>'phoenix
<dd><a phoenix>Phoenix</a>.
<dt>'magnet
<dd><a magnet>Magnet</a>.
</dl>
<p>
<emph>Available as</emph>: command

<node uimandelbrot, formula, uiperturbation, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%uimandelbrot julia juliaseed
<head>Mandelbrot/Julia mode</head>
<p>
Fractal should be in   Mandelbrot or Julia mode. Each point in the
Mandelbrot set has it's own Julia set. To learn more about this correspondence
see tutorial ``<tutor julia.xaf>Julia set</tutor>''.
<p>
This function should be used to switch between this modes. In case
you are enabling Julia mode, you need to set seed--point selected from the
Mandelbrot set.
<p>
In case you are enabling function from menu, you are prompted for this number.
Often it is useful to use some point at screen. You might do that by pressing
<tt>M</tt> key. Then you are not asked for seed and current position of mouse
is used instead.
<p>
Good seedpoints lies at the boundaries of the set. Other seeds generates
usually quite boring fractal. You might also explore various seeds using
<a fastjulia>Fast julia mode</a>.
<p>
Note that not all fractals has Julias. But XaoS can generate an fake Julia
sets, which uses some modification of the formula in the other cases, so this
function is currently usable for all fractal types.
<p>
<emph>Available as</emph>: menu item
<p><emph>Syntax</emph>:(julia bool)
<p>
This function is used to enable/disable julia mode in the animation files. 
<p>
<emph>Available as</emph>: command line option, command
<p><emph>Syntax</emph>:(juliaseed complex)
<p>
Select current julia seed. 
<p>
<emph>Available as</emph>: command line option, command

<node uiperturbation, uimandelbrot, uiview, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%uiperturbation perturbation
<head>Perturbation</head>
<p>
Perturbation is simple trick, where some other starting point of orbit is
used. Traditionally zero is used, but other values should generate interesting
results too.
<p>
When enabling this function from the menu, you will be asked for complex
number specifying the perturbation. When you select it again, perturbation will
be disabled and you will not be prompted.
<p>
It is often useful to specify complex
number representing some point at the screen. This should be achieved by
placing mouse cursor there and pressing <tt>B</tt>. Another pressing
<tt>B</tt> will disable perturbation (set perturbation value to zero).
<p>
Function has effect just for some formulas (like the <a mandel>Mandelbrot set</a>) in 
the <a uimandelbrot>Mandelbrot mode</a>.
<p>
<emph>Available as</emph>: menu item
<p><emph>Syntax</emph>:(perturbation complex)
<p>
This is an perturbation function with better
interface to scripting language. It don't have the enable/disable feature, but
lets you always specify the numbers. Use 0 0 to disable perturbation.
<p>
<emph>Available as</emph>: command line option, command

<node uiview, uiperturbation, initstate, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%uiview view angle
<head>View</head>
<p>
Set current viewpoint in the fractal. This function is useful when you have
found some interesting coordinates somewhere (at the WWW page or so) and you
want to see it in XaoS.
<p>
In the dialog you will be asked for <emph>center</emph>, <emph>radius</emph>
and <emph>angle</emph> of image.
<p>
Center specifies point, which will be displayed in the center of screen. Radius
is radius of circle around this center. XaoS will choose smallest possible
area, which fits to screen and contains whole this circle. Angle is rotation of
the image in degrees.
<p>
Many different formats for specifying area are used. Some people use
coordinates of left top and bottom down visible point instead. Then they
specify coordinates as four numbers <math>x1</math>, <math>y1</math>, <math>x2</math>, <math>y2</math>. To set same
viewpoint in XaoS, calculate <math>(x1+x2)/2</math> and set it as real part of
center. Imaginary part of center is <math>(y1+y2)/2</math>. Radius is larger of
<math>x2-x1</math> and <math>y2-y1</math>.
<p>
Other programs uses zoom factor instead of radius. Then you might set radius to <math>2/zoom</math>.
<p>
<emph>Available as</emph>: menu item
<p><emph>Syntax</emph>:(view float float float float)
<p>
This function is used to set visible area of fractal from the animation
files. It don't let you specify the angle, which can be controlled by separate function 
<tt>angle</tt>, but lets you specify ellipse instead of circle. You might
specify both real and imaginary radius, so you have better control of area
that will be visible. XaoS will choose smallest possible area containing this
ellipse, which is not shrinked.
<p>
<emph>Available as</emph>: command line option, command
<p><emph>Syntax</emph>:(angle float)
<p>
Set rotation angle in degrees. By default this causes recalculation of screen.
You might enable <a rotate>fast rotation mode</a>. This will let you
rotate screen without recalculation, but will slow down other thinks, so don't
forget to disable it later.
<p>
<emph>Available as</emph>: command line option, command


<node initstate, uiview, plane, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%initstate
<head>Reset to defaults</head>
<p><emph>Syntax</emph>:(initstate)
<p>
This function resets most of XaoS values to the defaults. It is useful in
cases you are lost and you want to start from the beginning. Also it should be
used as the first command of every animation file to ensure that it will be
played always in the same environment.
<p>
<emph>Available as</emph>: menu item, command line option, command


<node plane, initstate, incoloring, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%plane mplane plane0 plane1 plane2 plane3 plane4 plane5 plane6 plane7 plane8 plane9 plane10
<head>Plane</head>
<p><emph>Syntax</emph>:(plane integer)
<p>
All fractals displayed by XaoS are     
function with complex parameter.       
It can be displayed in normal complex  
plane where x is real part of number   
and y is imaginary. But may be also    
displayed in some more funny modes:
<dl>
<dt><math>mu</math>                                
<dd>normal complex plane                    
<dt><math>1/mu</math>
        <dd>Inversion-infinity is in 0 and   
        0 is in infinity.                
<dt><math>1/(mu+0.25)</math>
        <dd>Similar to inversion but moves   
        center outside of Mandelbrot     
        so it looks parabolic            
<dt><math>lambda plane</math>, <math>1/lambda</math>, <math>1/lambda-1</math>
<dd>Lambda planes and its inversions with different center.
<dt><math>1/(mu-1.40115)</math>
        <dd>Very interesting mode for        
        Mandelbrot set. Makes small      
        thinks big. So you can           
        browse its details.              
</dl>
You might also try <tutor plane.xaf>tutorial about planes</tutor> to see some examples.
<p>

<p>
In the scripting language, planes are numbered as follows:
<p>
<dl>
<dt>0
<dd><math>mu</math>
<dt>1
<dd><math>1/mu</math>
<dt>2
<dd><math>1/(mu+0.25)</math>
<dt>3
<dd><math>lambda</math>
<dt>4
<dd><math>1/lambda</math>
<dt>5
<dd><math>1/(lambda-1)</math>
<dt>6
<dd><math>1/(mu-1.40115)</math>
</dl>
<p>
<emph>Available as</emph>: command line option, command

<node incoloring, plane, outcoloring, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%incoloring mincoloring in1 in2 in3 in4 in5 in6 in7 in8 in9 in10 in0
<head>Inside coloring mode</head>
<p><emph>Syntax</emph>:(incoloring integer)
<p>
Areas inside the set are usually filled by the black color. Alternatively you
might use different ways in order to make fractal more interesting. Value of
the latest orbit should be used to specify color. It is the only method to
make visible areas inside the set. You might also try tutorial 
<p>
XaoS has many different
modes for doing this. The cryptic names of modes are mathematical formulas,
where <emph>real</emph> means real part of the latest orbit, <emph>imag</emph>
imaginary part. <emph>zmag</emph> takes magnitude of the latest value. The
<emph>Decomposition-like</emph> method uses angle of the orbit. Also truecolor
incoloring modes are available.

In the scripting language, incoloring mode is specified by the integer value with
following meaning:
<p>
<dl>
<dt>0
<dd><math>0</math>
<dt>1
<dd><math>zmag</math>
<dt>2
<dd>Decomposition-like
<dt>3
<dd><math>real/imag</math>
<dt>4
<dd><math>abs(abs(c)-abs(r))</math>
<dt>5
<dd><math>cos(mag)</math>
<dt>6
<dd><math>mag*cos(real^2)</math>
<dt>7
<dd><math>sin(real^2-imag^2)</math>
<dt>8
<dd><math>atan(real*imag*creal*cimag)</math>
<dt>9
<dd>squares
<dt>10
<dd>Truecolor. To set exact parameters for truecolor coloring use <a tcolor><tt>tcolor</tt></a>.
</dl>
<p>
<emph>Available as</emph>: command line option, command

<node outcoloring, incoloring, tcolor, fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%outcoloring moutcoloring out1 out2 out3 out4 out5 out6 out7 out8 out9 out10 out0
<head>Outside coloring mode</head>
<p><emph>Syntax</emph>:(outcoloring integer)
<p>
Concept of outcoloring modes is similar to <a incoloring>inside coloring mode</a> but for areas outside set. The value of latest orbit is used to calculate color of pixel. This should make image
more interesting. You might try tutorial ``<tutor outcoloring.xaf>Outcoloring modes</tutor>''
to see some examples.
<p>
The cryptic names of modes are mathematical formulas,
where <emph>real</emph> means real part of the latest orbit, <emph>imag</emph>
imaginary part. <emph>binary decomposition</emph> uses different color in
case imaginary part of orbit is lower than zero, <emph>smooth</emph> attempts
to remove the stripes.   Also truecolor <a tcolor>coloring modes</a> are available.
<p>
In the scripting language, incoloring mode is specified by the integer value with following meaning:
<p>
<dl>
<dt>0
<dd><math>iter</math>
<dt>1
<dd><math>iter+real</math>
<dt>2
<dd><math>iter+imag</math>
<dt>3
<dd><math>iter+real/imag</math>
<dt>4
<dd><math>iter+real+imag+real/imag</math>
<dt>5
<dd>binary decomposition
<dt>6
<dd>biomorphs
<dt>7
<dd>potential
<dt>8
<dd>color decomposition
<dt>9
<dd>smooth
<dt>10
<dd>True-color outcoloring mode. To set exact parameters for truecolor coloring use <a tcolor><tt>outtcoloring</tt></a>.
</dl>
<p>
<emph>Available as</emph>: command line option, command

<node tcolor, outcoloring, , fractal>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%tcolor intcoloring outtcoloring tincoloring toucoloring int0 int1 int2 int3 int4 int5 int6 int7 int8 int9 int10 int11 outt0 outt1 outt2 outt3 outt4 outt5 outt6 outt7 outt8 outt9 outt10 outt11
<head>Truecolor coloring mode</head>
<p><emph>Syntax</emph>:(intcoloring integer)
<p><emph>Syntax</emph>:(outtcoloring integer)
<p>
Truecolor coloring modes are similar to <a incoloring>incolor</a> and <a
outcoloring>outcolor</a> coloring modes. The difference is, that they don't
use palette, but calculates directly three components--red, green and blue.
This lets you to display more information about fractal and produces quite
interesting results. At 8bpp displays you need to enable <a palettef>palette
emulator filter</a> first to see anything. You might try tutorial 
``<tutor truecol.xaf>Truecolor coloring modes</tutor>'' to see some examples.
<p>
The cryptic names of formulas are always three mathematical formulas (each for
every color component),
where <emph>real</emph> means real part of the latest orbit, <emph>imag</emph>
imaginary part. 
<p>
To enable inside/outside truecolor coloring mode in scripting language, set
<tt>incoloring</tt>/<tt>outcoloring</tt> value to 10 (truecolor coloring
mode).
<p>
Number select formula as follows:
<p>
<dl>
<dt>0
<dd>black
<dt>1
<dd><math>re*im</math> <math>sin(re^2)</math> angle
<dt>2
<dd><math>sin(re)</math> <math>sin(im)</math> <math>sin(square)</math>
<dt>3
<dd>hsv
<dt>4
<dd>hsv2
<dt>5
<dd><math>cos(re^c)</math> <math>cos(im^2)</math> <math>cos(square)</math>
<dt>6
<dd><math>abs(re^2)</math> <math>abs(im^2)</math> <math>abs(square)</math>
<dt>7
<dd><math>re*im</math> <math>re*re</math> <math>im*im</math>
<dt>8
<dd><math>abs(im*cim)</math> <math>abs(re*cre)</math> <math>abs(re*cim)</math>
<dt>9
<dd><math>abs(re*im-csqr)</math> <math>abs(re^2-csqr)</math> <math>abs(im^2-csqr)</math>
</dl>
<p>
<emph>Available as</emph>: command line option, command



<node calc, fractal, mfilter, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%calc

<menuhead><head>Calculation</head></menuhead>
This menus contains functions to control calculation parameters such as
maximal number of iteration or periodicity checking.
<menuitems><center>
<p><a range>Solid guessing</a>
<p><submenu><a dynamic>Dynamic resolution</a>
<p><a periodicity>Periodicity checking</a>
<p><a maxiter>Iterations</a>
<p><a fastjulia>Fast julia mode</a>
<p><a dynamic>Dynamic resolution</a>
<p><a rotate>Rotation</a>
</center></menuitems>
<node range, , periodicity, calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%range mguess guess0 guess1 guess2 guess3 guess4 guess5 guess6 guess7 guess8 guess9 guessall
<head>Solid guessing range</head>
<p><emph>Syntax</emph>:(range integer)
<p>
XaoS performs an solid guessing optimization: in case that all corners of
rectangle has same color it expect that whole rectangle is solid and don't
calculate points inside set. This optimization saves lots of calculation, but
sometimes introduces errors. This value alters size of maximal rectangle,
which can be guessed. Default value is 4, use 0 to disable this feature.
<p>
<emph>Available as</emph>: command line option, command

<node periodicity, range, maxiter, calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%periodicity
<head>Periodicity checking</head>
<p><emph>Syntax</emph>:(periodicity bool)
<p>
Periodicity checking is one of way to speed up calculation. Areas inside set
needs <a maxiter><tt>maxiter</tt></a> iterations to calculate, that point is
most probably inside set. One of tricks to avoid this calculation is
periodicity checking. Often the trajectory of orbit gets into cycle, which you
might detect and stop calculation, since it is sure, that orbit will never
leave it.
<p>
Implementation of this method is quite problematic. It slows down in cases,
where cycles are not found and also checking of cycle is quite hard work.
Because of inexact calculations, cycle is never exact, so you need to use some
error value. Higher error value means, that cycle will be detected sooner,
whole lower error value means more exact calculation. Higher values introduces
serious mistakes especially at the front of the Mandelbrot set. XaoS detects
this value automatically and it is correct for the most cases, but sometimes
it might be wrong. Also other optimizations in XaoS (such as boundary trace)
don't give much chance to this method, since areas inside set are usually not
calculated.
<p>
Thats why advantages of this method are disputable. You might experiment with
enabling/disabling it. Sometimes it is faster when enabled, sometimes when
disabled. Also this method works only in the case <a incoloring>incoloring</a> methods are
disabled and just at certain fractal types.
<p>
You might try tutorial ``<tutor escape.xaf>Escape time fractals</tutor>'' for
more information about calculation of fractal.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node maxiter, periodicity, fastjulia, calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%maxiter
<head>Iterations</head>
<p><emph>Syntax</emph>:(maxiter integer)
<p>
When fractal set is calculated, an trajectory of orbit is examined for each
point. In case orbit leaves to infinity, point is outside set. Otherwise orbit
is inside set. For exact calculation you need to know whole trajectory of
orbit, which has infinite number of positions for areas inside set. So fractal
can not be calculated exactly. By default XaoS calculates maximally 170
positions (iterations) and then gives up and in case, point is still inside
the bail-out, it guesses, that point is inside set.
<p>
When zoomed into detail area, this value should become low and fractal will
be boring. You might try to increase this value (and decrease speed of
calculation) if you want to get image interesting again.
<p>
You might try tutorial ``<tutor escape.xaf>Escape time fractals</tutor>'' for
more information about calculation of fractal.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node fastjulia, maxiter, dynamic, calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%fastjulia
<head>Fast julia mode</head>
<p><emph>Syntax</emph>:(fastjulia bool)
<p>
By default, changing of seed for the julia set requires recalculation of the
image (which is quite slow). It is nice effect to change seed smoothly and make
morphing animations. XaoS has special algorithm, which can calculate such
morphings at real-time. It is very inexact, but it is good for first preview.
<p>
If you want to select good seedpoint, enable fast julia mode and find some
nice place by dragging first mouse button.
Then change to the <a uimandelbrot>julia mode</a> to get exact image.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node dynamic, fastjulia, rotate, calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%dynamic nodynamic dynamicanimation dynamicnew fastmode 

<menuhead><head>Dynamic resolution</head></menuhead>
<p><emph>Syntax</emph>:(fastmode keyword)
<p>
XaoS performs many optimizations, but quite often it is not enough. In order
to keep high framerate, XaoS automatically lowers the resolution and increases
it back in case he has some free time. This feature is by default enabled in
animation, but you might also enable it for the new images (then it creates
nice effects when image is recalculated) or disable is completely if you
don't like it.
<p>
Keyword should be one of the following:
<dl>
<dt><tt>'never</tt>
<dd>Disable dynamic resolution
<dt><tt>'animate</tt>
<dd>Use only for animations (default)
<dt><tt>'new</tt>
<dd>Use also for new images
</dl>
<node rotate, dynamic, , calc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%rotate norotate controtate mouserotate rotationspeed autorotate fastrotate

<menuhead><head>Image rotation</head></menuhead>

XaoS has also support for image rotation. The image should be rotated to
arbitrary angle. By default changing of angle requires recalculation of the
whole screen, but when <emph>fast rotation mode</emph> is enabled, angle
should be changed smoothly. In this mode XaoS calculates larger non-rotated
image and rotates it later, so it increases memory requirements and slows
down, so it should be disabled, when rotation is not used.
<p>
User interface should be set to two rotation modes--<emph>rotate by
mouse</emph> when you should by dragging first mouse button change angle,
or <emph>continuous rotation mode</emph>, where image is rotated continuously.
You might use arrow keys to change speed.
<p><emph>Syntax</emph>:(fastrotate bool)
<p>
This function should be used to enable and disable fast rotation mode
<emph>Available as</emph>: command line option, command
<head>Automatic rotation</head>
<p><emph>Syntax</emph>:(autorotate bool)
<p>
Use this function to enable continuous rotation. In the scripting language you
might use also function <a morphangle><tt>morphangle</tt></a> to get similar
effect.
<p><emph>Syntax</emph>:(rotationspeed float)
<p>
Specify continuous rotation speed. Speed is set in the angle per seconds value.
Negative values are allowed and means opposite direction
<p>
<emph>Available as</emph>: menu item, command line option, command



<node mfilter, calc, ui, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mfilter

<menuhead><head>Filters</head></menuhead>
Filters are post-calculation effect applied to the resulting image. They
should perform effects like motion-blur, emulation of different videomode and
such. You might try also an tutorial about <tutor filter.xaf>filters</tutor>.
<p>
<menuitems><center>
<p><a filter>Filter command</a>
<p><a edge>Edge detection</a>
<p><a edge2>Edge detection2</a>
<p><a starfield>Starfield</a>
<p><a stereogram>Random dot stereogram</a>
<p><a interlace>Interlace filter</a>
<p><a blur>Motionblur</a>
<p><a emboss>Emboss</a>
<p><a palettef>Palette emulator</a>
<p><a anti>Antialiasing</a>
<p><a truecolor>Truecolor emulator</a>
</center></menuitems>
<node filter, , edge, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%filter
<head>Filter command</head>
<p><emph>Syntax</emph>:(filter keyword bool)
<p>
This command should be used to enable/disable various <a mfilter>filters</a>.
<emph>Keyword</emph> specifies filter and should be one of the following:
<p>
<dl>
<dt><tt>'edge</tt>
<dd><a edge>Edge detection</a>
<dt><tt>'edge2</tt>
<dd><a edge2>Edge detection2</a>
<dt><tt>'starfield</tt>
<dd><a starfield>Starfield</a>
<dt><tt>'stereogram</tt>
<dd><a stereogram>Random dot stereogram</a>
<dt><tt>'interlace</tt>
<dd><a interlace>Interlace filter</a>
<dt><tt>'blur</tt>
<dd><a blur>Motionblur</a>
<dt><tt>'emboss</tt>
<dd><a emboss>Emboss</a>
<dt><tt>'palette</tt>
<dd><a palette>Palette emulator</a>
<dt><tt>'anti</tt>
<dd><a anti>Antialiasing</a>
<dt><tt>'truecolor</tt>
<dd><a truecolor>Truecolor</a>
</dl>
<p>
<emph>Available as</emph>: command
<node edge, filter, edge2, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%edge
<head>Edge detection</head>
<p>
This filter performs standard edge detection algorithm. Solid areas are
filed in black color. This produces very interesting results at some fractals.
This version of filter produces relatively wide lines, so it is useful
especially in the higher resolution. The filter <a edge2>edge detection2</a>
makes lines better for the low resolution modes.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node edge2, edge, starfield, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%edge2
<head>Edge detection2</head>
<p>
This filter performs standard edge detection algorithm. Solid areas are
filed in black color. This produces very interesting results at some fractals.
This version of filter produces relatively tight lines, so it is useful
especially in the lower resolution. The filter <a edge2>edge detection2</a>
makes lines better for the high resolution modes.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node starfield, edge2, stereogram, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%starfield
<head>Starfield</head>
<p>
Starfields filter generates random stars depends at the number of iterations
required to calculate of points. Choose your favorite spiral fractal and
enable this filter to get galaxy.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node stereogram, starfield, interlace, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%stereogram
<head>Random dot stereogram</head>
<p>
   Fractal images are also good as base for random dot stereogram. In
   case you don't know what this mean, please point your browser to
   altavista or other searching engine and find some article about this
   images, because browsing such images is not easy. They makes possible
   to generate three dimensional images at normal monitor without any
   additional hardware.
<p>
   XaoS is also able to generate this images in animation so you may use
   all normal XaoS functions except palette changing/rotation, because this
   is unnecessary. To make animation yet more exciting XaoS emulates
   ``falling'' into the set. So during zooming distance from set is getting
   lower and lower. But never lets you fall down so when set reaches level
   of your monitor distance is changed again and you are far away.
<p>
   To make this in real sizes xaos needs to know <emph>exact sizes of your
   monitor</emph>. Because most platforms does not know this values you need to
   use <emph>command line options</emph> to tune this. Otherwise you should have
   problems with seeing anything in images generated by XaoS (in case
   your monitor is too big or resolution low). Or images are not as deep
   as normaly (in case your monitor small or resolution high).
<p>
   By default xaos expect my 15" monitor (29.0cm x 21.5 cm). Another
   problem is virtual screen supported by some windowed environments(like
   X11) that makes program think that resolution is higher and you see
   just part of this screen. This cause problem with recalculation screen
   size to pixel size.
<p>
   The worst think you should do at all is to run full-screen XaoS in some
   graphical window(windows 95 or OS/2 ?) where XaoS don't know that real
   size of his window is different.
<p>
   Following command line options are provided for this.
<p>
<dl>
<dt><tt>-screenwidth</tt>, <tt>-screenheight</tt>
          <dd>lets you specify size of your screen in centimeters. Note that
          you need to specify size of image at you monitor. Not size with
          some borders or such.
  
   <dt><tt>-pixelwidth</tt>, <tt>-pixelheight</tt>
          <dd>lets you specify exact size of one pixel in cases I described
          bellow.
</dl>
<p>
   This options are used by some other parts of XaoS too. So you should
   use them even you don't want to see stereograms. You should write
   small starting script that passes correct parameters.
<p>
   Another problem should happen when <emph>window is smaller than 8cm</emph>. In
   this case you will be unable to see anything.
   
   So correct way to see XaoS stereogram is:
<dl>
    <dt>1
    <dd>start XaoS with options specifying correct size of screen or pixel
     <dt>2
     <dd>Sit 60cm away from monitor
     <dt>3
     <dd>In case you use windowed environment resize XaoS window to make it wider than, say, 15 cm.
     <dt>4
     <dd>Enable filter (by pressing <tt>E</tt>)
     <dt>5
     <dd>concentrate far away from monitor (you should try to use your
       reflection) until random points will get into different
       distances and you will see Mandelbrot
     <dt>6
     <dd>Carefully use you mouse to zoom into interesting areas
     (it is easy to lose concentration when you are not trained. Or use autopilot.
     <dt>7
     <dd>Enjoy animation :)
</dl>
<p>
   Last problem should be that fractal is deformed. This can be caused by
   wrong geometry of your monitor. Eye is extremely sensible for distances
   so should see very small changes in geometry that are normally
   invisible.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
   
<p>
<emph>Available as</emph>: menu item, command line option

<node interlace, stereogram, blur, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%interlace
<head>Interlace filter</head>
<p>
Interlace filter reduces horizontal resolution and in each frame draws just
even or odd lines. This speeds up calculation and in higher resolutions
produces motion-blur like effect.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node blur, interlace, emboss, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%blur
<head>Motionblur</head>
<p>
Motion blur mixes current frame with previous ones in order to produce
motion-blur effect. It might be quite slow in 16bpp truecolor modes. Best
results produces probably in 8bpp modes, so you might try to enable <a palettef>palette filter first</a>
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node emboss, blur, palettef, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%emboss
<head>Emboss</head>
<p>
This is an standard emboss filter well known from programs such as GIMP or
Photoshop. It produces nice results especially with smooth <a incoloring>incoloring mode</a>.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node palettef, emboss, anti, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%palettef
<head>Palette emulator</head>
<p>
XaoS should work in palette or <a truecolor>truecolor</a> mode. Both modes have its advantages
and disadvantages. Palette mode allows effect such as palette rotation and
truecolor mode allows smoother <a incoloring>incoloring</a>
and <a outcoloring>outcoloring</a> modes and 
<a tcolor>truecolor coloring mode</a>. If your display is truecolor, you
might enable this filter to get palette emulation.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node anti, palettef, truecolor, mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%anti
<head>Antialiasing</head>
<p>
Antialiasing is one of techniques how to increase image quality. XaoS then
calculates four values for each pixel and uses average of them. This makes
boundaries look better.
<p>
This filter slows down a much and highly increases memory requirements. But it
is useful, when you want to save better images. Antialiasing helps a much
when you want to encode JPEG or MPEG files. They are much shorter then.
<notex>
<p>
<a filter>More information about filters</a>
</notex>
<p>
<emph>Available as</emph>: menu item, command line option

<node truecolor, anti, , mfilter>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%truecolor
<head>Truecolor emulator</head>
<p>
XaoS should work in <a palettef>palette</a> or truecolor mode. Both modes have its advantages
and disadvantages. Palette mode allows effect such as palette rotation and
truecolor mode allows smoother <a incoloring>incoloring</a>
and <a outcoloring>outcoloring</a> modes and 
<a tcolor>truecolor coloring mode</a>. If your display is 8bpp, you
might enable this filter to get truecolor emulation.
<p>
<a filter>More information about filters</a>
<p>
<emph>Available as</emph>: menu item, command line option

<node ui, mfilter, misc, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ui uia

<menuhead><head>UI</head></menuhead>

This menus contains functions to control user interface layer of XaoS such as
zooming speed and such.

<menuitems><center>
<p><a speed>Zooming speed</a>
<p><a letterspersec>Letters per second</a>
<p><a autopilot>Autopilot</a>
<p><a recalculate>Recalculate</a>
<p><a interrupt>Interrupt</a>
<p><a nogui>Disable XaoS's builtin GUI</a>
<p><a status>Status</a>
<p><a ministatus>Ministatus</a>
</center></menuitems>
<node speed, , letterspersec, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%speed speedup maxstep
<head>Zooming speed</head>
<p><emph>Syntax</emph>:(speed float)
<p>
Change zooming speed. 1 means default speed, 2 means twice as fast.
<p>
<emph>Available as</emph>: menu item, command line option, command
<p>
In the scripting language you might use following functions for better control
of speed.
<p><emph>Syntax</emph>:(maxstep float)
<p>
Selects speed of zooming/UN-zooming. Step specifies how large
amount of range will be taken away each 1/20 of second.
(0 means nothing, 1 means everything--this value is incorrect)
Higher values means faster zooming.
<p>
<emph>Available as</emph>: command
<p><emph>Syntax</emph>:(speedup float)
When zooming/UN-zooming every 1/20 of second the <tt>speedup</tt> value is added
to current step until <tt>maxstep</tt> is reached. So this value selects
speedup/slowdown of animation. Both this functions are more for internal
use of XaoS then for manually wrote scripts.
<p>
<emph>Available as</emph>: command

<node letterspersec, speed, autopilot, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%letterspersec animletterspersec
<head>Letters per second</head>
<p><emph>Syntax</emph>:(letterspersec integer)
<p>
Speed of subtitles for function <a textsleep><tt>textsleep</tt></a>. User can
set this value to fit his own needs. It should be changed also by arrow keys
during animation replay.
<p>
<emph>Available as</emph>: command line option, command

<node autopilot, letterspersec, recalculate, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%autopilot
<head>Autopilot</head>
<p><emph>Syntax</emph>:(autopilot bool)
<p>
 To make XaoS yet more impressive we did special autopilot that
 automatically drives into interesting boundaries of set. So you should
 press <tt>A</tt>, play your favorite music, drink coffee and relax. I never
 tried this but it should be really relaxing! Many pictures in XaoS
 gallery are discovered using autopilot.
<p>
 Autopilot has also some additional features. It return back in case
 zoomed picture is not interesting anymore. Also is able to detect,
 when zoomed into really boring part or reached limit of floating point
 numbers and restart zooming.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node recalculate, autopilot, interrupt, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%recalculate
<head>Recalculate</head>
<p><emph>Syntax</emph>:(recalculate)
<p>
Recalculate current fractal. This should be used when fractal at screen is
strange because of error propagation caused by <a range>solid guessing</a>.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node interrupt, recalculate, nogui, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%interrupt animinterrupt
<head>Interrupt</head>
<p><emph>Syntax</emph>:(interrupt)
<p>
Interrupt current calculation.
<p>
<emph>Available as</emph>: menu item, command line option, command


<node nogui, interrupt, status, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%nogui
<head>Disable XaoS's builtin GUI</head>
<p><emph>Syntax</emph>:(nogui bool)
<p>
Disable XaoS menus and dialogs. This function should be used by external GUI
programs, that changes parameters from pipe. See hacker's manual
(<tt>xaosdev.texinfo</tt>) for more details.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node status, nogui, ministatus, ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%status animstatus
<head>Status</head>
<p><emph>Syntax</emph>:(status bool)
<p>
Enable/disable status information. Status displays some useful information
about current fractal, such as viewpoint etc.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node ministatus, status, , ui>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ministatus animministatus
<head>Ministatus</head>
<p><emph>Syntax</emph>:(ministatus bool)
<p>
Enable/disable status line. This status contains basic information such as how
much you are zoomed or framerate.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node misc, ui, helpmenu, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%misc

<menuhead><head>Misc</head></menuhead>
Miscelanely functions.
<menuitems><center>
<p><a command>Command</a>
<p><a renderanim>Render animation</a>
<p><a clearscreen>Clear screen</a>
<p><a display>Display fractal</a>
<p><a text>Display text</a>
<p><a color>Color</a>
<p><submenu><a xtextpos>Horizontal text position</a>
<p><submenu><a ytextpos>Vertical text position</a>
<p><a textposition>Text position</a>
<p><a message>Message</a>
</center></menuitems>
<node command, , renderanim, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%command
<head>Command</head>
<p>
You might invoke all XaoS functions also using command. This
command has same syntax as in <a format>XaoS animation files</a>
<p>
<emph>Available as</emph>: menu item

<node renderanim, command, clearscreen, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%renderanim
<head>Render animation</head>
<p>
Render animation to image files. See <a mpeg>How to encode MPEG file</a> for
description of the options.
<p>
<emph>Available as</emph>: menu item,
<node clearscreen, renderanim, display, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%clearscreen
<head>Clear screen</head>
<p><emph>Syntax</emph>:(clearscreen)
<p>
Clear screen. To display fractal again, use <a display><tt>display</tt></a>.
This function is useful mainly for tutorials and similar animations.
<p>
<emph>Available as</emph>: menu item, command

<node display, clearscreen, text, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%display
<head>Display fractal</head>
<p><emph>Syntax</emph>:(display)
<p>
Display fractal. This functions disables effect of <tt>clearscreen</tt>, line
drawing and text output functions.
<p>
<emph>Available as</emph>: menu item, command

<node text, display, color, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%text
<head>Display text</head>
<p><emph>Syntax</emph>:(text string)
<p>
Display given text at screen. This function is useful mainly for tutorials.
Text should be cleared by   printing space, 
<a clearscreen><tt>clearscreen</tt></a>, or 
<a display><tt>display</tt></a>
function. You might also use <a textposition><tt>textposition</tt></a> command
to select text position.
<p>
To wait time user needs to read text, you might use function 
<a textsleep><tt>textsleep</tt></a>.
<p>
Example:
<p><tt>
(clearscreen)<br>
(textposition 'center 'middle)<br>
(text "Welcome into my animation")<br>
(textsleep)<br>
(display)<br>
</tt><p>
<emph>Available as</emph>: menu item, command line option, command

<node color, text, textposition, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%color
<head>Color</head>
<p><emph>Syntax</emph>:(color keyword)
<p>
Change color of texts and lines. <emph>Keyword</emph> should be one of the
following: <tt>'white</tt>, <tt>'black</tt> and <tt>'red</tt>.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node textposition, color, message, misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%textposition 
<head>Text position</head>
<p><emph>Syntax</emph>:(textposition keyword keyword)
<p>
Select position for <a text>text</a>. First keyword specifies horizontal
position and second vertical. Horizontal position should be one of the
following: <tt>'left</tt>, <tt>'center</tt>, <tt>'right</tt>. Vertical one
of following: <tt>'top</tt>, <tt>'middle</tt>, <tt>'bottom</tt>.
<p>
<emph>Available as</emph>: command line option, command

<node message, textposition, , misc>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%message
<head>Message</head>
<p><emph>Syntax</emph>:(message string)
<p>
This function is almost identical to function <a text><tt>text</tt></a>. It
uses message catalogs in the <tt>catalog</tt> directory to translate message.
It should be used only in the multi-lingual XaoS tutorials.
<p>
<emph>Available as</emph>: command line option, command

<node helpmenu, misc, xtextpos, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%helpmenu

<menuhead><head>Help</head></menuhead>
This menu contains help and tutorials.
<notex>
<menuitems><center>
<p><a help>Help</a>
</center></menuitems>
<node help, , , helpmenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%help
<head>Help</head>
<p><emph>Syntax</emph>:(help)
<p>
Display main help page.
<p>
<emph>Available as</emph>: menu item, command line option, command
</notex>

<node xtextpos, helpmenu, ytextpos, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xtextpos

<menuhead><head>Horizontal text position</head></menuhead>
Select horizontal position for <a text>text</a>. It should be drawn at the
left, in center or at right.
<notex>
<menuitems><center>
<p><a xtextleft>Left</a>
<p><a xtextcenter>Center</a>
<p><a xtexteight>Right</a>
</center></menuitems>
<node xtextleft, , xtextcenter, xtextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xtextleft
<head>Left</head>
<p>
Draw <a text>text</a> at the left side of screen.
<p>
<emph>Available as</emph>: menu item

<node xtextcenter, xtextleft, xtexteight, xtextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xtextcenter
<head>Center</head>
<p>
Draw <a text>text</a> in the center of screen.
<p>
<emph>Available as</emph>: menu item

<node xtexteight, xtextcenter, , xtextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xtexteight
<head>Right</head>
<p>
Draw <a text>text</a> at the right side of screen.
<p>
<emph>Available as</emph>: menu item
</notex>

<node ytextpos, xtextpos, mformula, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ytextpos

<menuhead><head>Vertical text position</head></menuhead>
Select vertical position for <a text>text</a>. It should be drawn at the
top, middle or bottom of screen.
<notex>
<menuitems><center>
<p><a ytextup>Up</a>
<p><a ytextmiddle>Middle</a>
<p><a ytextbottom>Bottom</a>
</center></menuitems>
<node ytextup, , ytextmiddle, ytextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ytextup
<head>Up</head>
<p>
Draw <a text>text</a> at the top of screen.
<p>
<emph>Available as</emph>: menu item

<node ytextmiddle, ytextup, ytextbottom, ytextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ytextmiddle
<head>Middle</head>
<p>
Draw <a text>text</a> in the middle of screen.
<p>
<emph>Available as</emph>: menu item

<node ytextbottom, ytextmiddle, , ytextpos>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ytextbottom
<head>Bottom</head>
<p>
Draw <a text>text</a> at the bottom of screen.
<p>
<emph>Available as</emph>: menu item
</notex>

<node mformula, ytextpos, palettemenu, menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mformula

<menuhead><head>formulae</head></menuhead>
<p>
Each escape time fractal has it's own formula. XaoS supports following
formulas:
<p>
<menuitems><center>
<p><a mandel>Mandelbrot</a>
<p><a mandel3>Mandelbrot^3</a>
<notex>
<p><a mandel4>Mandelbrot^4</a>
<p><a mandel5>Mandelbrot^5</a>
<p><a mandel6>Mandelbrot^6</a>
</notex>
<p><a octal>Octal</a>
<p><a newton>Newton</a>
<p><a barnsley>Barnsley1</a>
<p><a phoenix>Phoenix</a>
<p><a magnet>Magnet</a>
</center></menuitems>
<node mandel, , mandel3, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mandel
<head>Mandelbrot</head>
<p>
Mandelbrot set is the most famous escape time fractal ever. It has simple
formula <math>z=z^2+c</math>. You might also try tutorial ``<tutor mset.xaf>the Mandelbrot set</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option

<node mandel3, mandel, octal, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%mandel3 mandel4 mandel5 mandel6
<head>Mandelbrot^3--Mandelbrot^6</head>
<p>
This fractal uses simple modification of the standard 
<a mandel>Mandelbrot set</a>' formula. It uses <math>z=z^3+c</math> instead of
<math>z=z^2+c</math>. 
<p>
Other derivations of the Mandelbrot set (Mandelbrot^4
etc.) uses even higher powers. You might also try tutorial 
``<tutor power.xaf>higher power Mandelbrot sets</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option
<node octal, mandel3, newton, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%octal
<head>Octal</head>
<p>
This is less known fractal, that Thomas discovered in Fractint. It has quite
interesting shape mainly when displayed in the alternative <a
mplane>planes</a>. You might try tutorial ``<tutor octo.xaf>Octo</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option

<node newton, octal, barnsley, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%newton
<head>Newton</head>
<p>
This is an Newton's approximation method for finding roots of polynomial. It
uses polynomial <math>x^3=1</math> and counts number of iterations needed to
reach approximate value of the root. More information are in tutorial ``<tutor newton.xaf>Newton</tutor>''.
<p>
This fractal don't have Julia sets, but XaoS is able to generate Julia-like
sets, which are also very interesting (sometimes also called ``Nova
formulae'').
<p>
<emph>Available as</emph>: menu item, command line option

<node barnsley, newton, phoenix, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%barnsley
<head>Barnsley1</head>
<p>
This is formula by Michael Barnsley. It produces very nice crystalline Julia
sets. You might also try tutorial ``<tutor barnsley.xaf>Barnsley's formula</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option

<node phoenix, barnsley, magnet, mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%phoenix
<head>Phoenix</head>
<p>
This is formula produces very nice Julia sets.
You might also try tutorial ``<tutor phoenix.xaf>Phoenix</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option

<node magnet, phoenix, , mformula>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%magnet
<head>Magnet</head>
<p>
This is formula that comes from the theoretical physics.
It is derived from the study
of theoretical lattices in the
context of magnetic renormalization
transformations.
You might also try tutorial ``<tutor phoenix.xaf>Magnet</tutor>''.
<p>
<emph>Available as</emph>: menu item, command line option

<node palettemenu, mformula, , menus>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%palettemenu

<menuhead><head>Palette</head></menuhead>
Functions to change fractal's palette. 
<menuitems><center>
<p><a defpalette>Default palette</a>
<p><a randompalette>Random palette</a>
<p><a palette>Custom palette</a>
<p><a cycling>Color cycling</a>
<p><a shiftpalette>Shift palette</a>
</center></menuitems>
<node defpalette, , randompalette, palettemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%defpalette
<head>Default palette</head>
<p><emph>Syntax</emph>:(defaultpalette number)
<p>
Create an default palette. In the scripting language number specifies how much
is palette shifted.
<p>
Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable <a palettef>palette emulation filter</a> first.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node randompalette, defpalette, palette, palettemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%randompalette
<head>Random palette</head>
<p><emph>Syntax</emph>:(randompalette)
<p>
Create an random palette. XaoS will automatically pick one of his algorithms
for generating palettes and create one.
<p>
Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable <a palettef>palette emulation filter</a> first.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node palette, randompalette, cycling, palettemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%palette
<head>Custom palette</head>
<p><emph>Syntax</emph>:(palette integer integer integer)
<p>
Custom palette lets you re-create some of the random palettes. First value
specifies algorithm which should be currently one of the following:
<dl>
<dt>0
<dd>Default palette
<dt>1
<dd>Black to color grades
<dt>2
<dd>Black to color to white grades
<dt>3
<dd>Cubistic-like algorithm.
</dl>
Seed specifies an random seed for palette. Different seeds generates different
palettes. Last value is amount how much palette is shifted.
<p>
Note that changing of palette in the
truecolor modes forces recalculation of the whole screen. To avoid this, you
might enable <a palettef>palette emulation filter</a> first.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node cycling, palette, shiftpalette, palettemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%cycling rcycling cyclingspeed
<head>Color cycling</head>
<p><emph>Syntax</emph>:(cycling bool)
<p>
Color cycling is old and simple effect to animate fractals. It makes nice
effect mainly at the standard Mandelbrot set. At truecolor displays, color
cycling fails to initialize (since they don't have palette). You might enable
<a palettef>palette emulation filter</a> to make it possible.
<p>
<emph>Available as</emph>: menu item, command line option, command
<p>
In the user interface, colors should be also cycled in the opposite direction
by function ``<emph>Reversed color cycling</emph>''.
<p>
To control cycling speed, you might use arrow keys or following function
``<emph>Color cycling speed</emph>''.
<p>
<emph>Available as</emph>: menu item
<p><emph>Syntax</emph>:(cyclingspeed integer)
<p>
Integer value specifies skips per second. It should be also negative to select
cycling in the opposite direction.
<p>
<emph>Available as</emph>: menu item, command line option, command

<node shiftpalette, cycling, , palettemenu>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%shiftpalette fshift bshift
<head>Shift palette</head>
<p><emph>Syntax</emph>:(shiftpalette integer)
<p>
Shift palette by specified color cells. This should be used to tune palette
position at fractal. Also functions <emph>Shift one forward</emph> and
<emph>Shift one backward</emph> should be used for finetunning.
Note that shifted and rotated palettes should look in the different way at
different displays (because of different maximal palette size).
<p>
Shifting of palette at truecolor displays causes recalculation of screen. To
avoid this, you might use <a palettef>palette emulation filter</a>.
<p>
<emph>Available as</emph>: menu item, command line option, command


%endmenus
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%gpl

<head>GNU GENERAL PUBLIC LICENSE</head>
<center>Version 2, June 1991<p>

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.<br>
                          675 Mass Ave, Cambridge, MA 02139, USA<br>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.
</center>
<head>Preamble</head>

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.
<p>
  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.
<p>
  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.
<p>
  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.
<p>
  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.
<p>
  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.
<p>
  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.
<p>
  The precise terms and conditions for copying, distribution and
modification follow.

<head>GNU GENERAL PUBLIC LICENSE<p>
TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</head>

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".
<p>
Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.
<p>
  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.
<p>
You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.
<p>
  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:
<dl>
<dt>
<dd>
<p>
a)
    You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.
<p>
b)
    You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.
<p>
c)
 If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)
</dl>
<p>
These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.
<p>
Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.
<p>
In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.
<p>
  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:
<dl>
<dt>
<dd>
<p>
a)
    Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,
<p>
b)
    Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,
<p>
b)
    Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)
<p>
</dl>
The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.
<p>
If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.
<p>
  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

<p>
  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

<p>
  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

<p>
  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.
<p>

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.
<p>

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.
<p>

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.
<p>
  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.
<p>
  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.
<p>
Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.
<p>
  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

<head>NO WARRANTY</head>

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.
<p>
  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
<p>
<center>END OF TERMS AND CONDITIONS</center>
<head>How to Apply These Terms to Your New Programs</head>
<p>
  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.
<p>
  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.
<p>
<emph>
<tt>
    (one line to give the program's name and a brief idea of what it
    does.)<br>
    Copyright (C) 19yy  (name of author)
<p>
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
<p>
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
<p>
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
</tt>
</emph>
<p>
Also add information on how to contact you by electronic and paper mail.
<p>
If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:
<p>
<emph>
<tt>
    Gnomovision version 69, Copyright (C) 19yy name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.
</tt>
</emph>
<p>
The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.
<p>
You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:
<p>
<emph>
<tt>
  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.
<p>
  (signature of Ty Coon), 1 April 1989
  Ty Coon, President of Vice
</tt>
</emph>
<p>
This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%end
